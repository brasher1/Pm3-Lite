// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "dtcolumn.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"


/////////////////////////////////////////////////////////////////////////////
// CDTColumn properties

unsigned long CDTColumn::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CDTColumn::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CDTColumn::GetSelBackColor()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetSelBackColor(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

unsigned long CDTColumn::GetSelForeColor()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetSelForeColor(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

COleFont CDTColumn::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CDTColumn::SetFont(LPDISPATCH propVal)
{
	SetProperty(0x5, VT_DISPATCH, propVal);
}

long CDTColumn::GetDataType()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetDataType(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

short CDTColumn::GetDataLen()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CDTColumn::SetDataLen(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

long CDTColumn::GetExtra1()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetExtra1(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long CDTColumn::GetExtra2()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetExtra2(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

CString CDTColumn::GetFormat()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CDTColumn::SetFormat(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CDTColumn::GetHeading()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CDTColumn::SetHeading(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

CString CDTColumn::GetList()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CDTColumn::SetList(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

long CDTColumn::GetDataEdit()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetDataEdit(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

CString CDTColumn::GetDefVal()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CDTColumn::SetDefVal(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

BOOL CDTColumn::GetHidden()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetHidden(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CDTColumn::GetLocked()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetLocked(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

CString CDTColumn::GetName()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CDTColumn::SetName(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

BOOL CDTColumn::GetOverwrite()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetOverwrite(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

VARIANT CDTColumn::GetValue()
{
	VARIANT result;
	GetProperty(0x13, VT_VARIANT, (void*)&result);
	return result;
}

void CDTColumn::SetValue(const VARIANT& propVal)
{
	SetProperty(0x13, VT_VARIANT, &propVal);
}

long CDTColumn::GetHeadAlign()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetHeadAlign(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CDTColumn::GetDataAlign()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetDataAlign(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CDTColumn::GetResize()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CDTColumn::SetResize(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

float CDTColumn::GetWidth()
{
	float result;
	GetProperty(0x17, VT_R4, (void*)&result);
	return result;
}

void CDTColumn::SetWidth(float propVal)
{
	SetProperty(0x17, VT_R4, propVal);
}

BOOL CDTColumn::GetEditAutoHScroll()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetEditAutoHScroll(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

BOOL CDTColumn::GetEditAutoVScroll()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetEditAutoVScroll(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CDTColumn::GetEditLowercase()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetEditLowercase(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CDTColumn::GetEditUppercase()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetEditUppercase(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

BOOL CDTColumn::GetEditMultiLine()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetEditMultiLine(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

BOOL CDTColumn::GetEditWantReturn()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetEditWantReturn(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}

BOOL CDTColumn::GetSelected()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetSelected(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

BOOL CDTColumn::GetBound()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumn::SetBound(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDTColumn operations

void CDTColumn::Invalidate()
{
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

VARIANT CDTColumn::Total()
{
	VARIANT result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long CDTColumn::Search(const VARIANT& Value, long After)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&Value, After);
	return result;
}
