#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"



#line 1 ".\\inc\\stdafx.h"





#line 1 "C:\\MSDEV\\MFC\\include\\afxwin.h"


















	#line 1 "C:\\MSDEV\\MFC\\include\\afx.h"























#pragma component(mintypeinfo, on)
#line 26 "C:\\MSDEV\\MFC\\include\\afx.h"

#line 1 "C:\\MSDEV\\MFC\\include\\afxver_.h"






















	


#line 27 "C:\\MSDEV\\MFC\\include\\afxver_.h"












































#line 72 "C:\\MSDEV\\MFC\\include\\afxver_.h"








#pragma component(browser, off, references, "ASSERT")
#pragma component(browser, off, references, "AfxAssertFailedLine")
#pragma component(browser, off, references, "AfxDebugBreak")
#pragma component(browser, off, references, "BOOL")
#pragma component(browser, off, references, "BYTE")
#pragma component(browser, off, references, "DECLSPEC_IMPORT")
#pragma component(browser, off, references, "DWORD")
#pragma component(browser, off, references, "FALSE")
#pragma component(browser, off, references, "FAR")
#pragma component(browser, off, references, "LPSTR")
#pragma component(browser, off, references, "LPTSTR")
#pragma component(browser, off, references, "LPCSTR")
#pragma component(browser, off, references, "LPCTSTR")
#pragma component(browser, off, references, "NULL")
#pragma component(browser, off, references, "PASCAL")
#pragma component(browser, off, references, "THIS_FILE")
#pragma component(browser, off, references, "TRUE")
#pragma component(browser, off, references, "UINT")
#pragma component(browser, off, references, "WINAPI")
#pragma component(browser, off, references, "WORD")
#line 101 "C:\\MSDEV\\MFC\\include\\afxver_.h"
























#line 126 "C:\\MSDEV\\MFC\\include\\afxver_.h"



#line 130 "C:\\MSDEV\\MFC\\include\\afxver_.h"




#line 135 "C:\\MSDEV\\MFC\\include\\afxver_.h"
#line 136 "C:\\MSDEV\\MFC\\include\\afxver_.h"




#line 1 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"



















#line 21 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"




















































#line 74 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"



















































#pragma warning(disable: 4201)  
#line 127 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"





















#line 23 "C:\\MSDEV\\INCLUDE\\windows.h"




















































#line 76 "C:\\MSDEV\\INCLUDE\\windows.h"




















#line 97 "C:\\MSDEV\\INCLUDE\\windows.h"



#line 101 "C:\\MSDEV\\INCLUDE\\windows.h"



#line 105 "C:\\MSDEV\\INCLUDE\\windows.h"



#line 109 "C:\\MSDEV\\INCLUDE\\windows.h"



#line 113 "C:\\MSDEV\\INCLUDE\\windows.h"



#pragma warning(disable:4001)
#line 118 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\excpt.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\excpt.h"






#line 25 "C:\\MSDEV\\INCLUDE\\excpt.h"







#pragma pack(push,8)
#line 34 "C:\\MSDEV\\INCLUDE\\excpt.h"


extern "C" {
#line 38 "C:\\MSDEV\\INCLUDE\\excpt.h"









#line 48 "C:\\MSDEV\\INCLUDE\\excpt.h"
#line 49 "C:\\MSDEV\\INCLUDE\\excpt.h"









#line 59 "C:\\MSDEV\\INCLUDE\\excpt.h"
#line 60 "C:\\MSDEV\\INCLUDE\\excpt.h"














#line 75 "C:\\MSDEV\\INCLUDE\\excpt.h"
#line 76 "C:\\MSDEV\\INCLUDE\\excpt.h"
#line 77 "C:\\MSDEV\\INCLUDE\\excpt.h"






#line 84 "C:\\MSDEV\\INCLUDE\\excpt.h"





typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;











struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
    struct _EXCEPTION_RECORD *ExceptionRecord,
    void * EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    void * DispatcherContext
    );



















#line 135 "C:\\MSDEV\\INCLUDE\\excpt.h"













#line 149 "C:\\MSDEV\\INCLUDE\\excpt.h"







unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);

#line 161 "C:\\MSDEV\\INCLUDE\\excpt.h"













}
#line 176 "C:\\MSDEV\\INCLUDE\\excpt.h"


#pragma pack(pop)
#line 180 "C:\\MSDEV\\INCLUDE\\excpt.h"

#line 182 "C:\\MSDEV\\INCLUDE\\excpt.h"
#line 119 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\stdarg.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\stdarg.h"






#line 25 "C:\\MSDEV\\INCLUDE\\stdarg.h"







#pragma pack(push,8)
#line 34 "C:\\MSDEV\\INCLUDE\\stdarg.h"


extern "C" {
#line 38 "C:\\MSDEV\\INCLUDE\\stdarg.h"










typedef char *	va_list;
#line 50 "C:\\MSDEV\\INCLUDE\\stdarg.h"

#line 52 "C:\\MSDEV\\INCLUDE\\stdarg.h"




































































































#line 153 "C:\\MSDEV\\INCLUDE\\stdarg.h"



}
#line 158 "C:\\MSDEV\\INCLUDE\\stdarg.h"


#pragma pack(pop)
#line 162 "C:\\MSDEV\\INCLUDE\\stdarg.h"

#line 164 "C:\\MSDEV\\INCLUDE\\stdarg.h"
#line 120 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 121 "C:\\MSDEV\\INCLUDE\\windows.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windef.h"





















extern "C" {
#line 24 "C:\\MSDEV\\INCLUDE\\windef.h"











typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 43 "C:\\MSDEV\\INCLUDE\\windef.h"








#line 52 "C:\\MSDEV\\INCLUDE\\windef.h"
#line 53 "C:\\MSDEV\\INCLUDE\\windef.h"



#line 57 "C:\\MSDEV\\INCLUDE\\windef.h"



#line 61 "C:\\MSDEV\\INCLUDE\\windef.h"



#line 65 "C:\\MSDEV\\INCLUDE\\windef.h"



#line 69 "C:\\MSDEV\\INCLUDE\\windef.h"



#line 73 "C:\\MSDEV\\INCLUDE\\windef.h"











#line 85 "C:\\MSDEV\\INCLUDE\\windef.h"










#line 96 "C:\\MSDEV\\INCLUDE\\windef.h"
#line 97 "C:\\MSDEV\\INCLUDE\\windef.h"















#line 113 "C:\\MSDEV\\INCLUDE\\windef.h"





#line 119 "C:\\MSDEV\\INCLUDE\\windef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;


#line 1 "C:\\MSDEV\\INCLUDE\\winnt.h"





















extern "C" {
#line 24 "C:\\MSDEV\\INCLUDE\\winnt.h"

#line 1 "C:\\MSDEV\\INCLUDE\\ctype.h"














#pragma once
#line 17 "C:\\MSDEV\\INCLUDE\\ctype.h"






#line 24 "C:\\MSDEV\\INCLUDE\\ctype.h"



extern "C" {
#line 29 "C:\\MSDEV\\INCLUDE\\ctype.h"













































#line 75 "C:\\MSDEV\\INCLUDE\\ctype.h"


typedef unsigned short wchar_t;

#line 80 "C:\\MSDEV\\INCLUDE\\ctype.h"



typedef wchar_t wint_t;
typedef wchar_t wctype_t;

#line 87 "C:\\MSDEV\\INCLUDE\\ctype.h"



#line 91 "C:\\MSDEV\\INCLUDE\\ctype.h"
#line 92 "C:\\MSDEV\\INCLUDE\\ctype.h"































__declspec(dllimport) extern unsigned short _ctype[];




__declspec(dllimport) unsigned short ** __cdecl __p__pctype(void);


__declspec(dllimport) wctype_t ** __cdecl ___p__pwctype(void);








#line 141 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 143 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 145 "C:\\MSDEV\\INCLUDE\\ctype.h"







				












__declspec(dllimport) int __cdecl _isctype(int, int);
__declspec(dllimport) int __cdecl isalpha(int);
__declspec(dllimport) int __cdecl isupper(int);
__declspec(dllimport) int __cdecl islower(int);
__declspec(dllimport) int __cdecl isdigit(int);
__declspec(dllimport) int __cdecl isxdigit(int);
__declspec(dllimport) int __cdecl isspace(int);
__declspec(dllimport) int __cdecl ispunct(int);
__declspec(dllimport) int __cdecl isalnum(int);
__declspec(dllimport) int __cdecl isprint(int);
__declspec(dllimport) int __cdecl isgraph(int);
__declspec(dllimport) int __cdecl iscntrl(int);
__declspec(dllimport) int __cdecl toupper(int);
__declspec(dllimport) int __cdecl tolower(int);
__declspec(dllimport) int __cdecl _tolower(int);
__declspec(dllimport) int __cdecl _toupper(int);
__declspec(dllimport) int __cdecl __isascii(int);
__declspec(dllimport) int __cdecl __toascii(int);
__declspec(dllimport) int __cdecl __iscsymf(int);
__declspec(dllimport) int __cdecl __iscsym(int);

#line 187 "C:\\MSDEV\\INCLUDE\\ctype.h"








__declspec(dllimport) int __cdecl iswalpha(wint_t);
__declspec(dllimport) int __cdecl iswupper(wint_t);
__declspec(dllimport) int __cdecl iswlower(wint_t);
__declspec(dllimport) int __cdecl iswdigit(wint_t);
__declspec(dllimport) int __cdecl iswxdigit(wint_t);
__declspec(dllimport) int __cdecl iswspace(wint_t);
__declspec(dllimport) int __cdecl iswpunct(wint_t);
__declspec(dllimport) int __cdecl iswalnum(wint_t);
__declspec(dllimport) int __cdecl iswprint(wint_t);
__declspec(dllimport) int __cdecl iswgraph(wint_t);
__declspec(dllimport) int __cdecl iswcntrl(wint_t);
__declspec(dllimport) int __cdecl iswascii(wint_t);
__declspec(dllimport) int __cdecl isleadbyte(int);

__declspec(dllimport) wchar_t __cdecl towupper(wchar_t);
__declspec(dllimport) wchar_t __cdecl towlower(wchar_t);

__declspec(dllimport) int __cdecl iswctype(wint_t, wctype_t);


__declspec(dllimport) int __cdecl is_wctype(wint_t, wctype_t);



#line 220 "C:\\MSDEV\\INCLUDE\\ctype.h"
#line 221 "C:\\MSDEV\\INCLUDE\\ctype.h"




























__declspec(dllimport) int * __cdecl __p___mb_cur_max(void);



#line 254 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 256 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 258 "C:\\MSDEV\\INCLUDE\\ctype.h"






























#line 289 "C:\\MSDEV\\INCLUDE\\ctype.h"







































#line 329 "C:\\MSDEV\\INCLUDE\\ctype.h"
#line 330 "C:\\MSDEV\\INCLUDE\\ctype.h"









































#line 372 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 374 "C:\\MSDEV\\INCLUDE\\ctype.h"






#line 381 "C:\\MSDEV\\INCLUDE\\ctype.h"

























#line 407 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 409 "C:\\MSDEV\\INCLUDE\\ctype.h"

#line 411 "C:\\MSDEV\\INCLUDE\\ctype.h"


}
#line 415 "C:\\MSDEV\\INCLUDE\\ctype.h"


#line 418 "C:\\MSDEV\\INCLUDE\\ctype.h"
#line 26 "C:\\MSDEV\\INCLUDE\\winnt.h"




#line 31 "C:\\MSDEV\\INCLUDE\\winnt.h"

#line 33 "C:\\MSDEV\\INCLUDE\\winnt.h"



#line 37 "C:\\MSDEV\\INCLUDE\\winnt.h"

#line 39 "C:\\MSDEV\\INCLUDE\\winnt.h"






#line 46 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef void *PVOID;    






#line 55 "C:\\MSDEV\\INCLUDE\\winnt.h"









#line 65 "C:\\MSDEV\\INCLUDE\\winnt.h"








typedef char CHAR;
typedef short SHORT;
typedef long LONG;
#line 77 "C:\\MSDEV\\INCLUDE\\winnt.h"





typedef wchar_t WCHAR;    

typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR;
typedef WCHAR *LPWSTR, *PWSTR;

typedef const WCHAR *LPCWSTR, *PCWSTR;




typedef CHAR *PCHAR;
typedef CHAR *LPCH, *PCH;

typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR;
typedef CHAR *LPSTR, *PSTR;
typedef const CHAR *LPCSTR, *PCSTR;





















typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 127 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef LPSTR LPTCH, PTCH;
typedef LPSTR PTSTR, LPTSTR;
typedef LPCSTR LPCTSTR;


#line 134 "C:\\MSDEV\\INCLUDE\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    


typedef void *HANDLE;




#line 147 "C:\\MSDEV\\INCLUDE\\winnt.h"
typedef HANDLE *PHANDLE;





typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;

typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      
  
  













typedef __int64 LONGLONG;
typedef unsigned __int64 DWORDLONG;





#line 184 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef DWORDLONG *PDWORDLONG;



typedef LONGLONG USN;



#line 195 "C:\\MSDEV\\INCLUDE\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    };
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
#line 205 "C:\\MSDEV\\INCLUDE\\winnt.h"
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




#line 214 "C:\\MSDEV\\INCLUDE\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    };
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
#line 224 "C:\\MSDEV\\INCLUDE\\winnt.h"
    DWORDLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;







typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;






















#line 262 "C:\\MSDEV\\INCLUDE\\winnt.h"































































#line 326 "C:\\MSDEV\\INCLUDE\\winnt.h"











DWORDLONG
__stdcall
Int64ShllMod32 (
    DWORDLONG Value,
    DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    );

DWORDLONG
__stdcall
Int64ShrlMod32 (
    DWORDLONG Value,
    DWORD ShiftCount
    );

#pragma warning(disable:4035)               

__inline DWORDLONG
__stdcall
Int64ShllMod32 (
    DWORDLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline DWORDLONG
__stdcall
Int64ShrlMod32 (
    DWORDLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}

#pragma warning(default:4035)































#line 441 "C:\\MSDEV\\INCLUDE\\winnt.h"


typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY * volatile Flink;
   struct _LIST_ENTRY * volatile Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;








typedef struct _GUID {          
    DWORD Data1;
    WORD   Data2;
    WORD   Data3;
    BYTE  Data4[8];
} GUID;

#line 479 "C:\\MSDEV\\INCLUDE\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 488 "C:\\MSDEV\\INCLUDE\\winnt.h"























































































































































































































































































































#line 800 "C:\\MSDEV\\INCLUDE\\winnt.h"



  






























  
#line 836 "C:\\MSDEV\\INCLUDE\\winnt.h"



typedef DWORD KSPIN_LOCK;  










#line 851 "C:\\MSDEV\\INCLUDE\\winnt.h"
struct _TEB *
NtCurrentTeb(void);
#line 854 "C:\\MSDEV\\INCLUDE\\winnt.h"














































































































































































































































































































































































































#pragma warning(disable:4164)   
                                

#pragma function(_enable)
#pragma function(_disable)
#line 1258 "C:\\MSDEV\\INCLUDE\\winnt.h"

#pragma warning(default:4164)   

#line 1262 "C:\\MSDEV\\INCLUDE\\winnt.h"
#line 1263 "C:\\MSDEV\\INCLUDE\\winnt.h"



#pragma warning (disable:4035)        
_inline PVOID GetFiberData( void ) { __asm {
                                        mov eax, fs:[0x10]
                                        mov eax,[eax]
                                        }
                                     }
_inline PVOID GetCurrentFiber( void ) { __asm mov eax, fs:[0x10] }

#pragma warning (default:4035)        
#line 1276 "C:\\MSDEV\\INCLUDE\\winnt.h"































#line 1308 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef struct _FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

} CONTEXT;



typedef CONTEXT *PCONTEXT;



#line 1418 "C:\\MSDEV\\INCLUDE\\winnt.h"


typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

























































































































































































































































































































































#line 1790 "C:\\MSDEV\\INCLUDE\\winnt.h"










#line 1801 "C:\\MSDEV\\INCLUDE\\winnt.h"





































































































































































































































#line 2031 "C:\\MSDEV\\INCLUDE\\winnt.h"







typedef struct _EXCEPTION_RECORD {
      
    DWORD    ExceptionCode;
      
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;

































typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union {
        PVOID FiberData;
        DWORD Version;
    };
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;





typedef struct _QUOTA_LIMITS {
    DWORD PagedPoolLimit;
    DWORD NonPagedPoolLimit;
    DWORD MinimumWorkingSetSize;
    DWORD MaximumWorkingSetSize;
    DWORD PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;





























typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;




































































































































typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;





typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     







































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "C:\\MSDEV\\INCLUDE\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#pragma pack(4)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 2420 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 2429 "C:\\MSDEV\\INCLUDE\\winnt.h"
































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;


typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 2475 "C:\\MSDEV\\INCLUDE\\winnt.h"
} SID, *PISID;





                                                

typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;








































































































































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;





















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;












































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;











typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;































typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;


















































































typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;
   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;










































































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;


















































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;























































typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;







typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;



typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;



typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;





typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;



typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;




typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL, *PTOKEN_CONTROL;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;


typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;











#line 1 "C:\\MSDEV\\INCLUDE\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#pragma pack(4)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 3336 "C:\\MSDEV\\INCLUDE\\winnt.h"







#line 1 "C:\\MSDEV\\INCLUDE\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#pragma pack(2)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 3344 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 3455 "C:\\MSDEV\\INCLUDE\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






























typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;








typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;









































typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

























































#line 1 "C:\\MSDEV\\INCLUDE\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#pragma pack(2)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 3700 "C:\\MSDEV\\INCLUDE\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        PBYTE   LongName[2];
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;


































































































#line 3820 "C:\\MSDEV\\INCLUDE\\winnt.h"




#line 3825 "C:\\MSDEV\\INCLUDE\\winnt.h"





#line 3831 "C:\\MSDEV\\INCLUDE\\winnt.h"




#line 3836 "C:\\MSDEV\\INCLUDE\\winnt.h"



#line 3840 "C:\\MSDEV\\INCLUDE\\winnt.h"


#line 3843 "C:\\MSDEV\\INCLUDE\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;























typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    };
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;




































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;



#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 4026 "C:\\MSDEV\\INCLUDE\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;



























typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    PDWORD  *AddressOfFunctions;
    PDWORD  *AddressOfNames;
    PWORD   *AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    BYTE    Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

typedef struct _IMAGE_THUNK_DATA {
    union {
        PBYTE  ForwarderString;
        PDWORD Function;
        DWORD Ordinal;
        PIMAGE_IMPORT_BY_NAME AddressOfData;
    } u1;
} IMAGE_THUNK_DATA;
typedef IMAGE_THUNK_DATA * PIMAGE_THUNK_DATA;





typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;                
        PIMAGE_THUNK_DATA OriginalFirstThunk;   
    };
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    PIMAGE_THUNK_DATA FirstThunk;           
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;






typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    PDWORD  AddressOfIndex;
    PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY, *PIMAGE_TLS_DIRECTORY;




















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;



















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        };
        DWORD   Name;
        WORD    Id;
    };
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        };
    };
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    PVOID   LockPrefixTable;
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    DWORD   Reserved[ 3 ];
} IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY;









typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    PVOID ExceptionHandler;
    PVOID HandlerData;
    DWORD PrologEndAddress;
} IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY;





typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;












typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;





                                                

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 4439 "C:\\MSDEV\\INCLUDE\\winnt.h"








#line 1 "C:\\MSDEV\\INCLUDE\\string.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\string.h"






#line 25 "C:\\MSDEV\\INCLUDE\\string.h"



extern "C" {
#line 30 "C:\\MSDEV\\INCLUDE\\string.h"













































#line 76 "C:\\MSDEV\\INCLUDE\\string.h"



typedef unsigned int size_t;

#line 82 "C:\\MSDEV\\INCLUDE\\string.h"







#line 90 "C:\\MSDEV\\INCLUDE\\string.h"




#line 95 "C:\\MSDEV\\INCLUDE\\string.h"
























        void *  __cdecl memcpy(void *, const void *, size_t);
        int     __cdecl memcmp(const void *, const void *, size_t);
        void *  __cdecl memset(void *, int, size_t);
        char *  __cdecl _strset(char *, int);
        char *  __cdecl strcpy(char *, const char *);
        char *  __cdecl strcat(char *, const char *);
        int     __cdecl strcmp(const char *, const char *);
        size_t  __cdecl strlen(const char *);
#line 128 "C:\\MSDEV\\INCLUDE\\string.h"
__declspec(dllimport) void *  __cdecl _memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) void *  __cdecl memchr(const void *, int, size_t);
__declspec(dllimport) int     __cdecl _memicmp(const void *, const void *, unsigned int);





__declspec(dllimport) void *  __cdecl memmove(void *, const void *, size_t);
#line 138 "C:\\MSDEV\\INCLUDE\\string.h"


__declspec(dllimport) char *  __cdecl strchr(const char *, int);
__declspec(dllimport) int     __cdecl _strcmpi(const char *, const char *);
__declspec(dllimport) int     __cdecl _stricmp(const char *, const char *);
__declspec(dllimport) int     __cdecl strcoll(const char *, const char *);
__declspec(dllimport) int     __cdecl _stricoll(const char *, const char *);
__declspec(dllimport) int     __cdecl _strncoll(const char *, const char *, size_t);
__declspec(dllimport) int     __cdecl _strnicoll(const char *, const char *, size_t);
__declspec(dllimport) size_t  __cdecl strcspn(const char *, const char *);
__declspec(dllimport) char *  __cdecl _strdup(const char *);
__declspec(dllimport) char *  __cdecl _strerror(const char *);
__declspec(dllimport) char *  __cdecl strerror(int);
__declspec(dllimport) char *  __cdecl _strlwr(char *);
__declspec(dllimport) char *  __cdecl strncat(char *, const char *, size_t);
__declspec(dllimport) int     __cdecl strncmp(const char *, const char *, size_t);
__declspec(dllimport) int     __cdecl _strnicmp(const char *, const char *, size_t);
__declspec(dllimport) char *  __cdecl strncpy(char *, const char *, size_t);
__declspec(dllimport) char *  __cdecl _strnset(char *, int, size_t);
__declspec(dllimport) char *  __cdecl strpbrk(const char *, const char *);
__declspec(dllimport) char *  __cdecl strrchr(const char *, int);
__declspec(dllimport) char *  __cdecl _strrev(char *);
__declspec(dllimport) size_t  __cdecl strspn(const char *, const char *);
__declspec(dllimport) char *  __cdecl strstr(const char *, const char *);
__declspec(dllimport) char *  __cdecl strtok(char *, const char *);
__declspec(dllimport) char *  __cdecl _strupr(char *);
__declspec(dllimport) size_t  __cdecl strxfrm (char *, const char *, size_t);









#line 175 "C:\\MSDEV\\INCLUDE\\string.h"





















__declspec(dllimport) void * __cdecl memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) int __cdecl memicmp(const void *, const void *, unsigned int);
__declspec(dllimport) int __cdecl strcmpi(const char *, const char *);
__declspec(dllimport) int __cdecl stricmp(const char *, const char *);
__declspec(dllimport) char * __cdecl strdup(const char *);
__declspec(dllimport) char * __cdecl strlwr(char *);
__declspec(dllimport) int __cdecl strnicmp(const char *, const char *, size_t);
__declspec(dllimport) char * __cdecl strnset(char *, int, size_t);
__declspec(dllimport) char * __cdecl strrev(char *);
        char * __cdecl strset(char *, int);
__declspec(dllimport) char * __cdecl strupr(char *);

#line 209 "C:\\MSDEV\\INCLUDE\\string.h"

#line 211 "C:\\MSDEV\\INCLUDE\\string.h"







__declspec(dllimport) wchar_t * __cdecl wcscat(wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcschr(const wchar_t *, wchar_t);
__declspec(dllimport) int __cdecl wcscmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcscpy(wchar_t *, const wchar_t *);
__declspec(dllimport) size_t __cdecl wcscspn(const wchar_t *, const wchar_t *);
__declspec(dllimport) size_t __cdecl wcslen(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsncat(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl wcsncmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsncpy(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcspbrk(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsrchr(const wchar_t *, wchar_t);
__declspec(dllimport) size_t __cdecl wcsspn(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsstr(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcstok(wchar_t *, const wchar_t *);

__declspec(dllimport) wchar_t * __cdecl _wcsdup(const wchar_t *);
__declspec(dllimport) int __cdecl _wcsicmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsnicmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl _wcsnset(wchar_t *, wchar_t, size_t);
__declspec(dllimport) wchar_t * __cdecl _wcsrev(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wcsset(wchar_t *, wchar_t);

__declspec(dllimport) wchar_t * __cdecl _wcslwr(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wcsupr(wchar_t *);
__declspec(dllimport) size_t __cdecl wcsxfrm(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl wcscoll(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsicoll(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsncoll(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl _wcsnicoll(const wchar_t *, const wchar_t *, size_t);






















__declspec(dllimport) wchar_t * __cdecl wcsdup(const wchar_t *);
__declspec(dllimport) int __cdecl wcsicmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl wcsnicmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsnset(wchar_t *, wchar_t, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsrev(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsset(wchar_t *, wchar_t);
__declspec(dllimport) wchar_t * __cdecl wcslwr(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsupr(wchar_t *);
__declspec(dllimport) int __cdecl wcsicoll(const wchar_t *, const wchar_t *);

#line 280 "C:\\MSDEV\\INCLUDE\\string.h"

#line 282 "C:\\MSDEV\\INCLUDE\\string.h"


#line 285 "C:\\MSDEV\\INCLUDE\\string.h"

#line 287 "C:\\MSDEV\\INCLUDE\\string.h"


}
#line 291 "C:\\MSDEV\\INCLUDE\\string.h"

#line 293 "C:\\MSDEV\\INCLUDE\\string.h"
#line 4448 "C:\\MSDEV\\INCLUDE\\winnt.h"






















































#line 4503 "C:\\MSDEV\\INCLUDE\\winnt.h"

#line 4505 "C:\\MSDEV\\INCLUDE\\winnt.h"




























































#line 4566 "C:\\MSDEV\\INCLUDE\\winnt.h"

typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;




typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    DWORD Reserved;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;











































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;
























































                                                    


                                                    


                                                    


                                                    
                                                    


















































                                            




























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;









typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;





















































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;



}
#line 5116 "C:\\MSDEV\\INCLUDE\\winnt.h"

#line 5118 "C:\\MSDEV\\INCLUDE\\winnt.h"

#line 146 "C:\\MSDEV\\INCLUDE\\windef.h"
#line 147 "C:\\MSDEV\\INCLUDE\\windef.h"


typedef UINT WPARAM;
typedef LONG LPARAM;
typedef LONG LRESULT;





#line 158 "C:\\MSDEV\\INCLUDE\\windef.h"



#line 162 "C:\\MSDEV\\INCLUDE\\windef.h"

#line 164 "C:\\MSDEV\\INCLUDE\\windef.h"










struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;
#line 177 "C:\\MSDEV\\INCLUDE\\windef.h"

typedef WORD                ATOM;

typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;
typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();


typedef void * HGDIOBJ;


#line 195 "C:\\MSDEV\\INCLUDE\\windef.h"

struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;

struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 202 "C:\\MSDEV\\INCLUDE\\windef.h"
struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;          
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;
struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      
struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__ *HKL;

typedef int HFILE;      
typedef HICON HCURSOR;      

typedef DWORD   COLORREF;
typedef DWORD   *LPCOLORREF;



typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{
    SHORT   x;
    SHORT   y;
} POINTS, *PPOINTS, *LPPOINTS;

































}
#line 310 "C:\\MSDEV\\INCLUDE\\windef.h"

#line 312 "C:\\MSDEV\\INCLUDE\\windef.h"
#line 123 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winbase.h"



















#line 21 "C:\\MSDEV\\INCLUDE\\winbase.h"





#line 27 "C:\\MSDEV\\INCLUDE\\winbase.h"


extern "C" {
#line 31 "C:\\MSDEV\\INCLUDE\\winbase.h"







































































































#line 135 "C:\\MSDEV\\INCLUDE\\winbase.h"


























































typedef struct _OVERLAPPED {
    DWORD   Internal;
    DWORD   InternalHigh;
    DWORD   Offset;
    DWORD   OffsetHigh;
    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;





typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;

typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;






#line 249 "C:\\MSDEV\\INCLUDE\\winbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;


typedef PLDT_ENTRY LPLDT_ENTRY;


#line 263 "C:\\MSDEV\\INCLUDE\\winbase.h"









































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;

typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORD dwTotalPhys;
    DWORD dwAvailPhys;
    DWORD dwTotalPageFile;
    DWORD dwAvailPageFile;
    DWORD dwTotalVirtual;
    DWORD dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;














































































typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;


typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 696 "C:\\MSDEV\\INCLUDE\\winbase.h"

























































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;






















































#line 976 "C:\\MSDEV\\INCLUDE\\winbase.h"



__declspec(dllimport)
LONG
__stdcall
InterlockedIncrement(
    LPLONG lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedDecrement(
    LPLONG lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchange(
    LPLONG Target,
    LONG Value
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchangeAdd(
    LPLONG Addend,
    LONG Value
    );

__declspec(dllimport)
PVOID
__stdcall
InterlockedCompareExchange (
    PVOID *Destination,
    PVOID Exchange,
    PVOID Comperand
    );

#line 1019 "C:\\MSDEV\\INCLUDE\\winbase.h"

#line 1021 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeResource(
        HGLOBAL hResData
        );

__declspec(dllimport)
LPVOID
__stdcall
LockResource(
        HGLOBAL hResData
        );






int
__stdcall
WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd
    );

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
    HMODULE hLibModule
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryAndExitThread(
    HMODULE hLibModule,
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
    HMODULE hLibModule
    );

__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
    HMODULE hModule,
    LPCSTR lpProcName
    );

__declspec(dllimport)
DWORD
__stdcall
GetVersion( void );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalAlloc(
    UINT uFlags,
    DWORD dwBytes
    );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalReAlloc(
    HGLOBAL hMem,
    DWORD dwBytes,
    UINT uFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GlobalSize(
    HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags(
    HGLOBAL hMem
    );


__declspec(dllimport)
LPVOID
__stdcall
GlobalLock(
    HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalHandle(
    LPCVOID pMem
    );


__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
    HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalFree(
    HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalCompact(
    DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
    HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
    HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
    HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
    HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalAlloc(
    UINT uFlags,
    UINT uBytes
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalReAlloc(
    HLOCAL hMem,
    UINT uBytes,
    UINT uFlags
    );

__declspec(dllimport)
LPVOID
__stdcall
LocalLock(
    HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalHandle(
    LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalSize(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
    HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalShrink(
    HLOCAL hMem,
    UINT cbNewSize
    );

__declspec(dllimport)
UINT
__stdcall
LocalCompact(
    UINT uMinFree
    );

__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    DWORD dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAlloc(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtect(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

__declspec(dllimport)
DWORD
__stdcall
VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAllocEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtectEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

__declspec(dllimport)
DWORD
__stdcall
VirtualQueryEx(
    HANDLE hProcess,
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );

__declspec(dllimport)
HANDLE
__stdcall
HeapCreate(
    DWORD flOptions,
    DWORD dwInitialSize,
    DWORD dwMaximumSize
    );

__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
    HANDLE hHeap
    );


__declspec(dllimport)
LPVOID
__stdcall
HeapAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    DWORD dwBytes
    );

__declspec(dllimport)
LPVOID
__stdcall
HeapReAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem,
    DWORD dwBytes
    );

__declspec(dllimport)
BOOL
__stdcall
HeapFree(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem
    );

__declspec(dllimport)
DWORD
__stdcall
HeapSize(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

__declspec(dllimport)
UINT
__stdcall
HeapCompact(
    HANDLE hHeap,
    DWORD dwFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap( void );

__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
    DWORD NumberOfHeaps,
    PHANDLE ProcessHeaps
    );

typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







__declspec(dllimport)
BOOL
__stdcall
HeapLock(
    HANDLE hHeap
    );

__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
    HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
    HANDLE hHeap,
    LPPROCESS_HEAP_ENTRY lpEntry
    );










__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
    LPCSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
    LPCWSTR lpApplicationName,
    LPDWORD lpBinaryType
    );




#line 1515 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameA(
    LPCSTR lpszLongPath,
    LPSTR  lpszShortPath,
    DWORD    cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameW(
    LPCWSTR lpszLongPath,
    LPWSTR  lpszShortPath,
    DWORD    cchBuffer
    );




#line 1537 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
    HANDLE hProcess,
    LPDWORD lpProcessAffinityMask,
    LPDWORD lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
    HANDLE hProcess,
    DWORD dwProcessAffinityMask
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
    HANDLE hProcess,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
    HANDLE hProcess,
    LPDWORD lpMinimumWorkingSetSize,
    LPDWORD lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
    HANDLE hProcess,
    DWORD dwMinimumWorkingSetSize,
    DWORD dwMaximumWorkingSetSize
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwProcessId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );

__declspec(dllimport)
void
__stdcall
ExitProcess(
    UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
    HANDLE hProcess,
    UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode
    );


__declspec(dllimport)
void
__stdcall
FatalExit(
    int ExitCode
    );

__declspec(dllimport)
LPSTR
__stdcall
GetEnvironmentStrings(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetEnvironmentStringsW(
    void
    );





#line 1658 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
    LPSTR
    );
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
    LPWSTR
    );




#line 1676 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
void
__stdcall
RaiseException(
    DWORD dwExceptionCode,
    DWORD dwExceptionFlags,
    DWORD nNumberOfArguments,
    const DWORD *lpArguments
    );

__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );






































#line 1744 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    DWORD dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateRemoteThread(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    DWORD dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
SetThreadAffinityMask(
    HANDLE hThread,
    DWORD dwThreadAffinityMask
    );









#line 1801 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
    HANDLE hProcess,
    BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
    HANDLE hProcess,
    PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
    HANDLE hThread,
    int nPriority
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
    HANDLE hThread,
    BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
    HANDLE hThread,
    PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
int
__stdcall
GetThreadPriority(
    HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );

__declspec(dllimport)
void
__stdcall
ExitThread(
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
    HANDLE hThread,
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
DWORD
__stdcall
GetLastError(
    void
    );

__declspec(dllimport)
void
__stdcall
SetLastError(
    DWORD dwErrCode
    );



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    BOOL bWait
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateIoCompletionPort(
    HANDLE FileHandle,
    HANDLE ExistingCompletionPort,
    DWORD CompletionKey,
    DWORD NumberOfConcurrentThreads
    );

__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberOfBytesTransferred,
    LPDWORD lpCompletionKey,
    LPOVERLAPPED *lpOverlapped,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    DWORD dwNumberOfBytesTransferred,
    DWORD dwCompletionKey,
    LPOVERLAPPED lpOverlapped
    );






__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
    UINT uMode
    );

__declspec(dllimport)
BOOL
__stdcall
ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
    HANDLE hThread,
    const CONTEXT *lpContext
    );
#line 2001 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
    HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
    HANDLE hThread
    );

















#line 2033 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
    DWORD dwProcessId,
    DWORD dwThreadId,
    DWORD dwContinueStatus
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
    DWORD dwProcessId
    );

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );








#line 2094 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
    HANDLE hSemaphore,
    LONG lReleaseCount,
    LPLONG lpPreviousCount
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
    HANDLE hMutex
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
    HANDLE hHandle,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
void
__stdcall
Sleep(
    DWORD dwMilliseconds
    );

__declspec(dllimport)
HGLOBAL
__stdcall
LoadResource(
    HMODULE hModule,
    HRSRC hResInfo
    );

__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo
    );


__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
    ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
    DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
    ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
    UINT uNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
LockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
    HANDLE hFile,
    DWORD dwFlags,
    DWORD dwReserved,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh,
    LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
    HANDLE hFile,
    DWORD dwReserved,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh,
    LPOVERLAPPED lpOverlapped
    );

typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileType(
    HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
    DWORD nStdHandle
    );

__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
    DWORD nStdHandle,
    HANDLE hHandle
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
    HANDLE hDevice,
    DWORD dwIoControlCode,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
    HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
    HANDLE hFile,
    LONG lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
FindClose(
    HANDLE hFindFile
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
    HANDLE hFile,
    LPFILETIME lpCreationTime,
    LPFILETIME lpLastAccessTime,
    LPFILETIME lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
    HANDLE hFile,
    const FILETIME *lpCreationTime,
    const FILETIME *lpLastAccessTime,
    const FILETIME *lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
    HANDLE hObject
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
    HANDLE hSourceProcessHandle,
    HANDLE hSourceHandle,
    HANDLE hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwOptions
    );

__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
    HANDLE hObject,
    LPDWORD lpdwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
    HANDLE hObject,
    DWORD dwMask,
    DWORD dwFlags
    );






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
    LPCSTR lpModuleName,
    LPVOID lpParameterBlock
    );

__declspec(dllimport)
UINT
__stdcall
WinExec(
    LPCSTR lpCmdLine,
    UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
    HANDLE hFile,
    DWORD dwInQueue,
    DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
    HANDLE hFile,
    DWORD dwFunc
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
    HANDLE hFile,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
    HANDLE hFile,
    DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
    HANDLE hFile,
    char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionMethod,
    DWORD dwPartition,
    DWORD dwOffsetLow,
    DWORD dwOffsetHigh,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionType,
    LPDWORD lpdwPartition,
    LPDWORD lpdwOffsetLow,
    LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
    HANDLE hDevice,
    DWORD dwOperation,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
    HANDLE hDevice,
    DWORD dwEraseType,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
    HANDLE hDevice,
    DWORD dwPartitionMethod,
    DWORD dwCount,
    DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
    HANDLE hDevice,
    DWORD dwTapemarkType,
    DWORD dwTapemarkCount,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
    HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPDWORD lpdwSize,
    LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPVOID lpTapeInformation
    );




__declspec(dllimport)
BOOL
__stdcall
Beep(
    DWORD dwFreq,
    DWORD dwDuration
    );

__declspec(dllimport)
void
__stdcall
OpenSound(
    void
    );

__declspec(dllimport)
void
__stdcall
CloseSound(
    void
    );

__declspec(dllimport)
void
__stdcall
StartSound(
    void
    );

__declspec(dllimport)
void
__stdcall
StopSound(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
WaitSoundState(
    DWORD nState
    );

__declspec(dllimport)
DWORD
__stdcall
SyncAllVoices(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
CountVoiceNotes(
    DWORD nVoice
    );

__declspec(dllimport)
LPDWORD
__stdcall
GetThresholdEvent(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetThresholdStatus(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
SetSoundNoise(
    DWORD nSource,
    DWORD nDuration
    );

__declspec(dllimport)
DWORD
__stdcall
SetVoiceAccent(
    DWORD nVoice,
    DWORD nTempo,
    DWORD nVolume,
    DWORD nMode,
    DWORD nPitch
    );

__declspec(dllimport)
DWORD
__stdcall
SetVoiceEnvelope(
    DWORD nVoice,
    DWORD nShape,
    DWORD nRepeat
    );

__declspec(dllimport)
DWORD
__stdcall
SetVoiceNote(
    DWORD nVoice,
    DWORD nValue,
    DWORD nLength,
    DWORD nCdots
    );

__declspec(dllimport)
DWORD
__stdcall
SetVoiceQueueSize(
    DWORD nVoice,
    DWORD nBytes
    );

__declspec(dllimport)
DWORD
__stdcall
SetVoiceSound(
    DWORD nVoice,
    DWORD Frequency,
    DWORD nDuration
    );

__declspec(dllimport)
DWORD
__stdcall
SetVoiceThreshold(
    DWORD nVoice,
    DWORD nNotes
    );

__declspec(dllimport)
int
__stdcall
MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator
    );

__declspec(dllimport)
void
__stdcall
GetSystemTime(
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
    const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetLocalTime(
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
    const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
    LPSYSTEMTIME lpUniversalTime,
    LPSYSTEMTIME lpLocalTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );






__declspec(dllimport)
BOOL
__stdcall
SystemTimeToFileTime(
    const SYSTEMTIME *lpSystemTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
    const FILETIME *lpFileTime,
    LPFILETIME lpLocalFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
    const FILETIME *lpLocalFileTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToSystemTime(
    const FILETIME *lpFileTime,
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
    const FILETIME *lpFileTime1,
    const FILETIME *lpFileTime2
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
    const FILETIME *lpFileTime,
    LPWORD lpFatDate,
    LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
    WORD wFatDate,
    WORD wFatTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
    DWORD dwTimeAdjustment,
    BOOL  bTimeAdjustmentDisabled
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    PDWORD lpTimeIncrement,
    PBOOL  lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
DWORD
__stdcall
FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
__declspec(dllimport)
DWORD
__stdcall
FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );




#line 3036 "C:\\MSDEV\\INCLUDE\\winbase.h"
#line 3037 "C:\\MSDEV\\INCLUDE\\winbase.h"










__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
    PHANDLE hReadPipe,
    PHANDLE hWritePipe,
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    DWORD nSize
    );

__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
    HANDLE hNamedPipe,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
    HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    LPDWORD lpMode,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
    HANDLE hNamedPipe,
    LPDWORD lpFlags,
    LPDWORD lpOutBufferSize,
    LPDWORD lpInBufferSize,
    LPDWORD lpMaxInstances
    );

__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpBuffer,
    DWORD nBufferSize,
    LPDWORD lpBytesRead,
    LPDWORD lpTotalBytesAvail,
    LPDWORD lpBytesLeftThisMessage
    );

__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
    LPCSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
    LPCWSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 3141 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
    HANDLE hMailslot,
    LPDWORD lpMaxMessageSize,
    LPDWORD lpNextSize,
    LPDWORD lpMessageCount,
    LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
    HANDLE hMailslot,
    DWORD lReadTimeout
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFile(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap
    );

__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
    LPCVOID lpBaseAddress,
    DWORD dwNumberOfBytesToFlush
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
    LPCVOID lpBaseAddress
    );






__declspec(dllimport)
int
__stdcall
lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3211 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3231 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpynA(
    LPSTR lpString1,
    LPCSTR lpString2,
    int iMaxLength
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpynW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
    int iMaxLength
    );




#line 3253 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3273 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3293 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
    LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
    LPCWSTR lpString
    );




#line 3311 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HFILE
__stdcall
OpenFile(
    LPCSTR lpFileName,
    LPOFSTRUCT lpReOpenBuff,
    UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
    LPCSTR lpPathName,
    int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
    LPCSTR lpPathName,
    int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
    HFILE hFile,
    LPVOID lpBuffer,
    UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
    HFILE hFile,
    LPCSTR lpBuffer,
    UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
    HFILE hFile,
    LPVOID lpBuffer,
    long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
    HFILE hFile,
    LPCSTR lpBuffer,
    long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
    HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
    HFILE hFile,
    LONG lOffset,
    int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
    const LPVOID lpBuffer,
    int cb,
    LPINT lpi
    );

__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );



__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
    DWORD dwTlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
    DWORD dwTlsIndex,
    LPVOID lpTlsValue
    );

__declspec(dllimport)
BOOL
__stdcall
TlsFree(
    DWORD dwTlsIndex
    );

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
DWORD
__stdcall
SleepEx(
    DWORD dwMilliseconds,
    BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
    HANDLE hHandle,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );











#line 3476 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadFileEx(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
    HANDLE hFile,
    DWORD  dwLowBytesToSeek,
    DWORD  dwHighBytesToSeek,
    LPDWORD lpdwLowByteSeeked,
    LPDWORD lpdwHighByteSeeked,
    LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;





































#line 3585 "C:\\MSDEV\\INCLUDE\\winbase.h"

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 3633 "C:\\MSDEV\\INCLUDE\\winbase.h"



typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ 260 ];
    CHAR   cAlternateFileName[ 14 ];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[ 260 ];
    WCHAR  cAlternateFileName[ 14 ];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 3669 "C:\\MSDEV\\INCLUDE\\winbase.h"

typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
HANDLE
__stdcall
CreateMutexA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMutexW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCWSTR lpName
    );




#line 3700 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenMutexA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenMutexW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 3722 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCWSTR lpName
    );




#line 3746 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenEventA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 3768 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName
    );




#line 3792 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 3814 "C:\\MSDEV\\INCLUDE\\winbase.h"








































































#line 3887 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName
    );




#line 3915 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 3937 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );




#line 3957 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryA(
    LPCSTR lpLibFileName
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryW(
    LPCWSTR lpLibFileName
    );




#line 3975 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );




#line 3997 "C:\\MSDEV\\INCLUDE\\winbase.h"







__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    DWORD nSize
    );




#line 4025 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleA(
    LPCSTR lpModuleName
    );
__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleW(
    LPCWSTR lpModuleName
    );




#line 4043 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );




#line 4079 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
    DWORD dwLevel,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    LPDWORD lpdwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
    DWORD ProcessId
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
    UINT uAction,
    LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
    UINT uAction,
    LPCWSTR lpMessageText
    );




#line 4122 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
    LPSTARTUPINFOA lpStartupInfo
    );
__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
    LPSTARTUPINFOW lpStartupInfo
    );




#line 4140 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );
__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );




#line 4158 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableA(
    LPCSTR lpName,
    LPSTR lpBuffer,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableW(
    LPCWSTR lpName,
    LPWSTR lpBuffer,
    DWORD nSize
    );




#line 4180 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpValue
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpValue
    );




#line 4200 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsA(
    LPCSTR lpSrc,
    LPSTR lpDst,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsW(
    LPCWSTR lpSrc,
    LPWSTR lpDst,
    DWORD nSize
    );




#line 4222 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
    LPCSTR lpOutputString
    );
__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
    LPCWSTR lpOutputString
    );




#line 4240 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HRSRC
__stdcall
FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType
    );




#line 4262 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HRSRC
__stdcall
FindResourceExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD    wLanguage
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD    wLanguage
    );




#line 4286 "C:\\MSDEV\\INCLUDE\\winbase.h"


typedef BOOL (__stdcall* ENUMRESTYPEPROC)(HMODULE hModule, LPTSTR lpType,
        LONG lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROC)(HMODULE hModule, LPCTSTR lpType,
        LPTSTR lpName, LONG lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROC)(HMODULE hModule, LPCTSTR lpType,
        LPCTSTR lpName, WORD  wLanguage, LONG lParam);




#line 4299 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
    HMODULE hModule,
    ENUMRESTYPEPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
    HMODULE hModule,
    ENUMRESTYPEPROC lpEnumFunc,
    LONG lParam
    );




#line 4321 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROC lpEnumFunc,
    LONG lParam
    );




#line 4346 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROC lpEnumFunc,
    LONG lParam
    );




#line 4372 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
    LPCSTR pFileName,
    BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
    LPCWSTR pFileName,
    BOOL bDeleteExistingResources
    );




#line 4392 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
    HANDLE      hUpdate,
    LPCSTR     lpType,
    LPCSTR     lpName,
    WORD        wLanguage,
    LPVOID      lpData,
    DWORD       cbData
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
    HANDLE      hUpdate,
    LPCWSTR     lpType,
    LPCWSTR     lpName,
    WORD        wLanguage,
    LPVOID      lpData,
    DWORD       cbData
    );




#line 4420 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
    HANDLE      hUpdate,
    BOOL        fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
    HANDLE      hUpdate,
    BOOL        fDiscard
    );




#line 4440 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
    LPCWSTR lpString
    );




#line 4458 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
    LPCWSTR lpString
    );




#line 4476 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );




#line 4498 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
    LPCWSTR lpString
    );




#line 4516 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
    LPCWSTR lpString
    );




#line 4534 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );




#line 4556 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault
    );




#line 4578 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize
    );




#line 4604 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString
    );




#line 4626 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize
    );




#line 4648 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString
    );




#line 4668 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault,
    LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault,
    LPCWSTR lpFileName
    );




#line 4692 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );




#line 4720 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );




#line 4744 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );




#line 4768 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );




#line 4790 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
    LPSTR lpszReturnBuffer,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
    LPWSTR lpszReturnBuffer,
    DWORD nSize,
    LPCWSTR lpFileName
    );




#line 4813 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCWSTR szFile
    );




#line 4839 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCWSTR szFile
    );




#line 4865 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
    LPCSTR lpRootPathName
    );
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
    LPCWSTR lpRootPathName
    );




#line 4884 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );




#line 4904 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );




#line 4924 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    UINT uUnique,
    LPSTR lpTempFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    UINT uUnique,
    LPWSTR lpTempFileName
    );




#line 4948 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );




#line 4968 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
    LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
    LPCWSTR lpPathName
    );




#line 4986 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );




#line 5006 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
    LPCSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
    LPCWSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );




#line 5032 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
    LPCSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
    LPCWSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );




#line 5056 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5076 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5098 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
    LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
    LPCWSTR lpPathName
    );




#line 5116 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );




#line 5140 "C:\\MSDEV\\INCLUDE\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
    DWORD dwFlags,
    LPCSTR lpDeviceName,
    LPCSTR lpTargetPath
    );
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
    DWORD dwFlags,
    LPCWSTR lpDeviceName,
    LPCWSTR lpTargetPath
    );




#line 5168 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
    LPCSTR lpDeviceName,
    LPSTR lpTargetPath,
    DWORD ucchMax
    );
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
    LPCWSTR lpDeviceName,
    LPWSTR lpTargetPath,
    DWORD ucchMax
    );




#line 5190 "C:\\MSDEV\\INCLUDE\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );




#line 5222 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes
    );




#line 5242 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
    LPCWSTR lpFileName
    );




#line 5260 "C:\\MSDEV\\INCLUDE\\winbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );




#line 5287 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );




#line 5307 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
    LPCWSTR lpFileName
    );




#line 5325 "C:\\MSDEV\\INCLUDE\\winbase.h"











































#line 5369 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData
    );




#line 5389 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData
    );




#line 5409 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
    LPCSTR lpPath,
    LPCSTR lpFileName,
    LPCSTR lpExtension,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
    LPCWSTR lpPath,
    LPCWSTR lpFileName,
    LPCWSTR lpExtension,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );




#line 5437 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    BOOL bFailIfExists
    );




#line 5459 "C:\\MSDEV\\INCLUDE\\winbase.h"











































#line 5503 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName
    );




#line 5523 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    DWORD dwFlags
    );




#line 5545 "C:\\MSDEV\\INCLUDE\\winbase.h"






__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
    LPCSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
    LPCWSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5582 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPSTR lpUserName,
    DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPWSTR lpUserName,
    DWORD nMaxUserNameSize
    );




#line 5612 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
    LPCSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
    LPCWSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );




#line 5642 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
    LPCSTR lpNamedPipeName,
    DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
    LPCWSTR lpNamedPipeName,
    DWORD nTimeOut
    );




#line 5662 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
    LPCSTR lpRootPathName,
    LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
    LPCWSTR lpRootPathName,
    LPCWSTR lpVolumeName
    );




#line 5682 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
    LPCSTR lpRootPathName,
    LPSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
    LPCWSTR lpRootPathName,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );




#line 5729 "C:\\MSDEV\\INCLUDE\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );




#line 5753 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );




#line 5773 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
    HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
    HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
    HANDLE  hEventLog,
    HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
    HANDLE hEventLog,
    PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
    HANDLE hEventLog,
    PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );




#line 5831 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );




#line 5851 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpFileName
    );




#line 5871 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
     HANDLE     hEventLog,
     DWORD      dwReadFlags,
     DWORD      dwRecordOffset,
     LPVOID     lpBuffer,
     DWORD      nNumberOfBytesToRead,
     DWORD      *pnBytesRead,
     DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
     HANDLE     hEventLog,
     DWORD      dwReadFlags,
     DWORD      dwRecordOffset,
     LPVOID     lpBuffer,
     DWORD      nNumberOfBytesToRead,
     DWORD      *pnBytesRead,
     DWORD      *pnMinNumberOfBytesNeeded
    );




#line 5901 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
     HANDLE     hEventLog,
     WORD       wType,
     WORD       wCategory,
     DWORD      dwEventID,
     PSID       lpUserSid,
     WORD       wNumStrings,
     DWORD      dwDataSize,
     LPCSTR   *lpStrings,
     LPVOID     lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
     HANDLE     hEventLog,
     WORD       wType,
     WORD       wCategory,
     DWORD      dwEventID,
     PSID       lpUserSid,
     WORD       wNumStrings,
     DWORD      dwDataSize,
     LPCWSTR   *lpStrings,
     LPVOID     lpRawData
    );




#line 5935 "C:\\MSDEV\\INCLUDE\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
    HANDLE ExistingTokenHandle,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    PHANDLE DuplicateTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateNamedPipeClient(
    HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
RevertToSelf (
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadToken (
    PHANDLE Thread,
    HANDLE Token
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheck (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken (
    HANDLE ProcessHandle,
    DWORD DesiredAccess,
    PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken (
    HANDLE ThreadHandle,
    DWORD DesiredAccess,
    BOOL OpenAsSelf,
    PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges (
    HANDLE TokenHandle,
    BOOL DisableAllPrivileges,
    PTOKEN_PRIVILEGES NewState,
    DWORD BufferLength,
    PTOKEN_PRIVILEGES PreviousState,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups (
    HANDLE TokenHandle,
    BOOL ResetToDefault,
    PTOKEN_GROUPS NewState,
    DWORD BufferLength,
    PTOKEN_GROUPS PreviousState,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck (
    HANDLE ClientToken,
    PPRIVILEGE_SET RequiredPrivileges,
    LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );




#line 6124 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );




#line 6165 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );




#line 6194 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );




#line 6217 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );




#line 6240 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
    LPCSTR SubsystemName,
    LPCSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW (
    LPCWSTR SubsystemName,
    LPCWSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );




#line 6267 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
IsValidSid (
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired (
    UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid (
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount,
    DWORD nSubAuthority0,
    DWORD nSubAuthority1,
    DWORD nSubAuthority2,
    DWORD nSubAuthority3,
    DWORD nSubAuthority4,
    DWORD nSubAuthority5,
    DWORD nSubAuthority6,
    DWORD nSubAuthority7,
    PSID *pSid
    );

__declspec(dllimport)
PVOID
__stdcall
FreeSid(
    PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeSid (
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority (
    PSID pSid
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority (
    PSID pSid,
    DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount (
    PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid (
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid (
    DWORD nDestinationSidLength,
    PSID pDestinationSid,
    PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask (
    PDWORD AccessMask,
    PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl (
    PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl (
    PACL pAcl,
    DWORD nAclLength,
    DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwStartingAceIndex,
    LPVOID pAceList,
    DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
DeleteAce (
    PACL pAcl,
    DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce (
    PACL pAcl,
    DWORD dwAceIndex,
    LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce (
    PACL pAcl,
    LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bDaclPresent,
    PACL pDacl,
    BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbDaclPresent,
    PACL *pDacl,
    LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bSaclPresent,
    PACL pSacl,
    BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbSaclPresent,
    PACL *pSacl,
    LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pOwner,
    BOOL bOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pOwner,
    LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pGroup,
    BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pGroup,
    LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOL IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
GetPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ObjectDescriptor,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ResultantDescriptor,
    DWORD DescriptorLength,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
MakeSelfRelativeSD (
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    PACL pDacl,
    LPDWORD lpdwDaclSize,
    PACL pSacl,
    LPDWORD lpdwSaclSize,
    PSID pOwner,
    LPDWORD lpdwOwnerSize,
    PSID pPrimaryGroup,
    LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




#line 6735 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );




#line 6762 "C:\\MSDEV\\INCLUDE\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );



__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
    LPCSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
    LPCWSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );




#line 6796 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
    HANDLE hChangeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
    HANDLE hChangeHandle
    );















#line 6826 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
    LPVOID lpAddress,
    DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
    LPVOID lpAddress,
    DWORD dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFileEx(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap,
    LPVOID lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
    HANDLE hProcess,
    DWORD dwPriorityClass
    );

__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
    HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
    const void *lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
    LPVOID lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
    const void *lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
    LPVOID lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
    FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
    LPCSTR lpsz,
    UINT ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
    LPCWSTR lpsz,
    UINT ucchMax
    );




#line 6928 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidA(
    LPCSTR lpSystemName,
    PSID Sid,
    LPSTR Name,
    LPDWORD cbName,
    LPSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidW(
    LPCWSTR lpSystemName,
    PSID Sid,
    LPWSTR Name,
    LPDWORD cbName,
    LPWSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );




#line 6958 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameA(
    LPCSTR lpSystemName,
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );




#line 6988 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    PLUID   lpLuid
    );




#line 7010 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameA(
    LPCSTR lpSystemName,
    PLUID   lpLuid,
    LPSTR lpName,
    LPDWORD cbName
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameW(
    LPCWSTR lpSystemName,
    PLUID   lpLuid,
    LPWSTR lpName,
    LPDWORD cbName
    );




#line 7034 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    LPSTR lpDisplayName,
    LPDWORD cbDisplayName,
    LPDWORD lpLanguageId
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    LPWSTR lpDisplayName,
    LPDWORD cbDisplayName,
    LPDWORD lpLanguageId
    );




#line 7060 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
    PLUID Luid
    );

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
    LPCSTR lpDef,
    LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
    LPCWSTR lpDef,
    LPDCB lpDCB
    );




#line 7087 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
    LPCSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 7109 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
    LPCSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
    LPCWSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );




#line 7131 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );




#line 7153 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );




#line 7175 "C:\\MSDEV\\INCLUDE\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetComputerNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetComputerNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );




#line 7197 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
    LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
    LPCWSTR lpComputerName
    );




#line 7215 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );




#line 7235 "C:\\MSDEV\\INCLUDE\\winbase.h"













#line 7249 "C:\\MSDEV\\INCLUDE\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
    LPSTR lpszUsername,
    LPSTR lpszDomain,
    LPSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
    LPWSTR lpszUsername,
    LPWSTR lpszDomain,
    LPWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );




#line 7279 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
    HANDLE  hToken
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
    HANDLE hToken,
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW (
    HANDLE hToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );




#line 7324 "C:\\MSDEV\\INCLUDE\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
    HANDLE hExistingToken,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    TOKEN_TYPE TokenType,
    PHANDLE phNewToken);




















































#line 7388 "C:\\MSDEV\\INCLUDE\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    );

__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    );

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];       
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];       
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 7432 "C:\\MSDEV\\INCLUDE\\winbase.h"










__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation
    );




#line 7459 "C:\\MSDEV\\INCLUDE\\winbase.h"






#line 1 "C:\\MSDEV\\INCLUDE\\winerror.h"





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6527 "C:\\MSDEV\\INCLUDE\\winerror.h"


























































































































































































#line 6714 "C:\\MSDEV\\INCLUDE\\winerror.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 
























































































































































































































































































































































































































































































































#line 9905 "C:\\MSDEV\\INCLUDE\\winerror.h"
#line 7466 "C:\\MSDEV\\INCLUDE\\winbase.h"





























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

BOOL
__stdcall
GetSystemPowerStatus(
    LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

BOOL
__stdcall
SetSystemPowerState(
    BOOL fSuspend,
    BOOL fForce
    );

#line 7518 "C:\\MSDEV\\INCLUDE\\winbase.h"














typedef struct _WIN_CERTIFICATE {
    DWORD       dwLength;
    WORD        wRevision;
    WORD        wCertificateType;   
    BYTE        bCertificate[1];
} WIN_CERTIFICATE, *LPWIN_CERTIFICATE;






















__declspec(dllimport)
BOOL
__stdcall
WinSubmitCertificate(
    LPWIN_CERTIFICATE lpCertificate
    );









__declspec(dllimport)
LONG
__stdcall
WinVerifyTrust(
    HWND    hwnd,
    GUID *  ActionID,
    LPVOID  ActionData
    );


__declspec(dllimport)
BOOL
__stdcall
WinLoadTrustProvider(
    GUID * ActionID
    );












typedef LPVOID WIN_TRUST_SUBJECT;





typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {

    HANDLE            hClientToken;
    GUID *            SubjectType;
    WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT, *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT ;


typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {

    GUID *            SubjectType;
    WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_SUBJECT_ONLY, *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY;




















             








































typedef struct _WIN_TRUST_SUBJECT_FILE {

    HANDLE  hFile;
    LPCWSTR lpPath;

} WIN_TRUST_SUBJECT_FILE, *LPWIN_TRUST_SUBJECT_FILE;









































































typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA {

    HANDLE            hClientToken;
    LPWIN_CERTIFICATE lpCertificate;

} WIN_SPUB_TRUSTED_PUBLISHER_DATA, *LPWIN_SPUB_TRUSTED_PUBLISHER_DATA;



}
#line 7775 "C:\\MSDEV\\INCLUDE\\winbase.h"



#line 7779 "C:\\MSDEV\\INCLUDE\\winbase.h"
#line 124 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\wingdi.h"




















#line 22 "C:\\MSDEV\\INCLUDE\\wingdi.h"









#line 32 "C:\\MSDEV\\INCLUDE\\wingdi.h"


extern "C" {
#line 36 "C:\\MSDEV\\INCLUDE\\wingdi.h"
















































#line 85 "C:\\MSDEV\\INCLUDE\\wingdi.h"

































#line 119 "C:\\MSDEV\\INCLUDE\\wingdi.h"






















#line 142 "C:\\MSDEV\\INCLUDE\\wingdi.h"














#line 157 "C:\\MSDEV\\INCLUDE\\wingdi.h"




















































































#line 242 "C:\\MSDEV\\INCLUDE\\wingdi.h"

























































































































typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 1 "C:\\MSDEV\\INCLUDE\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#pragma pack(1)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 386 "C:\\MSDEV\\INCLUDE\\wingdi.h"
typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE;
#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 392 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;





typedef LONG   LCSCSTYPE;




typedef LONG    LCSGAMUTMATCH;
















typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;





typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ   *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;






typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 486 "C:\\MSDEV\\INCLUDE\\wingdi.h"

#line 488 "C:\\MSDEV\\INCLUDE\\wingdi.h"



typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;


typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;



typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
#line 539 "C:\\MSDEV\\INCLUDE\\wingdi.h"







typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 1 "C:\\MSDEV\\INCLUDE\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#pragma pack(2)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 557 "C:\\MSDEV\\INCLUDE\\wingdi.h"
typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 565 "C:\\MSDEV\\INCLUDE\\wingdi.h"





typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;





typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;

#line 595 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 596 "C:\\MSDEV\\INCLUDE\\wingdi.h"



typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD  *PMETARECORD;
typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1 "C:\\MSDEV\\INCLUDE\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#pragma pack(2)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 622 "C:\\MSDEV\\INCLUDE\\wingdi.h"
typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 636 "C:\\MSDEV\\INCLUDE\\wingdi.h"


typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     
    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 675 "C:\\MSDEV\\INCLUDE\\wingdi.h"















    typedef BYTE BCHAR;
#line 692 "C:\\MSDEV\\INCLUDE\\wingdi.h"


typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 751 "C:\\MSDEV\\INCLUDE\\wingdi.h"






#line 1 "C:\\MSDEV\\INCLUDE\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#pragma pack(4)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 758 "C:\\MSDEV\\INCLUDE\\wingdi.h"
typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 823 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 824 "C:\\MSDEV\\INCLUDE\\wingdi.h"


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 841 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 842 "C:\\MSDEV\\INCLUDE\\wingdi.h"

#line 844 "C:\\MSDEV\\INCLUDE\\wingdi.h"



typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;


typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    LONG        lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;


typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    LONG        elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;

typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;


typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
    PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 950 "C:\\MSDEV\\INCLUDE\\wingdi.h"




typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 974 "C:\\MSDEV\\INCLUDE\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 997 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 998 "C:\\MSDEV\\INCLUDE\\wingdi.h"


























#line 1025 "C:\\MSDEV\\INCLUDE\\wingdi.h"






#line 1032 "C:\\MSDEV\\INCLUDE\\wingdi.h"







































#line 1072 "C:\\MSDEV\\INCLUDE\\wingdi.h"




                                    

                                    

                                    



































typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1277 "C:\\MSDEV\\INCLUDE\\wingdi.h"
















































































#line 1358 "C:\\MSDEV\\INCLUDE\\wingdi.h"





#line 1364 "C:\\MSDEV\\INCLUDE\\wingdi.h"


































































































                             

                             

                             











































































#line 1543 "C:\\MSDEV\\INCLUDE\\wingdi.h"













































typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    DWORD  dmDisplayFlags;
    DWORD  dmDisplayFrequency;
    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmICCManufacturer;
    DWORD  dmICCModel;
    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    DWORD  dmDisplayFlags;
    DWORD  dmDisplayFrequency;
    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmICCManufacturer;
    DWORD  dmICCModel;
    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 1671 "C:\\MSDEV\\INCLUDE\\wingdi.h"












































































































#line 1780 "C:\\MSDEV\\INCLUDE\\wingdi.h"





#line 1786 "C:\\MSDEV\\INCLUDE\\wingdi.h"












































#line 1831 "C:\\MSDEV\\INCLUDE\\wingdi.h"











































#line 1875 "C:\\MSDEV\\INCLUDE\\wingdi.h"





typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;



typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 1987 "C:\\MSDEV\\INCLUDE\\wingdi.h"

#line 1989 "C:\\MSDEV\\INCLUDE\\wingdi.h"


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 2022 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef struct _FIXED {
    WORD    fract;
    short   value;
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;












#line 2058 "C:\\MSDEV\\INCLUDE\\wingdi.h"






typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;













































typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 2159 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 2160 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;






typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;
































typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 2240 "C:\\MSDEV\\INCLUDE\\wingdi.h"








#line 2249 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 2257 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 2272 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) int __stdcall AddFontResourceA(LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(LPCWSTR);




#line 2280 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall AnimatePalette(HPALETTE, UINT, UINT, const PALETTEENTRY *);
__declspec(dllimport) BOOL  __stdcall Arc(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) BOOL  __stdcall BitBlt(HDC, int, int, int, int, HDC, int, int, DWORD);
__declspec(dllimport) BOOL  __stdcall CancelDC(HDC);
__declspec(dllimport) BOOL  __stdcall Chord(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(HDC);
__declspec(dllimport) int     __stdcall CombineRgn(HRGN, HRGN, HRGN, int);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(HMETAFILE, LPCWSTR);




#line 2296 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateBitmap(int, int, UINT, UINT, const void *);
__declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(const BITMAP *);
__declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(const LOGBRUSH *);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(HDC, int, int);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(HDC, int, int);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(HDC);
__declspec(dllimport) HDC     __stdcall CreateDCA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateDCW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);




#line 2309 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(HDC, const BITMAPINFOHEADER *, DWORD, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(HGLOBAL, UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(const void *, UINT);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(int, int, int, int);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(const RECT *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(const LOGFONTA *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(const LOGFONTW *);




#line 2321 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(int, int, int, int, int, DWORD,
                             DWORD, DWORD, DWORD, DWORD, DWORD,
                             DWORD, DWORD, LPCSTR);
__declspec(dllimport) HFONT   __stdcall CreateFontW(int, int, int, int, int, DWORD,
                             DWORD, DWORD, DWORD, DWORD, DWORD,
                             DWORD, DWORD, LPCWSTR);




#line 2332 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(int, COLORREF);
__declspec(dllimport) HDC     __stdcall CreateICA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateICW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);




#line 2341 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(LPCSTR);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(LPCWSTR);




#line 2348 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HPALETTE __stdcall CreatePalette(const LOGPALETTE *);
__declspec(dllimport) HPEN    __stdcall CreatePen(int, int, COLORREF);
__declspec(dllimport) HPEN    __stdcall CreatePenIndirect(const LOGPEN *);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(const POINT *, const INT *, int, int);
__declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(HBITMAP);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(int, int, int, int);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(const RECT *);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(int, int, int, int, int, int);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(DWORD, LPCSTR, LPCSTR, LPCSTR);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR);




#line 2363 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(COLORREF);

__declspec(dllimport) BOOL __stdcall DeleteDC(HDC);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(HMETAFILE);
__declspec(dllimport) BOOL __stdcall DeleteObject(HGDIOBJ);
__declspec(dllimport) int  __stdcall DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);




































#line 2414 "C:\\MSDEV\\INCLUDE\\wingdi.h"

















#line 2432 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) int  __stdcall DeviceCapabilitiesA(LPCSTR, LPCSTR, WORD,
                                LPSTR, const DEVMODEA *);
__declspec(dllimport) int  __stdcall DeviceCapabilitiesW(LPCWSTR, LPCWSTR, WORD,
                                LPWSTR, const DEVMODEW *);




#line 2442 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(HDC, int, int, LPCSTR);
__declspec(dllimport) BOOL __stdcall Ellipse(HDC, int, int, int, int);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(HDC, LPLOGFONTA,FONTENUMPROCA, LPARAM,DWORD);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(HDC, LPLOGFONTW,FONTENUMPROCW, LPARAM,DWORD);




#line 2454 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 2455 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(HDC, LPCSTR, FONTENUMPROCA, LPARAM);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM);




#line 2463 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(HDC, LPCSTR,  FONTENUMPROCA, LPARAM);
__declspec(dllimport) int  __stdcall EnumFontsW(HDC, LPCWSTR,  FONTENUMPROCW, LPARAM);




#line 2470 "C:\\MSDEV\\INCLUDE\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(HDC, int, GOBJENUMPROC, LPARAM);


#line 2476 "C:\\MSDEV\\INCLUDE\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(HRGN, HRGN);
__declspec(dllimport) int  __stdcall Escape(HDC, int, int, LPCSTR, LPVOID);
__declspec(dllimport) int  __stdcall ExtEscape(HDC, int, int, LPCSTR, int, LPSTR);
__declspec(dllimport) int  __stdcall ExcludeClipRect(HDC, int, int, int, int);
__declspec(dllimport) HRGN __stdcall ExtCreateRegion(const XFORM *, DWORD, const RGNDATA *);
__declspec(dllimport) BOOL  __stdcall ExtFloodFill(HDC, int, int, COLORREF, UINT);
__declspec(dllimport) BOOL   __stdcall FillRgn(HDC, HRGN, HBRUSH);
__declspec(dllimport) BOOL   __stdcall FloodFill(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL   __stdcall FrameRgn(HDC, HRGN, HBRUSH, int, int);
__declspec(dllimport) int   __stdcall GetROP2(HDC);
__declspec(dllimport) BOOL  __stdcall GetAspectRatioFilterEx(HDC, LPSIZE);
__declspec(dllimport) COLORREF __stdcall GetBkColor(HDC);
__declspec(dllimport) int   __stdcall GetBkMode(HDC);
__declspec(dllimport) LONG  __stdcall GetBitmapBits(HBITMAP, LONG, LPVOID);
__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(HBITMAP, LPSIZE);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(HDC, LPRECT, UINT);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(HDC, LPPOINT);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(HDC, UINT, UINT, LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(HDC, UINT, UINT, LPINT);




#line 2504 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(HDC, UINT, UINT, LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(HDC, UINT, UINT, LPINT);




#line 2511 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(HDC, UINT, UINT, PFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(HDC, UINT, UINT, PFLOAT);




#line 2518 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(HDC, UINT, UINT, LPABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(HDC, UINT, UINT, LPABC);




#line 2526 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(HDC, UINT, UINT, LPABCFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(HDC, UINT, UINT, LPABCFLOAT);




#line 2533 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) int   __stdcall GetClipBox(HDC, LPRECT);
__declspec(dllimport) int   __stdcall GetClipRgn(HDC, HRGN);
__declspec(dllimport) int   __stdcall GetMetaRgn(HDC, HRGN);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(HDC, UINT);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(HDC, LPPOINT);
__declspec(dllimport) int   __stdcall GetDeviceCaps(HDC, int);
__declspec(dllimport) int   __stdcall GetDIBits(HDC, HBITMAP, UINT, UINT, LPVOID, LPBITMAPINFO, UINT);
__declspec(dllimport) DWORD __stdcall GetFontData(HDC, DWORD, DWORD, LPVOID, DWORD);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *);




#line 2549 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) int   __stdcall GetGraphicsMode(HDC);
__declspec(dllimport) int   __stdcall GetMapMode(HDC);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(HMETAFILE, UINT, LPVOID);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(LPCSTR);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(LPCWSTR);




#line 2559 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(HDC, COLORREF);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(HPALETTE, COLORREF);
__declspec(dllimport) DWORD __stdcall GetObjectType(HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(HDC, UINT, LPOUTLINETEXTMETRICA);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(HDC, UINT, LPOUTLINETEXTMETRICW);




#line 2572 "C:\\MSDEV\\INCLUDE\\wingdi.h"

#line 2574 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) UINT  __stdcall GetPaletteEntries(HPALETTE, UINT, UINT, LPPALETTEENTRY);
__declspec(dllimport) COLORREF __stdcall GetPixel(HDC, int, int);
__declspec(dllimport) int   __stdcall GetPixelFormat(HDC);
__declspec(dllimport) int   __stdcall GetPolyFillMode(HDC);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(LPRASTERIZER_STATUS, UINT);
__declspec(dllimport) DWORD __stdcall GetRegionData(HRGN, DWORD, LPRGNDATA);
__declspec(dllimport) int   __stdcall GetRgnBox(HRGN, LPRECT);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(int);
__declspec(dllimport) int   __stdcall GetStretchBltMode(HDC);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(HDC);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(HDC);
__declspec(dllimport) UINT  __stdcall GetTextAlign(HDC);
__declspec(dllimport) COLORREF __stdcall GetTextColor(HDC);

__declspec(dllimport) BOOL  __stdcall GetTextExtentPointA(
                    HDC,
                    LPCSTR,
                    int,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointW(
                    HDC,
                    LPCWSTR,
                    int,
                    LPSIZE
                    );




#line 2607 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32A(
                    HDC,
                    LPCSTR,
                    int,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32W(
                    HDC,
                    LPCWSTR,
                    int,
                    LPSIZE
                    );




#line 2625 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointA(
                    HDC,
                    LPCSTR,
                    int,
                    int,
                    LPINT,
                    LPINT,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointW(
                    HDC,
                    LPCWSTR,
                    int,
                    int,
                    LPINT,
                    LPINT,
                    LPSIZE
                    );




#line 2649 "C:\\MSDEV\\INCLUDE\\wingdi.h"


__declspec(dllimport) int __stdcall GetTextCharset(HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD  *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC );
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(HDC, LPCSTR, int, int, LPGCP_RESULTSA, DWORD);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, DWORD);




#line 2662 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 2663 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(HDC, LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(HDC, LPPOINT);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(HDC, LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(HDC, LPPOINT);

__declspec(dllimport) int  __stdcall IntersectClipRect(HDC, int, int, int, int);
__declspec(dllimport) BOOL __stdcall InvertRgn(HDC, HRGN);
__declspec(dllimport) BOOL __stdcall LineDDA(int, int, int, int, LINEDDAPROC, LPARAM);
__declspec(dllimport) BOOL __stdcall LineTo(HDC, int, int);
__declspec(dllimport) BOOL __stdcall MaskBlt(HDC, int, int, int, int,
              HDC, int, int, HBITMAP, int, int, DWORD);
__declspec(dllimport) BOOL __stdcall PlgBlt(HDC, const POINT *, HDC, int, int, int,
                     int, HBITMAP, int, int);

__declspec(dllimport) int  __stdcall OffsetClipRgn(HDC, int, int);
__declspec(dllimport) int  __stdcall OffsetRgn(HRGN, int, int);
__declspec(dllimport) BOOL __stdcall PatBlt(HDC, int, int, int, int, DWORD);
__declspec(dllimport) BOOL __stdcall Pie(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(HDC, HMETAFILE);
__declspec(dllimport) BOOL __stdcall PaintRgn(HDC, HRGN);
__declspec(dllimport) BOOL __stdcall PolyPolygon(HDC, const POINT *, const INT *, int);
__declspec(dllimport) BOOL __stdcall PtInRegion(HRGN, int, int);
__declspec(dllimport) BOOL __stdcall PtVisible(HDC, int, int);
__declspec(dllimport) BOOL __stdcall RectInRegion(HRGN, const RECT *);
__declspec(dllimport) BOOL __stdcall RectVisible(HDC, const RECT *);
__declspec(dllimport) BOOL __stdcall Rectangle(HDC, int, int, int, int);
__declspec(dllimport) BOOL __stdcall RestoreDC(HDC, int);
__declspec(dllimport) HDC  __stdcall ResetDCA(HDC, const DEVMODEA *);
__declspec(dllimport) HDC  __stdcall ResetDCW(HDC, const DEVMODEW *);




#line 2698 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) UINT __stdcall RealizePalette(HDC);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(LPCSTR);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(LPCWSTR);




#line 2706 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall RoundRect(HDC, int, int, int, int, int, int);
__declspec(dllimport) BOOL __stdcall ResizePalette(HPALETTE, UINT);

__declspec(dllimport) int  __stdcall SaveDC(HDC);
__declspec(dllimport) int  __stdcall SelectClipRgn(HDC, HRGN);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(HDC, HRGN, int);
__declspec(dllimport) int  __stdcall SetMetaRgn(HDC);
__declspec(dllimport) HGDIOBJ __stdcall SelectObject(HDC, HGDIOBJ);
__declspec(dllimport) HPALETTE __stdcall SelectPalette(HDC, HPALETTE, BOOL);
__declspec(dllimport) COLORREF __stdcall SetBkColor(HDC, COLORREF);
__declspec(dllimport) int   __stdcall SetBkMode(HDC, int);
__declspec(dllimport) LONG  __stdcall SetBitmapBits(HBITMAP, DWORD, const void *);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(HDC, const RECT *, UINT);
__declspec(dllimport) int   __stdcall SetDIBits(HDC, HBITMAP, UINT, UINT, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) int   __stdcall SetDIBitsToDevice(HDC, int, int, DWORD, DWORD, int,
        int, UINT, UINT, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) DWORD __stdcall SetMapperFlags(HDC, DWORD);
__declspec(dllimport) int   __stdcall SetGraphicsMode(HDC hdc, int iMode);
__declspec(dllimport) int   __stdcall SetMapMode(HDC, int);
__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(UINT, const BYTE *);
__declspec(dllimport) UINT  __stdcall SetPaletteEntries(HPALETTE, UINT, UINT, const PALETTEENTRY *);
__declspec(dllimport) COLORREF __stdcall SetPixel(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL   __stdcall SetPixelV(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) int   __stdcall SetPolyFillMode(HDC, int);
__declspec(dllimport) BOOL   __stdcall StretchBlt(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(HRGN, int, int, int, int);
__declspec(dllimport) int   __stdcall StretchDIBits(HDC, int, int, int, int, int, int, int, int, const
        void *, const BITMAPINFO *, UINT, DWORD);
__declspec(dllimport) int   __stdcall SetROP2(HDC, int);
__declspec(dllimport) int   __stdcall SetStretchBltMode(HDC, int);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(HDC, UINT);
__declspec(dllimport) int   __stdcall SetTextCharacterExtra(HDC, int);
__declspec(dllimport) COLORREF __stdcall SetTextColor(HDC, COLORREF);
__declspec(dllimport) UINT  __stdcall SetTextAlign(HDC, UINT);
__declspec(dllimport) BOOL  __stdcall SetTextJustification(HDC, int, int);
__declspec(dllimport) BOOL  __stdcall UpdateColors(HDC);



__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(HDC, LPHANDLETABLE, LPMETARECORD, UINT);
typedef int (__stdcall* MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(HDC, HMETAFILE, MFENUMPROC, LPARAM);

typedef int (__stdcall* ENHMFENUMPROC)(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(HDC);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(HENHMETAFILE, LPCSTR);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(HENHMETAFILE, LPCWSTR);




#line 2763 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(HDC, LPCSTR, const RECT *, LPCSTR);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(HDC, LPCWSTR, const RECT *, LPCWSTR);




#line 2770 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(HENHMETAFILE);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(HDC, HENHMETAFILE, ENHMFENUMPROC,
        LPVOID, const RECT *);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(LPCSTR);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(LPCWSTR);




#line 2780 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(HENHMETAFILE, UINT, LPBYTE);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(HENHMETAFILE, UINT, LPSTR );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(HENHMETAFILE, UINT, LPWSTR );




#line 2788 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(HENHMETAFILE, UINT, LPENHMETAHEADER );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(HENHMETAFILE, UINT, LPPALETTEENTRY );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(HENHMETAFILE, UINT,
                                                 PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(HENHMETAFILE, UINT, LPBYTE, INT, HDC);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(HDC, HENHMETAFILE, const RECT *);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(HDC, LPHANDLETABLE, const ENHMETARECORD *, UINT);
__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(UINT, const BYTE *);
__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(UINT, const BYTE *, HDC, const METAFILEPICT *);
__declspec(dllimport) BOOL  __stdcall GdiComment(HDC, UINT, const BYTE *);

#line 2800 "C:\\MSDEV\\INCLUDE\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(HDC, LPTEXTMETRICA);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(HDC, LPTEXTMETRICW);




#line 2810 "C:\\MSDEV\\INCLUDE\\wingdi.h"

#line 2812 "C:\\MSDEV\\INCLUDE\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP              dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;

__declspec(dllimport) BOOL __stdcall AngleArc(HDC, int, int, DWORD, FLOAT, FLOAT);
__declspec(dllimport) BOOL __stdcall PolyPolyline(HDC, const POINT *, const DWORD *, DWORD);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(HDC, LPXFORM);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(HDC, const XFORM *);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(HDC, const XFORM *, DWORD);
__declspec(dllimport) BOOL __stdcall CombineTransform(LPXFORM, const XFORM *, const XFORM *);
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD);
__declspec(dllimport) UINT __stdcall GetDIBColorTable(HDC, UINT, UINT, RGBQUAD *);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(HDC, UINT, UINT, const RGBQUAD *);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(HDC, const COLORADJUSTMENT *);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(HDC, LPCOLORADJUSTMENT);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(HDC);


typedef BOOL (__stdcall* ABORTPROC)(HDC, int);


#line 2892 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 2901 "C:\\MSDEV\\INCLUDE\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 2910 "C:\\MSDEV\\INCLUDE\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 2918 "C:\\MSDEV\\INCLUDE\\wingdi.h"



#line 2922 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) int __stdcall StartDocA(HDC, const DOCINFOA *);
__declspec(dllimport) int __stdcall StartDocW(HDC, const DOCINFOW *);




#line 2930 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) int __stdcall EndDoc(HDC);
__declspec(dllimport) int __stdcall StartPage(HDC);
__declspec(dllimport) int __stdcall EndPage(HDC);
__declspec(dllimport) int __stdcall AbortDoc(HDC);
__declspec(dllimport) int __stdcall SetAbortProc(HDC, ABORTPROC);

__declspec(dllimport) BOOL __stdcall AbortPath(HDC);
__declspec(dllimport) BOOL __stdcall ArcTo(HDC, int, int, int, int, int, int,int, int);
__declspec(dllimport) BOOL __stdcall BeginPath(HDC);
__declspec(dllimport) BOOL __stdcall CloseFigure(HDC);
__declspec(dllimport) BOOL __stdcall EndPath(HDC);
__declspec(dllimport) BOOL __stdcall FillPath(HDC);
__declspec(dllimport) BOOL __stdcall FlattenPath(HDC);
__declspec(dllimport) int  __stdcall GetPath(HDC, LPPOINT, LPBYTE, int);
__declspec(dllimport) HRGN __stdcall PathToRegion(HDC);
__declspec(dllimport) BOOL __stdcall PolyDraw(HDC, const POINT *, const BYTE *, int);
__declspec(dllimport) BOOL __stdcall SelectClipPath(HDC, int);
__declspec(dllimport) int  __stdcall SetArcDirection(HDC, int);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(HDC, FLOAT, PFLOAT);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(HDC);
__declspec(dllimport) BOOL __stdcall StrokePath(HDC);
__declspec(dllimport) BOOL __stdcall WidenPath(HDC);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(DWORD, DWORD, const LOGBRUSH *, DWORD, const DWORD *);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(HDC, PFLOAT);
__declspec(dllimport) int  __stdcall GetArcDirection(HDC);

__declspec(dllimport) int   __stdcall GetObjectA(HGDIOBJ, int, LPVOID);
__declspec(dllimport) int   __stdcall GetObjectW(HGDIOBJ, int, LPVOID);




#line 2963 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall MoveToEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall TextOutA(HDC, int, int, LPCSTR, int);
__declspec(dllimport) BOOL  __stdcall TextOutW(HDC, int, int, LPCWSTR, int);




#line 2971 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall ExtTextOutA(HDC, int, int, UINT, const RECT *,LPCSTR, UINT, const INT *);
__declspec(dllimport) BOOL  __stdcall ExtTextOutW(HDC, int, int, UINT, const RECT *,LPCWSTR, UINT, const INT *);




#line 2978 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(HDC, const POLYTEXTA *, int);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(HDC, const POLYTEXTW *, int);




#line 2985 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(const POINT *, int, int);
__declspec(dllimport) BOOL  __stdcall DPtoLP(HDC, LPPOINT, int);
__declspec(dllimport) BOOL  __stdcall LPtoDP(HDC, LPPOINT, int);
__declspec(dllimport) BOOL  __stdcall Polygon(HDC, const POINT *, int);
__declspec(dllimport) BOOL  __stdcall Polyline(HDC, const POINT *, int);

__declspec(dllimport) BOOL  __stdcall PolyBezier(HDC, const POINT *, DWORD);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(HDC, const POINT *, DWORD);
__declspec(dllimport) BOOL  __stdcall PolylineTo(HDC, const POINT *, DWORD);

__declspec(dllimport) BOOL  __stdcall SetViewportExtEx(HDC, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall SetWindowExtEx(HDC, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(HDC, int, int, LPPOINT);

__declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(HDC, int, int, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(HDC, int, int, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(HBITMAP, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(HDC, int, int, LPPOINT);

__declspec(dllimport) int   __stdcall GetTextFaceA(HDC, int, LPSTR);
__declspec(dllimport) int   __stdcall GetTextFaceW(HDC, int, LPWSTR);




#line 3015 "C:\\MSDEV\\INCLUDE\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(HDC, DWORD, LPKERNINGPAIR);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(HDC, DWORD, LPKERNINGPAIR);




#line 3031 "C:\\MSDEV\\INCLUDE\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(HDC,LPPOINT);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(HDC,int,int,LPPOINT);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(HGDIOBJ);

__declspec(dllimport) BOOL  __stdcall GdiFlush();
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(DWORD);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit();







int __stdcall SetICMMode(HDC, int);
BOOL __stdcall CheckColorsInGamut(HDC,LPVOID,LPVOID,DWORD);
HANDLE __stdcall GetColorSpace(HDC);
BOOL __stdcall GetLogColorSpaceA(HCOLORSPACE,LPLOGCOLORSPACEA,DWORD);
BOOL __stdcall GetLogColorSpaceW(HCOLORSPACE,LPLOGCOLORSPACEW,DWORD);




#line 3056 "C:\\MSDEV\\INCLUDE\\wingdi.h"
HCOLORSPACE __stdcall CreateColorSpaceA(LPLOGCOLORSPACEA);
HCOLORSPACE __stdcall CreateColorSpaceW(LPLOGCOLORSPACEW);




#line 3063 "C:\\MSDEV\\INCLUDE\\wingdi.h"
BOOL __stdcall SetColorSpace(HDC,HCOLORSPACE);
BOOL __stdcall DeleteColorSpace(HCOLORSPACE);
BOOL __stdcall GetICMProfileA(HDC,LPDWORD,LPSTR);
BOOL __stdcall GetICMProfileW(HDC,LPDWORD,LPWSTR);




#line 3072 "C:\\MSDEV\\INCLUDE\\wingdi.h"
BOOL __stdcall SetICMProfileA(HDC,LPSTR);
BOOL __stdcall SetICMProfileW(HDC,LPWSTR);




#line 3079 "C:\\MSDEV\\INCLUDE\\wingdi.h"
BOOL __stdcall GetDeviceGammaRamp(HDC,LPVOID);
BOOL __stdcall SetDeviceGammaRamp(HDC,LPVOID);
BOOL __stdcall ColorMatchToTarget(HDC,HDC,DWORD);
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 3089 "C:\\MSDEV\\INCLUDE\\wingdi.h"
int __stdcall EnumICMProfilesA(HDC,ICMENUMPROCA,LPARAM);
int __stdcall EnumICMProfilesW(HDC,ICMENUMPROCW,LPARAM);




#line 3096 "C:\\MSDEV\\INCLUDE\\wingdi.h"

#line 3098 "C:\\MSDEV\\INCLUDE\\wingdi.h"
























































































































#line 3219 "C:\\MSDEV\\INCLUDE\\wingdi.h"







#line 3227 "C:\\MSDEV\\INCLUDE\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;


typedef struct tagEMRSELECTCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;
#line 3325 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;

typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;



typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

#line 3773 "C:\\MSDEV\\INCLUDE\\wingdi.h"

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN elp;              
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR     emr;
    DWORD   ihBrush;            
    LOGBRUSH lb;                
                                
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;

typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;








#line 3864 "C:\\MSDEV\\INCLUDE\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 3884 "C:\\MSDEV\\INCLUDE\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 3910 "C:\\MSDEV\\INCLUDE\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                            LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int  __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                const COLORREF *);
__declspec(dllimport) int  __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                COLORREF *);
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);

#line 3997 "C:\\MSDEV\\INCLUDE\\wingdi.h"


}
#line 4001 "C:\\MSDEV\\INCLUDE\\wingdi.h"




#line 4006 "C:\\MSDEV\\INCLUDE\\wingdi.h"
#line 125 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winuser.h"



















#line 21 "C:\\MSDEV\\INCLUDE\\winuser.h"


extern "C" {
#line 25 "C:\\MSDEV\\INCLUDE\\winuser.h"











typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 44 "C:\\MSDEV\\INCLUDE\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 51 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);



typedef BOOL (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, DWORD, LRESULT);


typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
#line 66 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
#line 69 "C:\\MSDEV\\INCLUDE\\winuser.h"


typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, DWORD);
#line 73 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, DWORD);
#line 76 "C:\\MSDEV\\INCLUDE\\winuser.h"


typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
#line 80 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
#line 83 "C:\\MSDEV\\INCLUDE\\winuser.h"


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 87 "C:\\MSDEV\\INCLUDE\\winuser.h"





























#line 117 "C:\\MSDEV\\INCLUDE\\winuser.h"






typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 127 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
#line 133 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);
#line 136 "C:\\MSDEV\\INCLUDE\\winuser.h"


typedef NAMEENUMPROCA   WINSTAENUMPROCA;
#line 140 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
#line 143 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef NAMEENUMPROCW   WINSTAENUMPROCW;
#line 146 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef NAMEENUMPROCW   DESKTOPENUMPROCW;
#line 149 "C:\\MSDEV\\INCLUDE\\winuser.h"






















#line 172 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;
#line 180 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 184 "C:\\MSDEV\\INCLUDE\\winuser.h"


#line 187 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 192 "C:\\MSDEV\\INCLUDE\\winuser.h"


























#line 219 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 221 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
wvsprintfA(
    LPSTR,
    LPCSTR,
    va_list arglist);
#line 231 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
wvsprintfW(
    LPWSTR,
    LPCWSTR,
    va_list arglist);
#line 240 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 245 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport) int __cdecl wsprintfA(LPSTR, LPCSTR, ...);
#line 249 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport) int __cdecl wsprintfW(LPWSTR, LPCWSTR, ...);
#line 252 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 257 "C:\\MSDEV\\INCLUDE\\winuser.h"






























#line 288 "C:\\MSDEV\\INCLUDE\\winuser.h"






































#line 327 "C:\\MSDEV\\INCLUDE\\winuser.h"





















































































































#line 445 "C:\\MSDEV\\INCLUDE\\winuser.h"











#line 457 "C:\\MSDEV\\INCLUDE\\winuser.h"






















#line 480 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 485 "C:\\MSDEV\\INCLUDE\\winuser.h"
































typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
#line 523 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;
#line 533 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 540 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;




























#line 578 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;
#line 614 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    DWORD   dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;




typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 647 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 648 "C:\\MSDEV\\INCLUDE\\winuser.h"














#line 663 "C:\\MSDEV\\INCLUDE\\winuser.h"







__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
    LPCSTR pwszKLID,
    UINT Flags);
#line 677 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
    LPCWSTR pwszKLID,
    UINT Flags);
#line 685 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 690 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
    HKL hkl,
    UINT Flags);







#line 706 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags,
    HKL dwhkl);
#line 720 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
    HKL hkl);


__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
    LPSTR pwszKLID);
#line 734 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
    LPWSTR pwszKLID);
#line 741 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 746 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
	int nBuff,
	HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
    DWORD dwLayout
);
#line 762 "C:\\MSDEV\\INCLUDE\\winuser.h"
























__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
    LPSTR lpszDesktop,
    LPSTR lpszDevice,
    LPDEVMODEA pDevmode,
    DWORD dwFlags,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
#line 797 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
    LPWSTR lpszDesktop,
    LPWSTR lpszDevice,
    LPDEVMODEW pDevmode,
    DWORD dwFlags,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
#line 809 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 814 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 816 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 817 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
    LPSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    DWORD dwDesiredAccess);
#line 828 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
    LPWSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    DWORD dwDesiredAccess);
#line 838 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 843 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
    DWORD dwFlags,
    BOOL fInherit,
    DWORD dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
    HWINSTA hwinsta,
    DESKTOPENUMPROCA lpEnumFunc,
    LPARAM lParam);
#line 861 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
    HWINSTA hwinsta,
    DESKTOPENUMPROCW lpEnumFunc,
    LPARAM lParam);
#line 870 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 875 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
    HDESK hDesktop,
    WNDENUMPROC lpfn,
    LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
    HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
    HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
    HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
    DWORD dwThreadId);

#line 909 "C:\\MSDEV\\INCLUDE\\winuser.h"





















__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
    LPSTR lpwinsta,
    DWORD dwReserved,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
#line 939 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
    LPWSTR lpwinsta,
    DWORD dwReserved,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
#line 949 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 954 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
    LPSTR lpszWinSta,
    BOOL fInherit,
    DWORD dwDesiredAccess);
#line 964 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
    LPWSTR lpszWinSta,
    BOOL fInherit,
    DWORD dwDesiredAccess);
#line 973 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 978 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
    WINSTAENUMPROCA lpEnumFunc,
    LPARAM lParam);
#line 987 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
    WINSTAENUMPROCW lpEnumFunc,
    LPARAM lParam);
#line 995 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 1000 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
    HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
    HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
#line 1019 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);





typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;


__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);
#line 1061 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);
#line 1072 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 1077 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);
#line 1088 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);
#line 1098 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 1103 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 1105 "C:\\MSDEV\\INCLUDE\\winuser.h"



typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
#line 1125 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;
#line 1143 "C:\\MSDEV\\INCLUDE\\winuser.h"






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1154 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 1155 "C:\\MSDEV\\INCLUDE\\winuser.h"


typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
#line 1170 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;
#line 1184 "C:\\MSDEV\\INCLUDE\\winuser.h"






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1195 "C:\\MSDEV\\INCLUDE\\winuser.h"






typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;
} MSG, *PMSG,  *NPMSG,  *LPMSG;










#line 1220 "C:\\MSDEV\\INCLUDE\\winuser.h"






























#line 1251 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 1253 "C:\\MSDEV\\INCLUDE\\winuser.h"








































#line 1294 "C:\\MSDEV\\INCLUDE\\winuser.h"















typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;





































typedef struct tagCOPYDATASTRUCT {
    DWORD dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;





















#line 1380 "C:\\MSDEV\\INCLUDE\\winuser.h"




































#line 1417 "C:\\MSDEV\\INCLUDE\\winuser.h"











































typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;















#line 1482 "C:\\MSDEV\\INCLUDE\\winuser.h"















































#line 1530 "C:\\MSDEV\\INCLUDE\\winuser.h"






#line 1537 "C:\\MSDEV\\INCLUDE\\winuser.h"


















#line 1556 "C:\\MSDEV\\INCLUDE\\winuser.h"










































#line 1599 "C:\\MSDEV\\INCLUDE\\winuser.h"








#line 1608 "C:\\MSDEV\\INCLUDE\\winuser.h"










__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
    LPCSTR lpString);
#line 1624 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
    LPCWSTR lpString);
#line 1631 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 1636 "C:\\MSDEV\\INCLUDE\\winuser.h"






















typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

























#line 1701 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 1703 "C:\\MSDEV\\INCLUDE\\winuser.h"














































































#line 1782 "C:\\MSDEV\\INCLUDE\\winuser.h"




















#line 1803 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 1805 "C:\\MSDEV\\INCLUDE\\winuser.h"




















































__declspec(dllimport) BOOL __stdcall DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);









































__declspec(dllimport) BOOL    __stdcall DrawFrameControl(HDC, LPRECT, UINT, UINT);










__declspec(dllimport) BOOL    __stdcall DrawCaption(HWND, HDC, const RECT *, UINT);




__declspec(dllimport) BOOL    __stdcall DrawAnimatedRects(HWND hwnd, int idAni, const RECT * lprcFrom, const RECT * lprcTo);

#line 1918 "C:\\MSDEV\\INCLUDE\\winuser.h"
























#line 1943 "C:\\MSDEV\\INCLUDE\\winuser.h"



















#line 1963 "C:\\MSDEV\\INCLUDE\\winuser.h"










typedef struct tagACCEL {
    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;


typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
#line 2004 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;
#line 2020 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 2027 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;




typedef struct tagNMHDR
{
    HWND  hwndFrom;
    UINT  idFrom;
    UINT  code;         
}   NMHDR;
typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
#line 2055 "C:\\MSDEV\\INCLUDE\\winuser.h"










#line 2066 "C:\\MSDEV\\INCLUDE\\winuser.h"



















#line 2086 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    DWORD      itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    DWORD       itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    UINT       itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    DWORD       itemData1;
    UINT        itemID2;
    DWORD       itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;








__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);
#line 2155 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);
#line 2165 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2170 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
    const MSG *lpMsg);


__declspec(dllimport)
LONG
__stdcall
DispatchMessageA(
    const MSG *lpMsg);
#line 2184 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
DispatchMessageW(
    const MSG *lpMsg);
#line 2191 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2196 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
    int cMessagesMax);


__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
#line 2214 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
#line 2225 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2230 "C:\\MSDEV\\INCLUDE\\winuser.h"








#line 2239 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
    HWND hWnd ,
    int id,
    UINT fsModifiers,
    UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
    HWND hWnd,
    int id);






















#line 2278 "C:\\MSDEV\\INCLUDE\\winuser.h"









__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
    UINT uFlags,
    DWORD dwReserved);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
    BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
    LPARAM lParam);
#line 2325 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2336 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2346 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2351 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    LPDWORD lpdwResult);
#line 2365 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    LPDWORD lpdwResult);
#line 2378 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2383 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2394 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2404 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2409 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData);
#line 2422 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData);
#line 2434 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2439 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport) long  __stdcall  BroadcastSystemMessage(DWORD, LPDWORD, UINT, WPARAM, LPARAM);
















typedef struct tagBROADCASTSYSMSG
{
    UINT    uiMessage;
    WPARAM  wParam;
    LPARAM  lParam;
} BROADCASTSYSMSG;
typedef BROADCASTSYSMSG   *LPBROADCASTSYSMSG;




#line 2470 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2481 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2491 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2496 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2507 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2517 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2522 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2527 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 2531 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2536 "C:\\MSDEV\\INCLUDE\\winuser.h"






__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
    DWORD idAttach,
    DWORD idAttachTo,
    BOOL fAttach);

__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
    LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);

__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
    HANDLE hProcess,
    DWORD dwMilliseconds);


__declspec(dllimport)
LRESULT
__stdcall
DefWindowProcA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2579 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
DefWindowProcW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2589 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2594 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
void
__stdcall
PostQuitMessage(
    int nExitCode);




__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2614 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 2625 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2630 "C:\\MSDEV\\INCLUDE\\winuser.h"































#line 2662 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);

__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
    UINT);


__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
    const WNDCLASSA *lpWndClass);
#line 2688 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
    const WNDCLASSW *lpWndClass);
#line 2695 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2700 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
    LPCSTR lpClassName,
    HINSTANCE hInstance);
#line 2709 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
    LPCWSTR lpClassName,
    HINSTANCE hInstance);
#line 2717 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2722 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
    HINSTANCE hInstance ,
    LPCSTR lpClassName,
    LPWNDCLASSA lpWndClass);
#line 2732 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
    HINSTANCE hInstance ,
    LPCWSTR lpClassName,
    LPWNDCLASSW lpWndClass);
#line 2741 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2746 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(const WNDCLASSEXA *);
#line 2754 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(const WNDCLASSEXW *);
#line 2760 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2765 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(HINSTANCE, LPCSTR, LPWNDCLASSEXA);
#line 2772 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(HINSTANCE, LPCWSTR, LPWNDCLASSEXW);
#line 2778 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2783 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 2785 "C:\\MSDEV\\INCLUDE\\winuser.h"









__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
    DWORD dwExStyle,
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);
#line 2811 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
    DWORD dwExStyle,
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);
#line 2829 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2834 "C:\\MSDEV\\INCLUDE\\winuser.h"






#line 2841 "C:\\MSDEV\\INCLUDE\\winuser.h"





#line 2847 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 2852 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindow(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsMenu(
    HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
    HWND hWndParent,
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
    HWND hWnd,
    int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
    HWND hWnd,
    int nCmdShow);
#line 2893 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
    HWND hWnd,
    BOOL bInvert);

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
    HWND hWnd,
    BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
    HWND hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
    HWND hWnd,
    HWND hWndInsertAfter ,
    int X,
    int Y,
    int cx,
    int cy,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
    HWND hWnd,
    WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
    HWND hWnd,
    const WINDOWPLACEMENT *lpwndpl);



__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
    int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
    HDWP hWinPosInfo,
    HWND hWnd,
    HWND hWndInsertAfter ,
    int x,
    int y,
    int cx,
    int cy,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
    HDWP hWinPosInfo);

#line 2985 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
    HWND hWnd);






















#line 3038 "C:\\MSDEV\\INCLUDE\\winuser.h"













#line 1 "C:\\MSDEV\\INCLUDE\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#pragma pack(2)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack2.h"
#line 3052 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 3072 "C:\\MSDEV\\INCLUDE\\winuser.h"
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 3079 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 3099 "C:\\MSDEV\\INCLUDE\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 3106 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 3108 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3120 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3131 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3136 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3148 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3159 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3164 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3169 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 3173 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3178 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3183 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 3187 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3192 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
DialogBoxParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3204 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
DialogBoxParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3215 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3220 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
DialogBoxIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3232 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
DialogBoxIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
#line 3243 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3248 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3253 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 3257 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3262 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3267 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 3271 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3276 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
    HWND hDlg,
    int nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
    HWND hDlg,
    int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    UINT uValue,
    BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    BOOL *lpTranslated,
    BOOL bSigned);


__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPCSTR lpString);
#line 3318 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPCWSTR lpString);
#line 3327 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3332 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPSTR lpString,
    int nMaxCount);
#line 3343 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPWSTR lpString,
    int nMaxCount);
#line 3353 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3358 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
    HWND hDlg,
    int nIDButton,
    UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
    HWND hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
    HWND hDlg,
    int nIDButton);


__declspec(dllimport)
LONG
__stdcall
SendDlgItemMessageA(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 3394 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SendDlgItemMessageW(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 3405 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3410 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
    HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);


__declspec(dllimport)
LRESULT
__stdcall
DefDlgProcA(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 3448 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
DefDlgProcW(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
#line 3458 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3463 "C:\\MSDEV\\INCLUDE\\winuser.h"






#line 3470 "C:\\MSDEV\\INCLUDE\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
    LPMSG lpMsg,
    int nCode);
#line 3481 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
    LPMSG lpMsg,
    int nCode);
#line 3489 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3494 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 3496 "C:\\MSDEV\\INCLUDE\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
    HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
    HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
    HWND hWndRemove,
    HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
    UINT uFormat,
    HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
    GetClipboardData(
    UINT uFormat);


__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
    LPCSTR lpszFormat);
#line 3560 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
    LPCWSTR lpszFormat);
#line 3567 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3572 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
    UINT format);


__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
    UINT format,
    LPSTR lpszFormatName,
    int cchMaxCount);
#line 3594 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
    UINT format,
    LPWSTR lpszFormatName,
    int cchMaxCount);
#line 3603 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3608 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
    UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
    UINT *paFormatPriorityList,
    int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);

#line 3635 "C:\\MSDEV\\INCLUDE\\winuser.h"






__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
    LPCSTR lpszSrc,
    LPSTR lpszDst);
#line 3648 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst);
#line 3656 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3661 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
    LPCSTR lpszSrc,
    LPSTR lpszDst);
#line 3670 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst);
#line 3678 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3683 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
#line 3693 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
#line 3702 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3707 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
#line 3717 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst,
    DWORD cchDstLength);
#line 3726 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3731 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
    LPSTR lpsz);
#line 3739 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
    LPWSTR lpsz);
#line 3746 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3751 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
    LPSTR lpsz,
    DWORD cchLength);
#line 3760 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
    LPWSTR lpsz,
    DWORD cchLength);
#line 3768 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3773 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
    LPSTR lpsz);
#line 3781 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
    LPWSTR lpsz);
#line 3788 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3793 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
    LPSTR lpsz,
    DWORD cchLength);
#line 3802 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
    LPWSTR lpsz,
    DWORD cchLength);
#line 3810 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3815 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
    LPCSTR lpsz);
#line 3823 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
    LPCWSTR lpsz);
#line 3830 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3835 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
    LPCSTR lpszStart,
    LPCSTR lpszCurrent);
#line 3844 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
    LPCWSTR lpszStart,
    LPCWSTR lpszCurrent);
#line 3852 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3857 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
     WORD CodePage,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
     WORD CodePage,
     LPCSTR lpStart,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);
#line 3876 "C:\\MSDEV\\INCLUDE\\winuser.h"





















__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
    CHAR ch);
#line 3903 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
    WCHAR ch);
#line 3910 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3915 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
    CHAR ch);
#line 3923 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
    WCHAR ch);
#line 3930 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3935 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
    CHAR ch);
#line 3943 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
    WCHAR ch);
#line 3950 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3955 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
    CHAR ch);
#line 3963 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
    WCHAR ch);
#line 3970 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 3975 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 3977 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
SetFocus(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
    int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
    int vKey);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardState(
    PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
    LPBYTE lpKeyState);


__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
    LONG lParam,
    LPSTR lpString,
    int nSize
    );
#line 4036 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
    LONG lParam,
    LPWSTR lpString,
    int nSize
    );
#line 4046 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4051 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyboardType(
    int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
    UINT uVirtKey,
    UINT uScanCode,
    PBYTE lpKeyState,
    LPWORD lpChar,
    UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
    UINT uVirtKey,
    UINT uScanCode,
    PBYTE lpKeyState,
    LPWORD lpChar,
    UINT uFlags,
    HKL dwhkl);
#line 4080 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
    WORD wOemChar);


__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
    CHAR ch);
#line 4105 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
    WCHAR ch);
#line 4112 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4117 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
SHORT
__stdcall VkKeyScanExA(
    CHAR  ch,
    HKL   dwhkl);
#line 4126 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
SHORT
__stdcall VkKeyScanExW(
    WCHAR  ch,
    HKL   dwhkl);
#line 4133 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4138 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 4139 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
void
__stdcall
keybd_event(
    BYTE bVk,
    BYTE bScan,
    DWORD dwFlags,
    DWORD dwExtraInfo);










__declspec(dllimport)
void
__stdcall
mouse_event(
    DWORD dwFlags,
    DWORD dx,
    DWORD dy,
    DWORD cButtons,
    DWORD dwExtraInfo);


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
    UINT uCode,
    UINT uMapType);
#line 4178 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
    UINT uCode,
    UINT uMapType);
#line 4186 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4191 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);
#line 4202 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);
#line 4211 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4216 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 4217 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
    UINT flags);

__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
    DWORD nCount,
    LPHANDLE pHandles,
    BOOL fWaitAll,
    DWORD dwMilliseconds,
    DWORD dwWakeMask);




































__declspec(dllimport)
UINT
__stdcall
SetTimer(
    HWND hWnd ,
    UINT nIDEvent,
    UINT uElapse,
    TIMERPROC lpTimerFunc);

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
    HWND hWnd,
    UINT uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
    HWND hWnd,
    BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
    HWND hWnd);


__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
    HINSTANCE hInstance,
    LPCSTR lpTableName);
#line 4336 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
    HINSTANCE hInstance,
    LPCWSTR lpTableName);
#line 4344 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4349 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
    LPACCEL, int);
#line 4357 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
    LPACCEL, int);
#line 4364 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4369 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
    HACCEL hAccel);


__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);
#line 4385 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);
#line 4394 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4399 "C:\\MSDEV\\INCLUDE\\winuser.h"




__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);
#line 4411 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);
#line 4420 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4425 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 4427 "C:\\MSDEV\\INCLUDE\\winuser.h"
















































































#line 4508 "C:\\MSDEV\\INCLUDE\\winuser.h"






#line 4515 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
    int nIndex);

#line 4524 "C:\\MSDEV\\INCLUDE\\winuser.h"




__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
    HINSTANCE hInstance,
    LPCSTR lpMenuName);
#line 4535 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
    HINSTANCE hInstance,
    LPCWSTR lpMenuName);
#line 4543 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4548 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
    const MENUTEMPLATEA *lpMenuTemplate);
#line 4556 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
    const MENUTEMPLATEW *lpMenuTemplate);
#line 4563 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4568 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
    HWND hWnd,
    HMENU hMenu);


__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
    HMENU hMenu,
    UINT cmd,
    LPCSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);
#line 4593 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
    HMENU hMenu,
    UINT cmd,
    LPCWSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);
#line 4604 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4609 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
    HWND hWnd,
    HMENU hMenu,
    UINT uIDHiliteItem,
    UINT uHilite);


__declspec(dllimport)
int
__stdcall
GetMenuStringA(
    HMENU hMenu,
    UINT uIDItem,
    LPSTR lpString,
    int nMaxCount,
    UINT uFlag);
#line 4630 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetMenuStringW(
    HMENU hMenu,
    UINT uIDItem,
    LPWSTR lpString,
    int nMaxCount,
    UINT uFlag);
#line 4641 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4646 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
    HMENU hMenu,
    UINT uId,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
    HWND hWnd);

__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
    HWND hWnd,
    BOOL bRevert);

__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
    HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
    HMENU hMenu,
    UINT uIDCheckItem,
    UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
    HMENU hMenu,
    UINT uIDEnableItem,
    UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
    HMENU hMenu,
    int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
    HMENU hMenu,
    int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
    HMENU hMenu);


__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );
#line 4734 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );
#line 4746 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4751 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );
#line 4763 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );
#line 4774 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4779 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );
#line 4792 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );
#line 4804 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4809 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    HBITMAP hBitmapUnchecked,
    HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
    HMENU hMenu,
    UINT uFlags,
    int x,
    int y,
    int nReserved,
    HWND hWnd,
    const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport) BOOL    __stdcall TrackPopupMenuEx(HMENU, UINT, int, int, HWND, LPTPMPARAMS);









typedef struct tagMENUITEMINFOA
{
    UINT    cbSize;
    UINT    fMask;
    UINT    fType;          
    UINT    fState;         
    UINT    wID;            
    HMENU   hSubMenu;       
    HBITMAP hbmpChecked;    
    HBITMAP hbmpUnchecked;  
    DWORD   dwItemData;     
    LPSTR   dwTypeData;     
    UINT    cch;            
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
#line 4892 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagMENUITEMINFOW
{
    UINT    cbSize;
    UINT    fMask;
    UINT    fType;          
    UINT    fState;         
    UINT    wID;            
    HMENU   hSubMenu;       
    HBITMAP hbmpChecked;    
    HBITMAP hbmpUnchecked;  
    DWORD   dwItemData;     
    LPWSTR  dwTypeData;     
    UINT    cch;            
}   MENUITEMINFOW,  *LPMENUITEMINFOW;
#line 4908 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 4915 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
#line 4918 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;
#line 4921 "C:\\MSDEV\\INCLUDE\\winuser.h"



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 4926 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );
#line 4938 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );
#line 4949 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4954 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOA
    );
#line 4966 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOW
    );
#line 4977 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 4982 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );
#line 4994 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );
#line 5005 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5010 "C:\\MSDEV\\INCLUDE\\winuser.h"




__declspec(dllimport) UINT    __stdcall GetMenuDefaultItem(HMENU hMenu, UINT fByPos, UINT gmdiFlags);
__declspec(dllimport) BOOL    __stdcall SetMenuDefaultItem(HMENU hMenu, UINT uItem, UINT fByPos);

__declspec(dllimport) BOOL    __stdcall GetMenuItemRect(HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
__declspec(dllimport) int     __stdcall MenuItemFromPoint(HWND hWnd, HMENU hMenu, POINT ptScreen);

#line 5021 "C:\\MSDEV\\INCLUDE\\winuser.h"

















#line 5039 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 5041 "C:\\MSDEV\\INCLUDE\\winuser.h"






typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    DWORD   dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;











__declspec(dllimport)
DWORD
__stdcall
DragObject(HWND, HWND, UINT, DWORD, HCURSOR);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(HWND, POINT);
#line 5077 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
    HDC hDC,
    int X,
    int Y,
    HICON hIcon);






























typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;
#line 5125 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
DrawTextA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);
#line 5137 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
DrawTextW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);
#line 5148 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5153 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
int
__stdcall
DrawTextExA(HDC, LPSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);
#line 5161 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
DrawTextExW(HDC, LPWSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);
#line 5167 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5172 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 5173 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 5175 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);
#line 5191 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);
#line 5206 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5211 "C:\\MSDEV\\INCLUDE\\winuser.h"


















__declspec(dllimport) BOOL __stdcall DrawStateA(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);
#line 5231 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport) BOOL __stdcall DrawStateW(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);
#line 5234 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5239 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 5240 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
    HDC hDC,
    int X,
    int Y,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);
#line 5255 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
    HDC hDC,
    int X,
    int Y,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);
#line 5269 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5274 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions);
#line 5286 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions);
#line 5297 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5302 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport) BOOL __stdcall PaintDesktop(HDC hdc);

#line 5325 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
    HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
    HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
    HWND hWnd ,
    HRGN hrgnClip,
    DWORD flags);





















__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
    HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
    HWND hWnd,
    HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
    HWND hWnd,
    LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
    HWND hWnd,
    const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
    HWND hWnd,
    LPRECT lpRect,
    BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetWindowRgn(
    HWND hWnd,
    HRGN hRgn);

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
    HDC hDC,
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
    HWND hWnd ,
    const RECT *lpRect,
    BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
    HWND hWnd ,
    const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
    HWND hWnd,
    HRGN hRgn);

__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
    HWND hWnd,
    const RECT *lprcUpdate,
    HRGN hrgnUpdate,
    UINT flags);

























__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
    HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
    HWND hWnd,
    int XAmount,
    int YAmount,
    const RECT *lpRect,
    const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
    HDC hDC,
    int dx,
    int dy,
    const RECT *lprcScroll,
    const RECT *lprcClip ,
    HRGN hrgnUpdate,
    LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
    HWND hWnd,
    int dx,
    int dy,
    const RECT *prcScroll,
    const RECT *prcClip ,
    HRGN hrgnUpdate,
    LPRECT prcUpdate,
    UINT flags);







__declspec(dllimport)
int
__stdcall
SetScrollPos(
    HWND hWnd,
    int nBar,
    int nPos,
    BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
    HWND hWnd,
    int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
    HWND hWnd,
    int nBar,
    int nMinPos,
    int nMaxPos,
    BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
    HWND hWnd,
    int nBar,
    LPINT lpMinPos,
    LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
    HWND hWnd,
    int wBar,
    BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
    HWND hWnd,
    UINT wSBflags,
    UINT wArrows);
















#line 5614 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetPropA(
    HWND hWnd,
    LPCSTR lpString,
    HANDLE hData);
#line 5624 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropW(
    HWND hWnd,
    LPCWSTR lpString,
    HANDLE hData);
#line 5633 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5638 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
    HWND hWnd,
    LPCSTR lpString);
#line 5647 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
    HWND hWnd,
    LPCWSTR lpString);
#line 5655 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5660 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
    HWND hWnd,
    LPCSTR lpString);
#line 5669 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
    HWND hWnd,
    LPCWSTR lpString);
#line 5677 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5682 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
EnumPropsExA(
    HWND hWnd,
    PROPENUMPROCEXA lpEnumFunc,
    LPARAM lParam);
#line 5692 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExW(
    HWND hWnd,
    PROPENUMPROCEXW lpEnumFunc,
    LPARAM lParam);
#line 5701 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5706 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
EnumPropsA(
    HWND hWnd,
    PROPENUMPROCA lpEnumFunc);
#line 5715 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsW(
    HWND hWnd,
    PROPENUMPROCW lpEnumFunc);
#line 5723 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5728 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
    HWND hWnd,
    LPCSTR lpString);
#line 5737 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
    HWND hWnd,
    LPCWSTR lpString);
#line 5745 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5750 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetWindowTextA(
    HWND hWnd,
    LPSTR lpString,
    int nMaxCount);
#line 5760 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextW(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount);
#line 5769 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5774 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
    HWND hWnd);
#line 5782 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
    HWND hWnd);
#line 5789 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5794 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
    HWND hWnd,
    LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
    HWND hWnd,
    LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu,
    DWORD dwExStyle);




typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD   dwContextId;        
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport) BOOL  __stdcall  SetWindowContextHelpId(HWND, DWORD);
__declspec(dllimport) DWORD __stdcall  GetWindowContextHelpId(HWND);
__declspec(dllimport) BOOL  __stdcall  SetMenuContextHelpId(HMENU, DWORD);
__declspec(dllimport) DWORD __stdcall  GetMenuContextHelpId(HMENU);

#line 5845 "C:\\MSDEV\\INCLUDE\\winuser.h"





















#line 5867 "C:\\MSDEV\\INCLUDE\\winuser.h"









#line 5877 "C:\\MSDEV\\INCLUDE\\winuser.h"








#line 5886 "C:\\MSDEV\\INCLUDE\\winuser.h"









#line 5896 "C:\\MSDEV\\INCLUDE\\winuser.h"






__declspec(dllimport)
int
__stdcall
MessageBoxA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType);
#line 5911 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType);
#line 5921 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5926 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
MessageBoxExA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType,
    WORD wLanguageId);
#line 5938 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType,
    WORD wLanguageId);
#line 5949 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 5954 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);


typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD       dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD   dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
#line 5975 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD       dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD   dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;
#line 5990 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 5999 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport) int     __stdcall MessageBoxIndirectA(LPMSGBOXPARAMSA);
#line 6003 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport) int     __stdcall MessageBoxIndirectW(LPMSGBOXPARAMSW);
#line 6006 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6011 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 6012 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
    UINT uType);

#line 6020 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
ShowCursor(
    BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
    int X,
    int Y);

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
    HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
    LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
    const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
    LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
    HWND hWnd,
    HBITMAP hBitmap ,
    int nWidth,
    int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
    UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
    int X,
    int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
    LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
    HWND hWnd,
    LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
    HWND hWnd,
    LPPOINT lpPoint);

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
    HWND hWndFrom,
    HWND hWndTo,
    LPPOINT lpPoints,
    UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
    POINT Point);

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
    HWND hWndParent,
    POINT Point);







__declspec(dllimport) HWND    __stdcall ChildWindowFromPointEx(HWND, POINT, UINT);
#line 6160 "C:\\MSDEV\\INCLUDE\\winuser.h"

















































#line 6210 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
    int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
    int nIndex);

#line 6225 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
    int cElements,
    const INT * lpaElements,
    const COLORREF * lpaRgbValues);

#line 6235 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
    HDC hDC,
    const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
    HDC hDC,
    const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
    LPRECT lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom);

__declspec(dllimport)
BOOL
__stdcall
    SetRectEmpty(
    LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
    LPRECT lprcDst,
    const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
    LPRECT lprc,
    int dx,
    int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
    LPRECT lprc,
    int dx,
    int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
    const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
    const RECT *lprc1,
    const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
    const RECT *lprc,
    POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
    HWND hWnd,
    int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);


__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
    HWND hWnd,
    int nIndex);
#line 6374 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
    HWND hWnd,
    int nIndex);
#line 6382 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6387 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
#line 6397 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
#line 6406 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6411 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
    HWND hWnd,
    int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);


__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
    HWND hWnd,
    int nIndex);
#line 6435 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
    HWND hWnd,
    int nIndex);
#line 6443 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6448 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
#line 6458 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
#line 6467 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6472 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 6474 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetParent(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
    HWND hWndChild,
    HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
    HWND hWndParent,
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
    LPCSTR lpClassName ,
    LPCSTR lpWindowName);
#line 6510 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
FindWindowW(
    LPCWSTR lpClassName ,
    LPCWSTR lpWindowName);
#line 6518 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6523 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport) HWND    __stdcall FindWindowExA(HWND, HWND, LPCSTR, LPCSTR);
#line 6528 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport) HWND    __stdcall FindWindowExW(HWND, HWND, LPCWSTR, LPCWSTR);
#line 6531 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6536 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 6538 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
    DWORD dwThreadId,
    WNDENUMPROC lpfn,
    LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
    HWND hWnd,
    LPSTR lpClassName,
    int nMaxCount);
#line 6565 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetClassNameW(
    HWND hWnd,
    LPWSTR lpClassName,
    int nMaxCount);
#line 6574 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6579 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
    HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
    HWND hWnd,
    LPDWORD lpdwProcessId);




__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
    HWND hWnd);












__declspec(dllimport)
HWND
__stdcall
GetWindow(
    HWND hWnd,
    UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
    int nFilterType,
    HOOKPROC pfnFilterProc);
#line 6636 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
    int nFilterType,
    HOOKPROC pfnFilterProc);
#line 6644 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6649 "C:\\MSDEV\\INCLUDE\\winuser.h"

























#line 6675 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
    int nCode,
    HOOKPROC pfnFilterProc);


__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);
#line 6693 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);
#line 6703 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6708 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
    HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
    HHOOK hhk,
    int nCode,
    WPARAM wParam,
    LPARAM lParam);










#line 6734 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 6736 "C:\\MSDEV\\INCLUDE\\winuser.h"







































#line 6776 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6781 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6786 "C:\\MSDEV\\INCLUDE\\winuser.h"






















__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(HMENU, UINT, UINT, UINT, UINT);
#line 6813 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 6830 "C:\\MSDEV\\INCLUDE\\winuser.h"



























#line 6858 "C:\\MSDEV\\INCLUDE\\winuser.h"






#line 6865 "C:\\MSDEV\\INCLUDE\\winuser.h"






__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
    HINSTANCE hInstance,
    LPCSTR lpBitmapName);
#line 6878 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
    HINSTANCE hInstance,
    LPCWSTR lpBitmapName);
#line 6886 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6891 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
    HINSTANCE hInstance,
    LPCSTR lpCursorName);
#line 6900 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
    HINSTANCE hInstance,
    LPCWSTR lpCursorName);
#line 6908 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6913 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
    LPCSTR    lpFileName);
#line 6921 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
    LPCWSTR    lpFileName);
#line 6928 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 6933 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
    HINSTANCE hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    const void *pvANDPlane,
    const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
    HCURSOR hCursor);






















#line 6974 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
    HCURSOR hcur,
    DWORD   id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;


__declspec(dllimport)
HICON
__stdcall
LoadIconA(
    HINSTANCE hInstance,
    LPCSTR lpIconName);
#line 6999 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
LoadIconW(
    HINSTANCE hInstance,
    LPCWSTR lpIconName);
#line 7007 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7012 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIcon(
    HINSTANCE hInstance,
    int nWidth,
    int nHeight,
    BYTE cPlanes,
    BYTE cBitsPixel,
    const BYTE *lpbANDbits,
    const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
    HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
    PBYTE presbits,
    BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
    PBYTE presbits,
    BOOL  fIcon,
    int   cxDesired,
    int   cyDesired,
    UINT  Flags);
#line 7049 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL fIcon,
    DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL  fIcon,
    DWORD dwVer,
    int   cxDesired,
    int   cyDesired,
    UINT  Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 7084 "C:\\MSDEV\\INCLUDE\\winuser.h"





















__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
    HINSTANCE,
    LPCSTR,
    UINT,
    int,
    int,
    UINT);
#line 7116 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
    HINSTANCE,
    LPCWSTR,
    UINT,
    int,
    int,
    UINT);
#line 7128 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7133 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CopyImage(
    HANDLE,
    UINT,
    int,
    int,
    UINT);







__declspec(dllimport) BOOL __stdcall DrawIconEx(HDC hdc, int xLeft, int yTop,
              HICON hIcon, int cxWidth, int cyWidth,
              UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
#line 7154 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
    PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
    HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
    HICON hIcon,
    PICONINFO piconinfo);




#line 7178 "C:\\MSDEV\\INCLUDE\\winuser.h"




































































































#line 7279 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 7280 "C:\\MSDEV\\INCLUDE\\winuser.h"





#line 7286 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 7288 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
LoadStringA(
    HINSTANCE hInstance,
    UINT uID,
    LPSTR lpBuffer,
    int nBufferMax);
#line 7299 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
LoadStringW(
    HINSTANCE hInstance,
    UINT uID,
    LPWSTR lpBuffer,
    int nBufferMax);
#line 7309 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7314 "C:\\MSDEV\\INCLUDE\\winuser.h"














#line 7329 "C:\\MSDEV\\INCLUDE\\winuser.h"



























#line 7357 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 7359 "C:\\MSDEV\\INCLUDE\\winuser.h"


















#line 7378 "C:\\MSDEV\\INCLUDE\\winuser.h"












































#line 7423 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 7425 "C:\\MSDEV\\INCLUDE\\winuser.h"






































#line 7464 "C:\\MSDEV\\INCLUDE\\winuser.h"
















#line 7481 "C:\\MSDEV\\INCLUDE\\winuser.h"



















#line 7501 "C:\\MSDEV\\INCLUDE\\winuser.h"

























#line 7527 "C:\\MSDEV\\INCLUDE\\winuser.h"



#line 7531 "C:\\MSDEV\\INCLUDE\\winuser.h"





#line 7537 "C:\\MSDEV\\INCLUDE\\winuser.h"














#line 7552 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 7554 "C:\\MSDEV\\INCLUDE\\winuser.h"




















__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
    HWND hDlg,
    LPMSG lpMsg);
#line 7581 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
    HWND hDlg,
    LPMSG lpMsg);
#line 7589 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7594 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 7596 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
    HWND hDlg,
    LPRECT lpRect);


__declspec(dllimport)
int
__stdcall
DlgDirListA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);
#line 7615 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);
#line 7626 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7631 "C:\\MSDEV\\INCLUDE\\winuser.h"
















__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
    HWND hDlg,
    LPSTR lpString,
    int nCount,
    int nIDListBox);
#line 7656 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
    HWND hDlg,
    LPWSTR lpString,
    int nCount,
    int nIDListBox);
#line 7666 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7671 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);
#line 7683 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);
#line 7694 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7699 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
    HWND hDlg,
    LPSTR lpString,
    int nCount,
    int nIDComboBox);
#line 7710 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
    HWND hDlg,
    LPWSTR lpString,
    int nCount,
    int nIDComboBox);
#line 7720 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7725 "C:\\MSDEV\\INCLUDE\\winuser.h"





















#line 7747 "C:\\MSDEV\\INCLUDE\\winuser.h"





















#line 7769 "C:\\MSDEV\\INCLUDE\\winuser.h"


































                                  

























































#line 7862 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7867 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 7869 "C:\\MSDEV\\INCLUDE\\winuser.h"






















#line 7892 "C:\\MSDEV\\INCLUDE\\winuser.h"


#line 7895 "C:\\MSDEV\\INCLUDE\\winuser.h"









































#line 7937 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 7938 "C:\\MSDEV\\INCLUDE\\winuser.h"








































#line 7979 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 7984 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 7985 "C:\\MSDEV\\INCLUDE\\winuser.h"

















#line 8003 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8004 "C:\\MSDEV\\INCLUDE\\winuser.h"






















typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport) int     __stdcall SetScrollInfo(HWND, int, LPCSCROLLINFO, BOOL);
__declspec(dllimport) BOOL    __stdcall GetScrollInfo(HWND, int, LPSCROLLINFO);
#line 8041 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8042 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8043 "C:\\MSDEV\\INCLUDE\\winuser.h"
















typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
#line 8071 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;
#line 8084 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 8091 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;


__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
    HWND hWnd,
    HWND hWndMDIClient ,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
#line 8108 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
    HWND hWnd,
    HWND hWndMDIClient ,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
#line 8119 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8124 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
LRESULT
__stdcall
DefMDIChildProcA(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
#line 8135 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
DefMDIChildProcW(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
#line 8145 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8150 "C:\\MSDEV\\INCLUDE\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
    HWND hWndClient,
    LPMSG lpMsg);

#line 8161 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
    HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
    LPSTR lpClassName,
    LPSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam
    );
#line 8185 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
    LPWSTR lpClassName,
    LPWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam
    );
#line 8202 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8207 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport) WORD    __stdcall TileWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND  * lpKids);
__declspec(dllimport) WORD    __stdcall CascadeWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids,  const HWND  * lpKids);
#line 8212 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8213 "C:\\MSDEV\\INCLUDE\\winuser.h"




































#line 8250 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8251 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8252 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef DWORD HELPPOLY;

typedef struct tagMULTIKEYHELPA {
    DWORD  mkSize;
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
#line 8265 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagMULTIKEYHELPW {
    DWORD  mkSize;
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;
#line 8272 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 8281 "C:\\MSDEV\\INCLUDE\\winuser.h"


typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
#line 8293 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;
#line 8304 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 8313 "C:\\MSDEV\\INCLUDE\\winuser.h"




































#line 8350 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
    HWND hWndMain,
    LPCSTR lpszHelp,
    UINT uCommand,
    DWORD dwData
    );
#line 8362 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
    HWND hWndMain,
    LPCWSTR lpszHelp,
    UINT uCommand,
    DWORD dwData
    );
#line 8373 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8378 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 8380 "C:\\MSDEV\\INCLUDE\\winuser.h"



















































































#line 8464 "C:\\MSDEV\\INCLUDE\\winuser.h"















#line 8480 "C:\\MSDEV\\INCLUDE\\winuser.h"















typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
#line 8514 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;
#line 8534 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 8543 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8544 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 8545 "C:\\MSDEV\\INCLUDE\\winuser.h"
















typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;


typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
#line 8580 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;
#line 8590 "C:\\MSDEV\\INCLUDE\\winuser.h"





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 8599 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;


typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
#line 8618 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;
#line 8630 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 8637 "C:\\MSDEV\\INCLUDE\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
#line 8651 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;
#line 8659 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 8666 "C:\\MSDEV\\INCLUDE\\winuser.h"
























__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
    LPDEVMODEA lpDevMode,
    DWORD dwFlags);
#line 8697 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
    LPDEVMODEW lpDevMode,
    DWORD dwFlags);
#line 8705 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8710 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
    LPCSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEA lpDevMode);
#line 8720 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
    LPCWSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEW lpDevMode);
#line 8729 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8734 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 8736 "C:\\MSDEV\\INCLUDE\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoA(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);
#line 8747 "C:\\MSDEV\\INCLUDE\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoW(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);
#line 8757 "C:\\MSDEV\\INCLUDE\\winuser.h"




#line 8762 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 8764 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;












typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;














typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;













typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;

























typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
#line 8878 "C:\\MSDEV\\INCLUDE\\winuser.h"

typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;
#line 8895 "C:\\MSDEV\\INCLUDE\\winuser.h"




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 8902 "C:\\MSDEV\\INCLUDE\\winuser.h"








typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;















__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
    DWORD dwLevel
    );









__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
    DWORD dwErrCode,
    DWORD dwType
    );


}
#line 8956 "C:\\MSDEV\\INCLUDE\\winuser.h"

#line 8958 "C:\\MSDEV\\INCLUDE\\winuser.h"
#line 126 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winnls.h"














extern "C" {
#line 17 "C:\\MSDEV\\INCLUDE\\winnls.h"














































































































































































































































































































































































#line 384 "C:\\MSDEV\\INCLUDE\\winnls.h"





































































































typedef DWORD LCTYPE;




typedef DWORD CALTYPE;




typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 536 "C:\\MSDEV\\INCLUDE\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 569 "C:\\MSDEV\\INCLUDE\\winnls.h"









typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);

typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);















#line 605 "C:\\MSDEV\\INCLUDE\\winnls.h"

















#line 623 "C:\\MSDEV\\INCLUDE\\winnls.h"





















__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
    UINT  CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
    UINT      CodePage,
    LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
    BYTE  TestChar);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
    UINT  CodePage,
    BYTE  TestChar);

__declspec(dllimport)
int
__stdcall
MultiByteToWideChar(
    UINT     CodePage,
    DWORD    dwFlags,
    LPCSTR   lpMultiByteStr,
    int      cchMultiByte,
    LPWSTR   lpWideCharStr,
    int      cchWideChar);

__declspec(dllimport)
int
__stdcall
WideCharToMultiByte(
    UINT     CodePage,
    DWORD    dwFlags,
    LPCWSTR  lpWideCharStr,
    int      cchWideChar,
    LPSTR    lpMultiByteStr,
    int      cchMultiByte,
    LPCSTR   lpDefaultChar,
    LPBOOL   lpUsedDefaultChar);






__declspec(dllimport)
int
__stdcall
CompareStringA(
    LCID     Locale,
    DWORD    dwCmpFlags,
    LPCSTR lpString1,
    int      cchCount1,
    LPCSTR lpString2,
    int      cchCount2);
__declspec(dllimport)
int
__stdcall
CompareStringW(
    LCID     Locale,
    DWORD    dwCmpFlags,
    LPCWSTR lpString1,
    int      cchCount1,
    LPCWSTR lpString2,
    int      cchCount2);




#line 734 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
int
__stdcall
LCMapStringA(
    LCID     Locale,
    DWORD    dwMapFlags,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPSTR  lpDestStr,
    int      cchDest);
__declspec(dllimport)
int
__stdcall
LCMapStringW(
    LCID     Locale,
    DWORD    dwMapFlags,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWSTR  lpDestStr,
    int      cchDest);




#line 760 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
    LCID     Locale,
    LCTYPE   LCType,
    LPSTR  lpLCData,
    int      cchData);
__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
    LCID     Locale,
    LCTYPE   LCType,
    LPWSTR  lpLCData,
    int      cchData);




#line 782 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
    LCID     Locale,
    LCTYPE   LCType,
    LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
    LCID     Locale,
    LCTYPE   LCType,
    LPCWSTR lpLCData);




#line 802 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpTime,
    LPCSTR lpFormat,
    LPSTR  lpTimeStr,
    int      cchTime);
__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpTime,
    LPCWSTR lpFormat,
    LPWSTR  lpTimeStr,
    int      cchTime);




#line 828 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetDateFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpDate,
    LPCSTR lpFormat,
    LPSTR  lpDateStr,
    int      cchDate);
__declspec(dllimport)
int
__stdcall
GetDateFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpDate,
    LPCWSTR lpFormat,
    LPWSTR  lpDateStr,
    int      cchDate);




#line 854 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    LPCSTR lpValue,
    const NUMBERFMTA *lpFormat,
    LPSTR  lpNumberStr,
    int      cchNumber);
__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    LPCWSTR lpValue,
    const NUMBERFMTW *lpFormat,
    LPWSTR  lpNumberStr,
    int      cchNumber);




#line 880 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    LPCSTR lpValue,
    const CURRENCYFMTA *lpFormat,
    LPSTR  lpCurrencyStr,
    int      cchCurrency);
__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    LPCWSTR lpValue,
    const CURRENCYFMTW *lpFormat,
    LPWSTR  lpCurrencyStr,
    int      cchCurrency);




#line 906 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
    CALINFO_ENUMPROCA lpCalInfoEnumProc,
    LCID              Locale,
    CALID             Calendar,
    CALTYPE           CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
    CALINFO_ENUMPROCW lpCalInfoEnumProc,
    LCID              Locale,
    CALID             Calendar,
    CALTYPE           CalType);




#line 928 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
    TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
    TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);




#line 948 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
    DATEFMT_ENUMPROCA lpDateFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
    DATEFMT_ENUMPROCW lpDateFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);




#line 968 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
    LCID   Locale,
    DWORD  dwFlags);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
    LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
    LCID  Locale
    );

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);




#line 1041 "C:\\MSDEV\\INCLUDE\\winnls.h"












__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCSTR   lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);

__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
    DWORD    dwInfoType,
    LPCWSTR  lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);


__declspec(dllimport)
int
__stdcall
FoldStringA(
    DWORD    dwMapFlags,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPSTR  lpDestStr,
    int      cchDest);
__declspec(dllimport)
int
__stdcall
FoldStringW(
    DWORD    dwMapFlags,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWSTR  lpDestStr,
    int      cchDest);




#line 1096 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
    LOCALE_ENUMPROCA lpLocaleEnumProc,
    DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
    LOCALE_ENUMPROCW lpLocaleEnumProc,
    DWORD            dwFlags);




#line 1114 "C:\\MSDEV\\INCLUDE\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
    CODEPAGE_ENUMPROCA lpCodePageEnumProc,
    DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
    CODEPAGE_ENUMPROCW lpCodePageEnumProc,
    DWORD              dwFlags);




#line 1132 "C:\\MSDEV\\INCLUDE\\winnls.h"



#line 1136 "C:\\MSDEV\\INCLUDE\\winnls.h"


}
#line 1140 "C:\\MSDEV\\INCLUDE\\winnls.h"

#line 1142 "C:\\MSDEV\\INCLUDE\\winnls.h"
#line 127 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\wincon.h"

























extern "C" {
#line 28 "C:\\MSDEV\\INCLUDE\\wincon.h"

typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;


















typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;











typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;















typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;





typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
    DWORD CtrlType
    );






























__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );




#line 221 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );




#line 245 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );




#line 269 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );




#line 295 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );




#line 321 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPWSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );




#line 347 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    LPWORD lpAttribute,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPCSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPCWSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );




#line 384 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    const WORD *lpAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    CHAR  cCharacter,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    WCHAR  cCharacter,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );




#line 421 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    WORD   wAttribute,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
    HANDLE hConsoleHandle,
    LPDWORD lpMode
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    LPDWORD lpNumberOfEvents
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
    HANDLE hConsoleHandle,
    DWORD dwMode
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
    HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );




#line 550 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    BOOL bAbsolute,
    const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    BOOL Add
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
    DWORD dwCtrlEvent,
    DWORD dwProcessGroupId
    );

__declspec(dllimport)
BOOL
__stdcall
AllocConsole( void );

__declspec(dllimport)
BOOL
__stdcall
FreeConsole( void );


__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize
    );




#line 614 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
    LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
    LPCWSTR lpConsoleTitle
    );




#line 632 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleA(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleW(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    LPVOID lpReserved
    );




#line 658 "C:\\MSDEV\\INCLUDE\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved
    );




#line 684 "C:\\MSDEV\\INCLUDE\\wincon.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    const SECURITY_ATTRIBUTES *lpSecurityAttributes,
    DWORD dwFlags,
    LPVOID lpScreenBufferData
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
    UINT wCodePageID
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
    UINT wCodePageID
    );


}
#line 725 "C:\\MSDEV\\INCLUDE\\wincon.h"

#line 727 "C:\\MSDEV\\INCLUDE\\wincon.h"
#line 128 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winver.h"
















extern "C" {
#line 19 "C:\\MSDEV\\INCLUDE\\winver.h"









































































































typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;



DWORD
__stdcall
VerFindFileA(
        DWORD uFlags,
        LPSTR szFileName,
        LPSTR szWinDir,
        LPSTR szAppDir,
        LPSTR szCurDir,
        PUINT lpuCurDirLen,
        LPSTR szDestDir,
        PUINT lpuDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
        DWORD uFlags,
        LPWSTR szFileName,
        LPWSTR szWinDir,
        LPWSTR szAppDir,
        LPWSTR szCurDir,
        PUINT lpuCurDirLen,
        LPWSTR szDestDir,
        PUINT lpuDestDirLen
        );




#line 172 "C:\\MSDEV\\INCLUDE\\winver.h"

DWORD
__stdcall
VerInstallFileA(
        DWORD uFlags,
        LPSTR szSrcFileName,
        LPSTR szDestFileName,
        LPSTR szSrcDir,
        LPSTR szDestDir,
        LPSTR szCurDir,
        LPSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
        DWORD uFlags,
        LPWSTR szSrcFileName,
        LPWSTR szDestFileName,
        LPWSTR szSrcDir,
        LPWSTR szDestDir,
        LPWSTR szCurDir,
        LPWSTR szTmpFile,
        PUINT lpuTmpFileLen
        );




#line 202 "C:\\MSDEV\\INCLUDE\\winver.h"


DWORD
__stdcall
GetFileVersionInfoSizeA(
        LPSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      

DWORD
__stdcall
GetFileVersionInfoSizeW(
        LPWSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      




#line 222 "C:\\MSDEV\\INCLUDE\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
        LPSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      

BOOL
__stdcall
GetFileVersionInfoW(
        LPWSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      




#line 246 "C:\\MSDEV\\INCLUDE\\winver.h"

DWORD
__stdcall
VerLanguageNameA(
        DWORD wLang,
        LPSTR szLang,
        DWORD nSize
        );
DWORD
__stdcall
VerLanguageNameW(
        DWORD wLang,
        LPWSTR szLang,
        DWORD nSize
        );




#line 266 "C:\\MSDEV\\INCLUDE\\winver.h"

BOOL
__stdcall
VerQueryValueA(
        const LPVOID pBlock,
        LPSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
        const LPVOID pBlock,
        LPWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );




#line 288 "C:\\MSDEV\\INCLUDE\\winver.h"

#line 290 "C:\\MSDEV\\INCLUDE\\winver.h"


}
#line 294 "C:\\MSDEV\\INCLUDE\\winver.h"

#line 296 "C:\\MSDEV\\INCLUDE\\winver.h"
#line 129 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winreg.h"




















extern "C" {
#line 23 "C:\\MSDEV\\INCLUDE\\winreg.h"









typedef ACCESS_MASK REGSAM;





struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;



















struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 86 "C:\\MSDEV\\INCLUDE\\winreg.h"

typedef
DWORD _cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 124 "C:\\MSDEV\\INCLUDE\\winreg.h"

#line 126 "C:\\MSDEV\\INCLUDE\\winreg.h"


#line 129 "C:\\MSDEV\\INCLUDE\\winreg.h"













__declspec(dllimport)
LONG
__stdcall
RegCloseKey (
    HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryA (
    LPSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryW (
    LPWSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );




#line 170 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );




#line 192 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD Reserved,
    LPSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD Reserved,
    LPWSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );




#line 226 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyA (
    HKEY hKey,
    LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );




#line 246 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteValueA (
    HKEY hKey,
    LPCSTR lpValueName
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteValueW (
    HKEY hKey,
    LPCWSTR lpValueName
    );




#line 266 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    DWORD cbName
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    DWORD cbName
    );




#line 290 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );




#line 322 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumValueA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumValueW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );




#line 354 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegFlushKey (
    HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegGetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPDWORD lpcbSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegLoadKeyA (
    HKEY    hKey,
    LPCSTR  lpSubKey,
    LPCSTR  lpFile
    );
__declspec(dllimport)
LONG
__stdcall
RegLoadKeyW (
    HKEY    hKey,
    LPCWSTR  lpSubKey,
    LPCWSTR  lpFile
    );




#line 393 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegNotifyChangeKeyValue (
    HKEY hKey,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    HANDLE hEvent,
    BOOL fAsynchronus
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );




#line 426 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );




#line 452 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyA (
    HKEY hKey,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyW (
    HKEY hKey,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );




#line 492 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPSTR lpValue,
    PLONG   lpcbValue
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPWSTR lpValue,
    PLONG   lpcbValue
    );




#line 516 "C:\\MSDEV\\INCLUDE\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesA (
    HKEY hKey,
    PVALENTA val_list,
    DWORD num_vals,
    LPSTR lpValueBuf,
    LPDWORD ldwTotsize
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesW (
    HKEY hKey,
    PVALENTW val_list,
    DWORD num_vals,
    LPWSTR lpValueBuf,
    LPDWORD ldwTotsize
    );




#line 543 "C:\\MSDEV\\INCLUDE\\winreg.h"
#line 544 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );




#line 572 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyA (
    HKEY     hKey,
    LPCSTR  lpSubKey,
    LPCSTR  lpNewFile,
    LPCSTR  lpOldFile
    );
__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyW (
    HKEY     hKey,
    LPCWSTR  lpSubKey,
    LPCWSTR  lpNewFile,
    LPCWSTR  lpOldFile
    );




#line 596 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    DWORD   dwFlags
    );
__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    DWORD   dwFlags
    );




#line 618 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSaveKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 640 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegSetValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD dwType,
    LPCSTR lpData,
    DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD dwType,
    LPCWSTR lpData,
    DWORD cbData
    );




#line 675 "C:\\MSDEV\\INCLUDE\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegSetValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );




#line 704 "C:\\MSDEV\\INCLUDE\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyA (
    HKEY    hKey,
    LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyW (
    HKEY    hKey,
    LPCWSTR lpSubKey
    );




#line 724 "C:\\MSDEV\\INCLUDE\\winreg.h"





__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );




#line 754 "C:\\MSDEV\\INCLUDE\\winreg.h"


__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
    LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
    LPWSTR lpMachineName
    );




#line 773 "C:\\MSDEV\\INCLUDE\\winreg.h"


}
#line 777 "C:\\MSDEV\\INCLUDE\\winreg.h"


#line 780 "C:\\MSDEV\\INCLUDE\\winreg.h"
#line 130 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winnetwk.h"



























extern "C" {
#line 30 "C:\\MSDEV\\INCLUDE\\winnetwk.h"








































#line 71 "C:\\MSDEV\\INCLUDE\\winnetwk.h"






#line 78 "C:\\MSDEV\\INCLUDE\\winnetwk.h"









#line 88 "C:\\MSDEV\\INCLUDE\\winnetwk.h"













#line 102 "C:\\MSDEV\\INCLUDE\\winnetwk.h"



#line 106 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 134 "C:\\MSDEV\\INCLUDE\\winnetwk.h"





















#line 156 "C:\\MSDEV\\INCLUDE\\winnetwk.h"


DWORD __stdcall
WNetAddConnectionA(
     LPCSTR   lpRemoteName,
     LPCSTR   lpPassword,
     LPCSTR   lpLocalName
    );
DWORD __stdcall
WNetAddConnectionW(
     LPCWSTR   lpRemoteName,
     LPCWSTR   lpPassword,
     LPCWSTR   lpLocalName
    );




#line 175 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetAddConnection2A(
     LPNETRESOURCEA lpNetResource,
     LPCSTR       lpPassword,
     LPCSTR       lpUserName,
     DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection2W(
     LPNETRESOURCEW lpNetResource,
     LPCWSTR       lpPassword,
     LPCWSTR       lpUserName,
     DWORD          dwFlags
    );




#line 195 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetAddConnection3A(
     HWND           hwndOwner,
     LPNETRESOURCEA lpNetResource,
     LPCSTR       lpPassword,
     LPCSTR       lpUserName,
     DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection3W(
     HWND           hwndOwner,
     LPNETRESOURCEW lpNetResource,
     LPCWSTR       lpPassword,
     LPCWSTR       lpUserName,
     DWORD          dwFlags
    );




#line 217 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetCancelConnectionA(
     LPCSTR lpName,
     BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnectionW(
     LPCWSTR lpName,
     BOOL     fForce
    );




#line 233 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetCancelConnection2A(
     LPCSTR lpName,
     DWORD    dwFlags,
     BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnection2W(
     LPCWSTR lpName,
     DWORD    dwFlags,
     BOOL     fForce
    );




#line 251 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetGetConnectionA(
     LPCSTR lpLocalName,
     LPSTR  lpRemoteName,
     LPDWORD  lpnLength
    );
DWORD __stdcall
WNetGetConnectionW(
     LPCWSTR lpLocalName,
     LPWSTR  lpRemoteName,
     LPDWORD  lpnLength
    );




#line 269 "C:\\MSDEV\\INCLUDE\\winnetwk.h"



DWORD __stdcall
WNetUseConnectionA(
    HWND            hwndOwner,
    LPNETRESOURCEA  lpNetResource,
    LPCSTR        lpUserID,
    LPCSTR        lpPassword,
    DWORD           dwFlags,
    LPSTR         lpAccessName,
    LPDWORD         lpBufferSize,
    LPDWORD         lpResult
    );
DWORD __stdcall
WNetUseConnectionW(
    HWND            hwndOwner,
    LPNETRESOURCEW  lpNetResource,
    LPCWSTR        lpUserID,
    LPCWSTR        lpPassword,
    DWORD           dwFlags,
    LPWSTR         lpAccessName,
    LPDWORD         lpBufferSize,
    LPDWORD         lpResult
    );




#line 299 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetSetConnectionA(
    LPCSTR    lpName,
    DWORD       dwProperties,
    LPVOID      pvValues
    );
DWORD __stdcall
WNetSetConnectionW(
    LPCWSTR    lpName,
    DWORD       dwProperties,
    LPVOID      pvValues
    );




#line 317 "C:\\MSDEV\\INCLUDE\\winnetwk.h"
#line 318 "C:\\MSDEV\\INCLUDE\\winnetwk.h"






DWORD __stdcall
WNetConnectionDialog(
    HWND  hwnd,
    DWORD dwType
    );

DWORD __stdcall
WNetDisconnectDialog(
    HWND  hwnd,
    DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 358 "C:\\MSDEV\\INCLUDE\\winnetwk.h"














DWORD __stdcall
WNetConnectionDialog1A(
    LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetConnectionDialog1W(
    LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 385 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 407 "C:\\MSDEV\\INCLUDE\\winnetwk.h"




DWORD __stdcall
WNetDisconnectDialog1A(
    LPDISCDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetDisconnectDialog1W(
    LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 424 "C:\\MSDEV\\INCLUDE\\winnetwk.h"
#line 425 "C:\\MSDEV\\INCLUDE\\winnetwk.h"






DWORD __stdcall
WNetOpenEnumA(
     DWORD          dwScope,
     DWORD          dwType,
     DWORD          dwUsage,
     LPNETRESOURCEA lpNetResource,
     LPHANDLE       lphEnum
    );
DWORD __stdcall
WNetOpenEnumW(
     DWORD          dwScope,
     DWORD          dwType,
     DWORD          dwUsage,
     LPNETRESOURCEW lpNetResource,
     LPHANDLE       lphEnum
    );




#line 452 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetEnumResourceA(
     HANDLE  hEnum,
     LPDWORD lpcCount,
     LPVOID  lpBuffer,
     LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetEnumResourceW(
     HANDLE  hEnum,
     LPDWORD lpcCount,
     LPVOID  lpBuffer,
     LPDWORD lpBufferSize
    );




#line 472 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetCloseEnum(
    HANDLE   hEnum
    );










typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 500 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 518 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

DWORD __stdcall
WNetGetUniversalNameA(
     LPCSTR lpLocalPath,
     DWORD    dwInfoLevel,
     LPVOID   lpBuffer,
     LPDWORD  lpBufferSize
     );
DWORD __stdcall
WNetGetUniversalNameW(
     LPCWSTR lpLocalPath,
     DWORD    dwInfoLevel,
     LPVOID   lpBuffer,
     LPDWORD  lpBufferSize
     );




#line 538 "C:\\MSDEV\\INCLUDE\\winnetwk.h"





DWORD __stdcall
WNetGetUserA(
     LPCSTR  lpName,
     LPSTR   lpUserName,
     LPDWORD   lpnLength
    );
DWORD __stdcall
WNetGetUserW(
     LPCWSTR  lpName,
     LPWSTR   lpUserName,
     LPDWORD   lpnLength
    );




#line 560 "C:\\MSDEV\\INCLUDE\\winnetwk.h"













#line 574 "C:\\MSDEV\\INCLUDE\\winnetwk.h"



DWORD __stdcall
WNetGetProviderNameA(
    DWORD   dwNetType,
    LPSTR lpProviderName,
    LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetGetProviderNameW(
    DWORD   dwNetType,
    LPWSTR lpProviderName,
    LPDWORD lpBufferSize
    );




#line 594 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    DWORD dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





DWORD __stdcall
WNetGetNetworkInformationA(
    LPCSTR          lpProvider,
    LPNETINFOSTRUCT   lpNetInfoStruct
    );
DWORD __stdcall
WNetGetNetworkInformationW(
    LPCWSTR          lpProvider,
    LPNETINFOSTRUCT   lpNetInfoStruct
    );




#line 625 "C:\\MSDEV\\INCLUDE\\winnetwk.h"





typedef UINT ( __stdcall *PFNGETPROFILEPATHA) (
    LPCSTR    pszUsername,
    LPSTR     pszBuffer,
    UINT        cbBuffer
    );
typedef UINT ( __stdcall *PFNGETPROFILEPATHW) (
    LPCWSTR    pszUsername,
    LPWSTR     pszBuffer,
    UINT        cbBuffer
    );




#line 645 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

typedef UINT ( __stdcall *PFNRECONCILEPROFILEA) (
    LPCSTR    pszCentralFile,
    LPCSTR    pszLocalFile,
    DWORD       dwFlags
    );
typedef UINT ( __stdcall *PFNRECONCILEPROFILEW) (
    LPCWSTR    pszCentralFile,
    LPCWSTR    pszLocalFile,
    DWORD       dwFlags
    );




#line 661 "C:\\MSDEV\\INCLUDE\\winnetwk.h"









typedef BOOL ( __stdcall *PFNPROCESSPOLICIESA) (
    HWND        hwnd,
    LPCSTR    pszPath,
    LPCSTR    pszUsername,
    LPCSTR    pszComputerName,
    DWORD       dwFlags
    );
typedef BOOL ( __stdcall *PFNPROCESSPOLICIESW) (
    HWND        hwnd,
    LPCWSTR    pszPath,
    LPCWSTR    pszUsername,
    LPCWSTR    pszComputerName,
    DWORD       dwFlags
    );




#line 689 "C:\\MSDEV\\INCLUDE\\winnetwk.h"


#line 692 "C:\\MSDEV\\INCLUDE\\winnetwk.h"






DWORD __stdcall
WNetGetLastErrorA(
     LPDWORD    lpError,
     LPSTR    lpErrorBuf,
     DWORD      nErrorBufSize,
     LPSTR    lpNameBuf,
     DWORD      nNameBufSize
    );
DWORD __stdcall
WNetGetLastErrorW(
     LPDWORD    lpError,
     LPWSTR    lpErrorBuf,
     DWORD      nErrorBufSize,
     LPWSTR    lpNameBuf,
     DWORD      nNameBufSize
    );




#line 719 "C:\\MSDEV\\INCLUDE\\winnetwk.h"





























#line 749 "C:\\MSDEV\\INCLUDE\\winnetwk.h"





























#line 779 "C:\\MSDEV\\INCLUDE\\winnetwk.h"







typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






DWORD __stdcall
MultinetGetConnectionPerformanceA(
        LPNETRESOURCEA lpNetResource,
        LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );
DWORD __stdcall
MultinetGetConnectionPerformanceW(
        LPNETRESOURCEW lpNetResource,
        LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );




#line 814 "C:\\MSDEV\\INCLUDE\\winnetwk.h"
#line 815 "C:\\MSDEV\\INCLUDE\\winnetwk.h"


}
#line 819 "C:\\MSDEV\\INCLUDE\\winnetwk.h"

#line 821 "C:\\MSDEV\\INCLUDE\\winnetwk.h"
#line 131 "C:\\MSDEV\\INCLUDE\\windows.h"









































#line 1 "C:\\MSDEV\\INCLUDE\\winsvc.h"






























#line 32 "C:\\MSDEV\\INCLUDE\\winsvc.h"


extern "C" {
#line 36 "C:\\MSDEV\\INCLUDE\\winsvc.h"




































#line 73 "C:\\MSDEV\\INCLUDE\\winsvc.h"



























































































typedef HANDLE      SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

typedef DWORD       SERVICE_STATUS_HANDLE;





typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;







typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR          lpServiceName;
    LPSTR          lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR         lpServiceName;
    LPWSTR         lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 206 "C:\\MSDEV\\INCLUDE\\winsvc.h"






typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 231 "C:\\MSDEV\\INCLUDE\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 267 "C:\\MSDEV\\INCLUDE\\winsvc.h"







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 289 "C:\\MSDEV\\INCLUDE\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 310 "C:\\MSDEV\\INCLUDE\\winsvc.h"





typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );







__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword,
    LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword,
    LPCWSTR     lpDisplayName
    );




#line 362 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
    SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
    SC_HANDLE           hService,
    DWORD               dwControl,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
    SC_HANDLE    hSCManager,
    LPCSTR     lpServiceName,
    LPCSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
    SC_HANDLE    hSCManager,
    LPCWSTR     lpServiceName,
    LPCWSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword
    );




#line 420 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
    SC_HANDLE   hService
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );




#line 455 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );




#line 487 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpDisplayName,
    LPSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpDisplayName,
    LPWSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );




#line 511 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpServiceName,
    LPSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpServiceName,
    LPWSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );




#line 535 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
    SC_HANDLE   hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
    BOOL     BootAcceptable
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
    LPCWSTR lpMachineName,
    LPCWSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );




#line 571 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
    SC_HANDLE   hSCManager,
    LPCSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
    SC_HANDLE   hSCManager,
    LPCWSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );




#line 593 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );




#line 617 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );




#line 641 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
    SC_HANDLE           hService,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
    LPCSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
    LPCWSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );




#line 680 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
    SERVICE_STATUS_HANDLE   hServiceStatus,
    LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
    LPSERVICE_TABLE_ENTRYA    lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
    LPSERVICE_TABLE_ENTRYW    lpServiceStartTable
    );




#line 715 "C:\\MSDEV\\INCLUDE\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCWSTR             *lpServiceArgVectors
    );




#line 738 "C:\\MSDEV\\INCLUDE\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
    SC_LOCK     ScLock
    );



}
#line 750 "C:\\MSDEV\\INCLUDE\\winsvc.h"

#line 752 "C:\\MSDEV\\INCLUDE\\winsvc.h"
#line 173 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 174 "C:\\MSDEV\\INCLUDE\\windows.h"



#line 1 "C:\\MSDEV\\INCLUDE\\mcx.h"











typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;









































#line 103 "C:\\MSDEV\\INCLUDE\\mcx.h"
#line 178 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 179 "C:\\MSDEV\\INCLUDE\\windows.h"


#line 1 "C:\\MSDEV\\INCLUDE\\imm.h"










extern "C" {
#line 13 "C:\\MSDEV\\INCLUDE\\imm.h"


typedef DWORD     HIMC;
typedef DWORD     HIMCC;

typedef HKL   *LPHKL;
typedef UINT  *LPUINT;


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 66 "C:\\MSDEV\\INCLUDE\\imm.h"





typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 90 "C:\\MSDEV\\INCLUDE\\imm.h"




HKL  __stdcall ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);




#line 101 "C:\\MSDEV\\INCLUDE\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd(HWND);

UINT __stdcall ImmGetDescriptionA(HKL, LPSTR, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW(HKL, LPWSTR, UINT uBufLen);




#line 111 "C:\\MSDEV\\INCLUDE\\imm.h"

UINT __stdcall ImmGetIMEFileNameA(HKL, LPSTR, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW(HKL, LPWSTR, UINT uBufLen);




#line 119 "C:\\MSDEV\\INCLUDE\\imm.h"

DWORD __stdcall ImmGetProperty(HKL, DWORD);


BOOL __stdcall ImmIsIME(HKL);

BOOL __stdcall ImmSimulateHotKey(HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext(HIMC);
HIMC __stdcall ImmGetContext(HWND);
BOOL __stdcall ImmReleaseContext(HWND, HIMC);
HIMC __stdcall ImmAssociateContext(HWND, HIMC);

LONG  __stdcall ImmGetCompositionStringA(HIMC, DWORD, LPVOID, DWORD);
LONG  __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID, DWORD);




#line 140 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);
BOOL  __stdcall ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);




#line 148 "C:\\MSDEV\\INCLUDE\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount);




#line 156 "C:\\MSDEV\\INCLUDE\\imm.h"

DWORD __stdcall ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);




#line 164 "C:\\MSDEV\\INCLUDE\\imm.h"

DWORD __stdcall ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR, DWORD dwBufLen);




#line 172 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL __stdcall ImmGetConversionStatus(HIMC, LPDWORD, LPDWORD);
BOOL __stdcall ImmSetConversionStatus(HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus(HIMC);
BOOL __stdcall ImmSetOpenStatus(HIMC, BOOL);



BOOL __stdcall ImmGetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __stdcall ImmGetCompositionFontW(HIMC, LPLOGFONTW);




#line 187 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __stdcall ImmSetCompositionFontW(HIMC, LPLOGFONTW);




#line 195 "C:\\MSDEV\\INCLUDE\\imm.h"
#line 196 "C:\\MSDEV\\INCLUDE\\imm.h"
#line 197 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL    __stdcall ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID);
BOOL    __stdcall ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);




#line 205 "C:\\MSDEV\\INCLUDE\\imm.h"

LRESULT __stdcall ImmEscapeA(HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW(HKL, HIMC, UINT, LPVOID);




#line 213 "C:\\MSDEV\\INCLUDE\\imm.h"

DWORD   __stdcall ImmGetConversionListA(HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);
DWORD   __stdcall ImmGetConversionListW(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);




#line 221 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL    __stdcall ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);


BOOL __stdcall ImmGetStatusWindowPos(HIMC, LPPOINT);
BOOL __stdcall ImmSetStatusWindowPos(HIMC, LPPOINT);
BOOL __stdcall ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __stdcall ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM);
BOOL __stdcall ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM);

BOOL __stdcall ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);




#line 239 "C:\\MSDEV\\INCLUDE\\imm.h"

UINT __stdcall ImmGetVirtualKey(HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);




#line 249 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL __stdcall ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);




#line 257 "C:\\MSDEV\\INCLUDE\\imm.h"

BOOL __stdcall ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);




#line 265 "C:\\MSDEV\\INCLUDE\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA);
UINT __stdcall ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW);




#line 273 "C:\\MSDEV\\INCLUDE\\imm.h"

UINT __stdcall ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);




#line 281 "C:\\MSDEV\\INCLUDE\\imm.h"















































































































































































































































































































}
#line 586 "C:\\MSDEV\\INCLUDE\\imm.h"


#line 589 "C:\\MSDEV\\INCLUDE\\imm.h"
#line 182 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 183 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 184 "C:\\MSDEV\\INCLUDE\\windows.h"



#pragma warning(default:4001)
#line 189 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 190 "C:\\MSDEV\\INCLUDE\\windows.h"

#line 192 "C:\\MSDEV\\INCLUDE\\windows.h"

#line 194 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 195 "C:\\MSDEV\\INCLUDE\\windows.h"
#line 129 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"

struct HKEY__;
typedef struct HKEY__ *HKEY;


	#line 1 "C:\\MSDEV\\INCLUDE\\commctrl.h"
























#line 26 "C:\\MSDEV\\INCLUDE\\commctrl.h"
#line 27 "C:\\MSDEV\\INCLUDE\\commctrl.h"













#line 41 "C:\\MSDEV\\INCLUDE\\commctrl.h"
#line 42 "C:\\MSDEV\\INCLUDE\\commctrl.h"


#line 1 "C:\\MSDEV\\INCLUDE\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#pragma pack(1)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 45 "C:\\MSDEV\\INCLUDE\\commctrl.h"
#line 46 "C:\\MSDEV\\INCLUDE\\commctrl.h"


extern "C" {
#line 50 "C:\\MSDEV\\INCLUDE\\commctrl.h"






















#line 1 "C:\\MSDEV\\INCLUDE\\prsht.h"








































extern "C" {
#line 43 "C:\\MSDEV\\INCLUDE\\prsht.h"







#line 51 "C:\\MSDEV\\INCLUDE\\prsht.h"
#line 52 "C:\\MSDEV\\INCLUDE\\prsht.h"



struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
#line 62 "C:\\MSDEV\\INCLUDE\\prsht.h"

typedef UINT (__stdcall  * LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA  *ppsp);
typedef UINT (__stdcall  * LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW  *ppsp);





#line 71 "C:\\MSDEV\\INCLUDE\\prsht.h"

















typedef struct _PROPSHEETPAGEA {
        DWORD           dwSize;
        DWORD           dwFlags;
        HINSTANCE       hInstance;
        union {
            LPCSTR          pszTemplate;

            LPCDLGTEMPLATE  pResource;


#line 99 "C:\\MSDEV\\INCLUDE\\prsht.h"
        } ;
        union {
            HICON       hIcon;
            LPCSTR      pszIcon;
        } ;
        LPCSTR          pszTitle;
        DLGPROC         pfnDlgProc;
        LPARAM          lParam;
        LPFNPSPCALLBACKA pfnCallback;
        UINT  * pcRefParent;
} PROPSHEETPAGEA,  *LPPROPSHEETPAGEA;
typedef const PROPSHEETPAGEA  *LPCPROPSHEETPAGEA;

typedef struct _PROPSHEETPAGEW {
        DWORD           dwSize;
        DWORD           dwFlags;
        HINSTANCE       hInstance;
        union {
            LPCWSTR          pszTemplate;

            LPCDLGTEMPLATE  pResource;


#line 123 "C:\\MSDEV\\INCLUDE\\prsht.h"
        };
        union {
            HICON       hIcon;
            LPCWSTR      pszIcon;
        };
        LPCWSTR          pszTitle;
        DLGPROC         pfnDlgProc;
        LPARAM          lParam;
        LPFNPSPCALLBACKW pfnCallback;
        UINT  * pcRefParent;
} PROPSHEETPAGEW,  *LPPROPSHEETPAGEW;
typedef const PROPSHEETPAGEW  *LPCPROPSHEETPAGEW;









#line 145 "C:\\MSDEV\\INCLUDE\\prsht.h"















typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);

typedef struct _PROPSHEETHEADERA {
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union {
            HICON       hIcon;
            LPCSTR      pszIcon;
        };
        LPCSTR          pszCaption;


        UINT            nPages;
        union {
            UINT        nStartPage;
            LPCSTR      pStartPage;
        };
        union {
            LPCPROPSHEETPAGEA ppsp;
            HPROPSHEETPAGE  *phpage;
        };
        PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA,  *LPPROPSHEETHEADERA;
typedef const PROPSHEETHEADERA  *LPCPROPSHEETHEADERA;

typedef struct _PROPSHEETHEADERW {
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union {
            HICON       hIcon;
            LPCWSTR     pszIcon;
        };
        LPCWSTR         pszCaption;


        UINT            nPages;
        union {
            UINT        nStartPage;
            LPCWSTR     pStartPage;
        };
        union {
            LPCPROPSHEETPAGEW ppsp;
            HPROPSHEETPAGE  *phpage;
        };
        PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW,  *LPPROPSHEETHEADERW;
typedef const PROPSHEETHEADERW  *LPCPROPSHEETHEADERW;









#line 221 "C:\\MSDEV\\INCLUDE\\prsht.h"





__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW);
__declspec(dllimport) BOOL           __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);
__declspec(dllimport) int            __stdcall PropertySheetA(LPCPROPSHEETHEADERA);
__declspec(dllimport) int            __stdcall PropertySheetW(LPCPROPSHEETHEADERW);







#line 239 "C:\\MSDEV\\INCLUDE\\prsht.h"



typedef BOOL (__stdcall  * LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall  * LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY,  *LPPSHNOTIFY;

















































































#line 333 "C:\\MSDEV\\INCLUDE\\prsht.h"













































#line 379 "C:\\MSDEV\\INCLUDE\\prsht.h"









































}
#line 422 "C:\\MSDEV\\INCLUDE\\prsht.h"


#line 425 "C:\\MSDEV\\INCLUDE\\prsht.h"
#line 73 "C:\\MSDEV\\INCLUDE\\commctrl.h"






#line 80 "C:\\MSDEV\\INCLUDE\\commctrl.h"


__declspec(dllimport) void __stdcall InitCommonControls(void);













































































struct _IMAGELIST;
typedef struct _IMAGELIST * HIMAGELIST;











__declspec(dllimport) HIMAGELIST  __stdcall ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow);
__declspec(dllimport) BOOL        __stdcall ImageList_Destroy(HIMAGELIST himl);
__declspec(dllimport) int         __stdcall ImageList_GetImageCount(HIMAGELIST himl);
__declspec(dllimport) int         __stdcall ImageList_Add(HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask);
__declspec(dllimport) int         __stdcall ImageList_ReplaceIcon(HIMAGELIST himl, int i, HICON hicon);
__declspec(dllimport) COLORREF    __stdcall ImageList_SetBkColor(HIMAGELIST himl, COLORREF clrBk);
__declspec(dllimport) COLORREF    __stdcall ImageList_GetBkColor(HIMAGELIST himl);
__declspec(dllimport) BOOL        __stdcall ImageList_SetOverlayImage(HIMAGELIST himl, int iImage, int iOverlay);

















__declspec(dllimport) BOOL __stdcall ImageList_Draw(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, UINT fStyle);




__declspec(dllimport) BOOL        __stdcall ImageList_Replace(HIMAGELIST himl, int i, HBITMAP hbmImage, HBITMAP hbmMask);
__declspec(dllimport) int         __stdcall ImageList_AddMasked(HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask);
__declspec(dllimport) BOOL        __stdcall ImageList_DrawEx(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, UINT fStyle);
__declspec(dllimport) BOOL        __stdcall ImageList_Remove(HIMAGELIST himl, int i);
__declspec(dllimport) HICON       __stdcall ImageList_GetIcon(HIMAGELIST himl, int i, UINT flags);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_LoadImageA(HINSTANCE hi, LPCSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_LoadImageW(HINSTANCE hi, LPCWSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags);





#line 216 "C:\\MSDEV\\INCLUDE\\commctrl.h"

__declspec(dllimport) BOOL        __stdcall ImageList_BeginDrag(HIMAGELIST himlTrack, int iTrack, int dxHotspot, int dyHotspot);
__declspec(dllimport) void        __stdcall ImageList_EndDrag();
__declspec(dllimport) BOOL        __stdcall ImageList_DragEnter(HWND hwndLock, int x, int y);
__declspec(dllimport) BOOL        __stdcall ImageList_DragLeave(HWND hwndLock);
__declspec(dllimport) BOOL        __stdcall ImageList_DragMove(int x, int y);
__declspec(dllimport) BOOL        __stdcall ImageList_SetDragCursorImage(HIMAGELIST himlDrag, int iDrag, int dxHotspot, int dyHotspot);

__declspec(dllimport) BOOL        __stdcall ImageList_DragShowNolock(BOOL fShow);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_GetDragImage(POINT * ppt,POINT * pptHotspot);










typedef struct _IMAGEINFO
{
    HBITMAP hbmImage;
    HBITMAP hbmMask;
    int     Unused1;
    int     Unused2;
    RECT    rcImage;
} IMAGEINFO;

__declspec(dllimport) BOOL        __stdcall ImageList_GetIconSize(HIMAGELIST himl, int  *cx, int  *cy);
__declspec(dllimport) BOOL        __stdcall ImageList_SetIconSize(HIMAGELIST himl, int cx, int cy);
__declspec(dllimport) BOOL        __stdcall ImageList_GetImageInfo(HIMAGELIST himl, int i, IMAGEINFO * pImageInfo);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_Merge(HIMAGELIST himl1, int i1, HIMAGELIST himl2, int i2, int dx, int dy);

#line 251 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 253 "C:\\MSDEV\\INCLUDE\\commctrl.h"














#line 268 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 272 "C:\\MSDEV\\INCLUDE\\commctrl.h"





typedef struct _HD_ITEMA
{
    UINT    mask;
    int     cxy;
    LPSTR   pszText;
    HBITMAP hbm;
    int     cchTextMax;
    int     fmt;
    LPARAM  lParam;
} HD_ITEMA;

typedef struct _HD_ITEMW
{
    UINT    mask;
    int     cxy;
    LPWSTR   pszText;
    HBITMAP hbm;
    int     cchTextMax;
    int     fmt;
    LPARAM  lParam;
} HD_ITEMW;





#line 304 "C:\\MSDEV\\INCLUDE\\commctrl.h"
































#line 337 "C:\\MSDEV\\INCLUDE\\commctrl.h"

















#line 355 "C:\\MSDEV\\INCLUDE\\commctrl.h"












#line 368 "C:\\MSDEV\\INCLUDE\\commctrl.h"





typedef struct _HD_LAYOUT
{
    RECT * prc;
    WINDOWPOS * pwpos;
} HD_LAYOUT;
















typedef struct _HD_HITTESTINFO
{
    POINT pt;
    UINT flags;
    int iItem;
} HD_HITTESTINFO;






































#line 439 "C:\\MSDEV\\INCLUDE\\commctrl.h"


typedef struct _HD_NOTIFY
{
    NMHDR   hdr;
    int     iItem;
    int     iButton;
    HD_ITEMA * pitem;
} HD_NOTIFYA;

typedef struct _HD_NOTIFYW
{
    NMHDR   hdr;
    int     iItem;
    int     iButton;
    HD_ITEMW * pitem;
} HD_NOTIFYW;





#line 462 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 464 "C:\\MSDEV\\INCLUDE\\commctrl.h"














#line 479 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 483 "C:\\MSDEV\\INCLUDE\\commctrl.h"

typedef struct _TBBUTTON {
    int iBitmap;
    int idCommand;
    BYTE fsState;
    BYTE fsStyle;

    BYTE bReserved[2];
#line 492 "C:\\MSDEV\\INCLUDE\\commctrl.h"
    DWORD dwData;
    int iString;
} TBBUTTON, * PTBBUTTON, * LPTBBUTTON;
typedef const TBBUTTON * LPCTBBUTTON;

typedef struct _COLORMAP {
    COLORREF from;
    COLORREF to;
} COLORMAP, * LPCOLORMAP;

__declspec(dllimport) HWND __stdcall CreateToolbarEx(HWND hwnd, DWORD ws, UINT wID, int nBitmaps,
                        HINSTANCE hBMInst, UINT wBMID, LPCTBBUTTON lpButtons,
                        int iNumButtons, int dxButton, int dyButton,
                        int dxBitmap, int dyBitmap, UINT uStructSize);

__declspec(dllimport) HBITMAP __stdcall CreateMappedBitmap(HINSTANCE hInstance, int idBitmap,
                                  UINT wFlags, LPCOLORMAP lpColorMap,
                                  int iNumMaps);



































typedef struct tagTBADDBITMAP {
        HINSTANCE       hInst;
        UINT            nID;
} TBADDBITMAP, *LPTBADDBITMAP;









































#line 591 "C:\\MSDEV\\INCLUDE\\commctrl.h"










typedef struct tagTBSAVEPARAMSA {
    HKEY hkr;
    LPCSTR pszSubKey;
    LPCSTR pszValueName;
} TBSAVEPARAMSA;

typedef struct tagTBSAVEPARAMSW {
    HKEY hkr;
    LPCWSTR pszSubKey;
    LPCWSTR pszValueName;
} TBSAVEPARAMSW;





#line 618 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 620 "C:\\MSDEV\\INCLUDE\\commctrl.h"

































#line 654 "C:\\MSDEV\\INCLUDE\\commctrl.h"

typedef struct {
        HINSTANCE       hInstOld;
        UINT            nIDOld;
        HINSTANCE       hInstNew;
        UINT            nIDNew;
        int             nButtons;
} TBREPLACEBITMAP, *LPTBREPLACEBITMAP;























#line 686 "C:\\MSDEV\\INCLUDE\\commctrl.h"

typedef struct tagTBNOTIFYA {
    NMHDR   hdr;
    int     iItem;
    TBBUTTON tbButton;
    int     cchText;
    LPSTR   pszText;
} TBNOTIFYA,  *LPTBNOTIFYA;

typedef struct tagTBNOTIFYW {
    NMHDR   hdr;
    int     iItem;
    TBBUTTON tbButton;
    int     cchText;
    LPWSTR   pszText;
} TBNOTIFYW,  *LPTBNOTIFYW;







#line 710 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 712 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 714 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 730 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 734 "C:\\MSDEV\\INCLUDE\\commctrl.h"

typedef struct tagTOOLINFOA {
    UINT cbSize;
    UINT uFlags;
    HWND hwnd;
    UINT uId;
    RECT rect;
    HINSTANCE hinst;
    LPSTR lpszText;
} TOOLINFOA,  *PTOOLINFOA,  *LPTOOLINFOA;

typedef struct tagTOOLINFOW {
    UINT cbSize;
    UINT uFlags;
    HWND hwnd;
    UINT uId;
    RECT rect;
    HINSTANCE hinst;
    LPWSTR lpszText;
} TOOLINFOW,  *PTOOLINFOW,  *LPTOOLINFOW;









#line 764 "C:\\MSDEV\\INCLUDE\\commctrl.h"




































































#line 833 "C:\\MSDEV\\INCLUDE\\commctrl.h"


typedef struct _TT_HITTESTINFOA {
    HWND hwnd;
    POINT pt;
    TOOLINFOA ti;
} TTHITTESTINFOA,  * LPHITTESTINFOA;

typedef struct _TT_HITTESTINFOW {
    HWND hwnd;
    POINT pt;
    TOOLINFOW ti;
} TTHITTESTINFOW,  * LPHITTESTINFOW;








#line 855 "C:\\MSDEV\\INCLUDE\\commctrl.h"











#line 867 "C:\\MSDEV\\INCLUDE\\commctrl.h"

typedef struct tagTOOLTIPTEXTA {
    NMHDR hdr;
    LPSTR lpszText;
    char szText[80];
    HINSTANCE hinst;
    UINT uFlags;
} TOOLTIPTEXTA,  *LPTOOLTIPTEXTA;

typedef struct tagTOOLTIPTEXTW {
    NMHDR hdr;
    LPWSTR lpszText;
    WCHAR szText[80];
    HINSTANCE hinst;
    UINT uFlags;
} TOOLTIPTEXTW,  *LPTOOLTIPTEXTW;







#line 891 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 893 "C:\\MSDEV\\INCLUDE\\commctrl.h"









__declspec(dllimport) void __stdcall DrawStatusTextA(HDC hDC, LPRECT lprc, LPCSTR pszText, UINT uFlags);
__declspec(dllimport) void __stdcall DrawStatusTextW(HDC hDC, LPRECT lprc, LPCWSTR pszText, UINT uFlags);

__declspec(dllimport) HWND __stdcall CreateStatusWindowA(LONG style, LPCSTR lpszText, HWND hwndParent, UINT wID);
__declspec(dllimport) HWND __stdcall CreateStatusWindowW(LONG style, LPCWSTR lpszText, HWND hwndParent, UINT wID);







#line 915 "C:\\MSDEV\\INCLUDE\\commctrl.h"









#line 925 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 929 "C:\\MSDEV\\INCLUDE\\commctrl.h"
















#line 946 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 962 "C:\\MSDEV\\INCLUDE\\commctrl.h"





__declspec(dllimport) void __stdcall MenuHelp(UINT uMsg, WPARAM wParam, LPARAM lParam, HMENU hMainMenu, HINSTANCE hInst, HWND hwndStatus, UINT  *lpwIDs);
__declspec(dllimport) BOOL __stdcall ShowHideMenuCtl(HWND hWnd, UINT uFlags, LPINT lpInfo);
__declspec(dllimport) void __stdcall GetEffectiveClientRect(HWND hWnd, LPRECT lprc, LPINT lpInfo);



#line 974 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 990 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 994 "C:\\MSDEV\\INCLUDE\\commctrl.h"
























































#line 1051 "C:\\MSDEV\\INCLUDE\\commctrl.h"





typedef struct tagDRAGLISTINFO {
    UINT uNotification;
    HWND hWnd;
    POINT ptCursor;
} DRAGLISTINFO,  *LPDRAGLISTINFO;













__declspec(dllimport) BOOL __stdcall MakeDragList(HWND hLB);
__declspec(dllimport) void __stdcall DrawInsert(HWND handParent, HWND hLB, int nItem);
__declspec(dllimport) int __stdcall LBItemFromPt(HWND hLB, POINT pt, BOOL bAutoScroll);

#line 1079 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 1095 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 1099 "C:\\MSDEV\\INCLUDE\\commctrl.h"


typedef struct _UDACCEL {
    UINT nSec;
    UINT nInc;
} UDACCEL,  *LPUDACCEL;



























__declspec(dllimport) HWND __stdcall CreateUpDownControl(DWORD dwStyle, int x, int y, int cx, int cy,
                                HWND hParent, int nID, HINSTANCE hInst,
                                HWND hBuddy,
                                int nUpper, int nLower, int nPos);

typedef struct _NM_UPDOWN
{
    NMHDR hdr;
    int iPos;
    int iDelta;
} NM_UPDOWN,  *LPNM_UPDOWN;



#line 1147 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 1163 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 1167 "C:\\MSDEV\\INCLUDE\\commctrl.h"








#line 1176 "C:\\MSDEV\\INCLUDE\\commctrl.h"


































#line 1211 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 1215 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 1217 "C:\\MSDEV\\INCLUDE\\commctrl.h"


























#line 1244 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 1248 "C:\\MSDEV\\INCLUDE\\commctrl.h"



































































typedef struct _LV_ITEMA
{
    UINT mask;
    int iItem;
    int iSubItem;
    UINT state;
    UINT stateMask;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
} LV_ITEMA;

typedef struct _LV_ITEMW
{
    UINT mask;
    int iItem;
    int iSubItem;
    UINT state;
    UINT stateMask;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
} LV_ITEMW;





#line 1346 "C:\\MSDEV\\INCLUDE\\commctrl.h"







#line 1354 "C:\\MSDEV\\INCLUDE\\commctrl.h"









#line 1364 "C:\\MSDEV\\INCLUDE\\commctrl.h"











#line 1376 "C:\\MSDEV\\INCLUDE\\commctrl.h"











#line 1388 "C:\\MSDEV\\INCLUDE\\commctrl.h"















































typedef struct _LV_FINDINFOA
{
    UINT flags;
    LPCSTR psz;
    LPARAM lParam;
    POINT pt;
    UINT vkDirection;
} LV_FINDINFOA;

typedef struct _LV_FINDINFOW
{
    UINT flags;
    LPCWSTR psz;
    LPARAM lParam;
    POINT pt;
    UINT vkDirection;
} LV_FINDINFOW;





#line 1458 "C:\\MSDEV\\INCLUDE\\commctrl.h"







#line 1466 "C:\\MSDEV\\INCLUDE\\commctrl.h"
































#line 1499 "C:\\MSDEV\\INCLUDE\\commctrl.h"
















typedef struct _LV_HITTESTINFO
{
    POINT pt;
    UINT flags;
    int iItem;
} LV_HITTESTINFO;






































#line 1560 "C:\\MSDEV\\INCLUDE\\commctrl.h"










typedef struct _LV_COLUMNA
{
    UINT mask;
    int fmt;
    int cx;
    LPSTR pszText;
    int cchTextMax;
    int iSubItem;
} LV_COLUMNA;

typedef struct _LV_COLUMNW
{
    UINT mask;
    int fmt;
    int cx;
    LPWSTR pszText;
    int cchTextMax;
    int iSubItem;
} LV_COLUMNW;





#line 1595 "C:\\MSDEV\\INCLUDE\\commctrl.h"



















#line 1615 "C:\\MSDEV\\INCLUDE\\commctrl.h"











#line 1627 "C:\\MSDEV\\INCLUDE\\commctrl.h"











#line 1639 "C:\\MSDEV\\INCLUDE\\commctrl.h"






























































































#line 1734 "C:\\MSDEV\\INCLUDE\\commctrl.h"

















#line 1752 "C:\\MSDEV\\INCLUDE\\commctrl.h"














typedef int (__stdcall *PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
































#line 1800 "C:\\MSDEV\\INCLUDE\\commctrl.h"





typedef struct _NM_LISTVIEW
{
    NMHDR   hdr;
    int     iItem;
    int     iSubItem;
    UINT    uNewState;
    UINT    uOldState;
    UINT    uChanged;
    POINT   ptAction;
    LPARAM  lParam;
} NM_LISTVIEW,  *LPNM_LISTVIEW;

typedef struct _NM_CACHEHINT
{
    NMHDR   hdr;
    int     iFrom;
    int     iTo;
} NM_CACHEHINT,  *LPNM_CACHEHINT,  *PNM_CACHEHINT;

typedef struct _NM_FINDITEM
{
    NMHDR   hdr;
    int     iStart;
    LV_FINDINFOA lvfi;
} NM_FINDITEM,  *LPNM_FINDITEM,  *PNM_FINDITEM;























#line 1854 "C:\\MSDEV\\INCLUDE\\commctrl.h"


















#line 1873 "C:\\MSDEV\\INCLUDE\\commctrl.h"






typedef struct _LV_DISPINFO {
    NMHDR hdr;
    LV_ITEMA item;
} LV_DISPINFOA;

typedef struct _LV_DISPINFOW {
    NMHDR hdr;
    LV_ITEMW item;
} LV_DISPINFOW;





#line 1894 "C:\\MSDEV\\INCLUDE\\commctrl.h"
                                                                     


typedef struct _LV_KEYDOWN
{
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} LV_KEYDOWN;

#line 1905 "C:\\MSDEV\\INCLUDE\\commctrl.h"













#line 1919 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 1923 "C:\\MSDEV\\INCLUDE\\commctrl.h"








typedef struct _TREEITEM * HTREEITEM;
























typedef struct _TV_ITEMA {
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPSTR     pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
} TV_ITEMA,  *LPTV_ITEMA;

typedef struct _TV_ITEMW {
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPWSTR    pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
} TV_ITEMW,  *LPTV_ITEMW;







#line 1989 "C:\\MSDEV\\INCLUDE\\commctrl.h"







typedef struct _TV_INSERTSTRUCTA {
    HTREEITEM hParent;
    HTREEITEM hInsertAfter;
    TV_ITEMA item;
} TV_INSERTSTRUCTA,  *LPTV_INSERTSTRUCTA;

typedef struct _TV_INSERTSTRUCTW {
    HTREEITEM hParent;
    HTREEITEM hInsertAfter;
    TV_ITEMW item;
} TV_INSERTSTRUCTW,  *LPTV_INSERTSTRUCTW;







#line 2015 "C:\\MSDEV\\INCLUDE\\commctrl.h"







#line 2023 "C:\\MSDEV\\INCLUDE\\commctrl.h"








































































































#line 2128 "C:\\MSDEV\\INCLUDE\\commctrl.h"












#line 2141 "C:\\MSDEV\\INCLUDE\\commctrl.h"











#line 2153 "C:\\MSDEV\\INCLUDE\\commctrl.h"




















typedef struct _TV_HITTESTINFO {
    POINT       pt;
    UINT        flags;
    HTREEITEM   hItem;
} TV_HITTESTINFO,  *LPTV_HITTESTINFO;

















































#line 2228 "C:\\MSDEV\\INCLUDE\\commctrl.h"





typedef int (__stdcall *PFNTVCOMPARE)(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
typedef struct _TV_SORTCB
{
        HTREEITEM       hParent;
        PFNTVCOMPARE    lpfnCompare;
        LPARAM          lParam;
} TV_SORTCB,  *LPTV_SORTCB;


typedef struct _NM_TREEVIEWA {
    NMHDR       hdr;
    UINT        action;
    TV_ITEMA    itemOld;
    TV_ITEMA    itemNew;
    POINT       ptDrag;
} NM_TREEVIEWA,  *LPNM_TREEVIEWA;

typedef struct _NM_TREEVIEWW {
    NMHDR       hdr;
    UINT        action;
    TV_ITEMW    itemOld;
    TV_ITEMW    itemNew;
    POINT       ptDrag;
} NM_TREEVIEWW,  *LPNM_TREEVIEWW;







#line 2265 "C:\\MSDEV\\INCLUDE\\commctrl.h"

















typedef struct _TV_DISPINFOA {
    NMHDR hdr;
    TV_ITEMA item;
} TV_DISPINFOA;

typedef struct _TV_DISPINFOW {
    NMHDR hdr;
    TV_ITEMW item;
} TV_DISPINFOW;





#line 2297 "C:\\MSDEV\\INCLUDE\\commctrl.h"

















typedef struct _TV_KEYDOWN {
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} TV_KEYDOWN;

























#line 2345 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 2347 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 2363 "C:\\MSDEV\\INCLUDE\\commctrl.h"



#line 2367 "C:\\MSDEV\\INCLUDE\\commctrl.h"













































typedef struct _TC_ITEMHEADERA
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
} TC_ITEMHEADERA;

typedef struct _TC_ITEMHEADERW
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
} TC_ITEMHEADERW;





#line 2437 "C:\\MSDEV\\INCLUDE\\commctrl.h"


typedef struct _TC_ITEMA
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPSTR pszText;
    int cchTextMax;
    int iImage;

    LPARAM lParam;
} TC_ITEMA;

typedef struct _TC_ITEMW
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;

    LPARAM lParam;
} TC_ITEMW;





#line 2468 "C:\\MSDEV\\INCLUDE\\commctrl.h"









#line 2478 "C:\\MSDEV\\INCLUDE\\commctrl.h"












#line 2491 "C:\\MSDEV\\INCLUDE\\commctrl.h"












#line 2504 "C:\\MSDEV\\INCLUDE\\commctrl.h"




































typedef struct _TC_HITTESTINFO
{
    POINT pt;
    UINT flags;
} TC_HITTESTINFO,  * LPTC_HITTESTINFO;

























































typedef struct _TC_KEYDOWN
{
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} TC_KEYDOWN;




#line 2613 "C:\\MSDEV\\INCLUDE\\commctrl.h"















#line 2629 "C:\\MSDEV\\INCLUDE\\commctrl.h"













#line 2643 "C:\\MSDEV\\INCLUDE\\commctrl.h"


















#line 2662 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 2664 "C:\\MSDEV\\INCLUDE\\commctrl.h"




}
#line 2670 "C:\\MSDEV\\INCLUDE\\commctrl.h"


#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 2673 "C:\\MSDEV\\INCLUDE\\commctrl.h"
#line 2674 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 2676 "C:\\MSDEV\\INCLUDE\\commctrl.h"

#line 2678 "C:\\MSDEV\\INCLUDE\\commctrl.h"
#line 135 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"
#line 136 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"



#line 140 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"


	#line 1 "C:\\MSDEV\\INCLUDE\\tchar.h"
















#pragma once
#line 19 "C:\\MSDEV\\INCLUDE\\tchar.h"





#pragma warning(disable:4514)       
 
#line 27 "C:\\MSDEV\\INCLUDE\\tchar.h"


extern "C" {
#line 31 "C:\\MSDEV\\INCLUDE\\tchar.h"






#line 38 "C:\\MSDEV\\INCLUDE\\tchar.h"





























































































































































































































































































































































































}   
#line 421 "C:\\MSDEV\\INCLUDE\\tchar.h"

#line 1 "C:\\MSDEV\\INCLUDE\\string.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\string.h"



















































































































































































































































































#line 423 "C:\\MSDEV\\INCLUDE\\tchar.h"


extern "C" {
#line 427 "C:\\MSDEV\\INCLUDE\\tchar.h"















#line 443 "C:\\MSDEV\\INCLUDE\\tchar.h"






















































































































#line 562 "C:\\MSDEV\\INCLUDE\\tchar.h"

























#line 588 "C:\\MSDEV\\INCLUDE\\tchar.h"

































}   
#line 623 "C:\\MSDEV\\INCLUDE\\tchar.h"

#line 1 "C:\\MSDEV\\INCLUDE\\mbstring.h"














#pragma once
#line 17 "C:\\MSDEV\\INCLUDE\\mbstring.h"






#line 24 "C:\\MSDEV\\INCLUDE\\mbstring.h"







#pragma pack(push,8)
#line 33 "C:\\MSDEV\\INCLUDE\\mbstring.h"


extern "C" {
#line 37 "C:\\MSDEV\\INCLUDE\\mbstring.h"













































#line 83 "C:\\MSDEV\\INCLUDE\\mbstring.h"



























struct _iobuf {
	char *_ptr;
	int   _cnt;
	char *_base;
	int   _flag;
	int   _file;
	int   _charbuf;
	int   _bufsiz;
	char *_tmpfname;
	};
typedef struct _iobuf FILE;

#line 123 "C:\\MSDEV\\INCLUDE\\mbstring.h"









__declspec(dllimport) unsigned int __cdecl _mbbtombc(unsigned int);
__declspec(dllimport) int __cdecl _mbbtype(unsigned char, int);
__declspec(dllimport) unsigned int __cdecl _mbctombb(unsigned int);
__declspec(dllimport) int __cdecl _mbsbtype(const unsigned char *, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbscat(unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbschr(const unsigned char *, unsigned int);
__declspec(dllimport) int __cdecl _mbscmp(const unsigned char *, const unsigned char *);
__declspec(dllimport) int __cdecl _mbscoll(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbscpy(unsigned char *, const unsigned char *);
__declspec(dllimport) size_t __cdecl _mbscspn(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsdec(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsdup(const unsigned char *);
__declspec(dllimport) int __cdecl _mbsicmp(const unsigned char *, const unsigned char *);
__declspec(dllimport) int __cdecl _mbsicoll(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsinc(const unsigned char *);
__declspec(dllimport) size_t __cdecl _mbslen(const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbslwr(unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsnbcat(unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsnbcmp(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsnbcoll(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) size_t __cdecl _mbsnbcnt(const unsigned char *, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbsnbcpy(unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsnbicmp(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsnbicoll(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbsnbset(unsigned char *, unsigned int, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbsncat(unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) size_t __cdecl _mbsnccnt(const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsncmp(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsncoll(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbsncpy(unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) unsigned int __cdecl _mbsnextc (const unsigned char *);
__declspec(dllimport) int __cdecl _mbsnicmp(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) int __cdecl _mbsnicoll(const unsigned char *, const unsigned char *, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbsninc(const unsigned char *, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbsnset(unsigned char *, unsigned int, size_t);
__declspec(dllimport) unsigned char * __cdecl _mbspbrk(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsrchr(const unsigned char *, unsigned int);
__declspec(dllimport) unsigned char * __cdecl _mbsrev(unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsset(unsigned char *, unsigned int);
__declspec(dllimport) size_t __cdecl _mbsspn(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsspnp(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsstr(const unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbstok(unsigned char *, const unsigned char *);
__declspec(dllimport) unsigned char * __cdecl _mbsupr(unsigned char *);

__declspec(dllimport) size_t __cdecl _mbclen(const unsigned char *);
__declspec(dllimport) void __cdecl _mbccpy(unsigned char *, const unsigned char *);




__declspec(dllimport) int __cdecl _ismbcalnum(unsigned int);
__declspec(dllimport) int __cdecl _ismbcalpha(unsigned int);
__declspec(dllimport) int __cdecl _ismbcdigit(unsigned int);
__declspec(dllimport) int __cdecl _ismbcgraph(unsigned int);
__declspec(dllimport) int __cdecl _ismbclegal(unsigned int);
__declspec(dllimport) int __cdecl _ismbclower(unsigned int);
__declspec(dllimport) int __cdecl _ismbcprint(unsigned int);
__declspec(dllimport) int __cdecl _ismbcpunct(unsigned int);
__declspec(dllimport) int __cdecl _ismbcspace(unsigned int);
__declspec(dllimport) int __cdecl _ismbcupper(unsigned int);

__declspec(dllimport) unsigned int __cdecl _mbctolower(unsigned int);
__declspec(dllimport) unsigned int __cdecl _mbctoupper(unsigned int);


#line 199 "C:\\MSDEV\\INCLUDE\\mbstring.h"


__declspec(dllimport) int __cdecl _ismbblead( unsigned int );
__declspec(dllimport) int __cdecl _ismbbtrail( unsigned int );
__declspec(dllimport) int __cdecl _ismbslead( const unsigned char *, const unsigned char *);
__declspec(dllimport) int __cdecl _ismbstrail( const unsigned char *, const unsigned char *);

#line 207 "C:\\MSDEV\\INCLUDE\\mbstring.h"



__declspec(dllimport) int __cdecl _ismbchira(unsigned int);
__declspec(dllimport) int __cdecl _ismbckata(unsigned int);
__declspec(dllimport) int __cdecl _ismbcsymbol(unsigned int);
__declspec(dllimport) int __cdecl _ismbcl0(unsigned int);
__declspec(dllimport) int __cdecl _ismbcl1(unsigned int);
__declspec(dllimport) int __cdecl _ismbcl2(unsigned int);
__declspec(dllimport) unsigned int __cdecl _mbcjistojms(unsigned int);
__declspec(dllimport) unsigned int __cdecl _mbcjmstojis(unsigned int);
__declspec(dllimport) unsigned int __cdecl _mbctohira(unsigned int);
__declspec(dllimport) unsigned int __cdecl _mbctokata(unsigned int);


}
#line 224 "C:\\MSDEV\\INCLUDE\\mbstring.h"


#pragma pack(pop)
#line 228 "C:\\MSDEV\\INCLUDE\\mbstring.h"

#line 230 "C:\\MSDEV\\INCLUDE\\mbstring.h"
#line 625 "C:\\MSDEV\\INCLUDE\\tchar.h"


extern "C" {
#line 629 "C:\\MSDEV\\INCLUDE\\tchar.h"



typedef char            _TCHAR;
typedef signed char     _TSCHAR;
typedef unsigned char   _TUCHAR;
typedef unsigned char   _TXCHAR;
typedef unsigned int    _TINT;

#line 639 "C:\\MSDEV\\INCLUDE\\tchar.h"





































































































































#line 773 "C:\\MSDEV\\INCLUDE\\tchar.h"












__inline char * _tcschr(const char * _s1,unsigned int _c) {return (char *)_mbschr((const unsigned char *)_s1,_c);}
__inline size_t _tcscspn(const char * _s1,const char * _s2) {return _mbscspn((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline char * _tcsncat(char * _s1,const char * _s2,size_t _n) {return (char *)_mbsnbcat((unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline char * _tcsncpy(char * _s1,const char * _s2,size_t _n) {return (char *)_mbsnbcpy((unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline char * _tcspbrk(const char * _s1,const char * _s2) {return (char *)_mbspbrk((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline char * _tcsrchr(const char * _s1,unsigned int _c) {return (char *)_mbsrchr((const unsigned char *)_s1,_c);}
__inline size_t _tcsspn(const char * _s1,const char * _s2) {return _mbsspn((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline char * _tcsstr(const char * _s1,const char * _s2) {return (char *)_mbsstr((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline char * _tcstok(char * _s1,const char * _s2) {return (char *)_mbstok((unsigned char *)_s1,(const unsigned char *)_s2);}

__inline char * _tcsnset(char * _s1,unsigned int _c,size_t _n) {return (char *)_mbsnbset((unsigned char *)_s1,_c,_n);}
__inline char * _tcsrev(char * _s1) {return (char *)_mbsrev((unsigned char *)_s1);}
__inline char * _tcsset(char * _s1,unsigned int _c) {return (char *)_mbsset((unsigned char *)_s1,_c);}

__inline int _tcscmp(const char * _s1,const char * _s2) {return _mbscmp((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline int _tcsicmp(const char * _s1,const char * _s2) {return _mbsicmp((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline int _tcsnccmp(const char * _s1,const char * _s2,size_t _n) {return _mbsncmp((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline int _tcsncmp(const char * _s1,const char * _s2,size_t _n) {return _mbsnbcmp((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline int _tcsncicmp(const char * _s1,const char * _s2,size_t _n) {return _mbsnicmp((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline int _tcsnicmp(const char * _s1,const char * _s2,size_t _n) {return _mbsnbicmp((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}

__inline int _tcscoll(const char * _s1,const char * _s2) {return _mbscoll((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline int _tcsicoll(const char * _s1,const char * _s2) {return _mbsicoll((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline int _tcsnccoll(const char * _s1,const char * _s2,size_t _n) {return _mbsncoll((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline int _tcsncoll(const char * _s1,const char * _s2,size_t _n) {return _mbsnbcoll((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline int _tcsncicoll(const char * _s1,const char * _s2,size_t _n) {return _mbsnicoll((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline int _tcsnicoll(const char * _s1,const char * _s2,size_t _n) {return _mbsnbicoll((const unsigned char *)_s1,(const unsigned char *)_s2,_n);}




__inline size_t _tcsclen(const char * _s1) {return _mbslen((const unsigned char *)_s1);}
__inline char * _tcsnccat(char * _s1,const char * _s2,size_t _n) {return (char *)_mbsncat((unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline char * _tcsnccpy(char * _s1,const char * _s2,size_t _n) {return (char *)_mbsncpy((unsigned char *)_s1,(const unsigned char *)_s2,_n);}
__inline char * _tcsncset(char * _s1,unsigned int _c,size_t _n) {return (char *)_mbsnset((unsigned char *)_s1,_c,_n);}




__inline char * _tcsdec(const char * _s1,const char * _s2) {return (char *)_mbsdec((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline char * _tcsinc(const char * _s1) {return (char *)_mbsinc((const unsigned char *)_s1);}
__inline size_t _tcsnbcnt(const char * _s1,size_t _n) {return _mbsnbcnt((const unsigned char *)_s1,_n);}
__inline size_t _tcsnccnt(const char * _s1,size_t _n) {return _mbsnccnt((const unsigned char *)_s1,_n);}
__inline char * _tcsninc(const char * _s1,size_t _n) {return (char *)_mbsninc((const unsigned char *)_s1,_n);}
__inline char * _tcsspnp(const char * _s1,const char * _s2) {return (char *)_mbsspnp((const unsigned char *)_s1,(const unsigned char *)_s2);}
__inline char * _tcslwr(char * _s1) {return (char *)_mbslwr((unsigned char *)_s1);}
__inline char * _tcsupr(char * _s1) {return (char *)_mbsupr((unsigned char *)_s1);}

__inline size_t _tclen(const char * _s1) {return _mbclen((const unsigned char *)_s1);}
__inline void _tccpy(char * _s1,const char * _s2) {_mbccpy((unsigned char *)_s1,(const unsigned char *)_s2); return;}



__inline unsigned int _tcsnextc(const char * _s1) {unsigned int _n=0; if (_ismbblead((unsigned int)*(unsigned char *)_s1)) _n=((unsigned int)*_s1++)<<8; _n+=(unsigned int)*_s1; return(_n);}


#line 842 "C:\\MSDEV\\INCLUDE\\tchar.h"

#line 844 "C:\\MSDEV\\INCLUDE\\tchar.h"



































































































































































#line 1008 "C:\\MSDEV\\INCLUDE\\tchar.h"

#line 1010 "C:\\MSDEV\\INCLUDE\\tchar.h"










}   
#line 1022 "C:\\MSDEV\\INCLUDE\\tchar.h"

#line 1024 "C:\\MSDEV\\INCLUDE\\tchar.h"
#line 143 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"
#line 144 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"


	#line 1 "C:\\MSDEV\\INCLUDE\\mbctype.h"













#pragma once
#line 16 "C:\\MSDEV\\INCLUDE\\mbctype.h"






#line 23 "C:\\MSDEV\\INCLUDE\\mbctype.h"




#line 1 "C:\\MSDEV\\INCLUDE\\ctype.h"














#pragma once
#line 17 "C:\\MSDEV\\INCLUDE\\ctype.h"

















































































































































































































































































































































































































#line 28 "C:\\MSDEV\\INCLUDE\\mbctype.h"


extern "C" {
#line 32 "C:\\MSDEV\\INCLUDE\\mbctype.h"













































#line 78 "C:\\MSDEV\\INCLUDE\\mbctype.h"

























__declspec(dllimport) unsigned char * __cdecl __p__mbctype(void);


#line 107 "C:\\MSDEV\\INCLUDE\\mbctype.h"

#line 109 "C:\\MSDEV\\INCLUDE\\mbctype.h"





























__declspec(dllimport) int __cdecl _setmbcp(int);
__declspec(dllimport) int __cdecl _getmbcp(void);






__declspec(dllimport) int __cdecl _ismbbkalnum( unsigned int );
__declspec(dllimport) int __cdecl _ismbbkana( unsigned int );
__declspec(dllimport) int __cdecl _ismbbkpunct( unsigned int );
__declspec(dllimport) int __cdecl _ismbbkprint( unsigned int );
__declspec(dllimport) int __cdecl _ismbbalpha( unsigned int );
__declspec(dllimport) int __cdecl _ismbbpunct( unsigned int );
__declspec(dllimport) int __cdecl _ismbbalnum( unsigned int );
__declspec(dllimport) int __cdecl _ismbbprint( unsigned int );
__declspec(dllimport) int __cdecl _ismbbgraph( unsigned int );










#line 166 "C:\\MSDEV\\INCLUDE\\mbctype.h"





















}
#line 189 "C:\\MSDEV\\INCLUDE\\mbctype.h"


#line 192 "C:\\MSDEV\\INCLUDE\\mbctype.h"
#line 147 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"
#line 148 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"



#line 152 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"










inline HTASK GetWindowTask(HWND hWnd)
	{ return (HTASK)::GetWindowThreadProcessId(hWnd, 0); }
#line 165 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"




inline HWND GetNextWindow(HWND hWnd, UINT nDirection)
	{ return ::GetWindow(hWnd, nDirection); }
#line 172 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"




inline BOOL __stdcall DrawState(HDC hdc, HBRUSH hbr, DRAWSTATEPROC lpOutputFunc,
	LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT fuFlags)




	{ return ::DrawStateA(hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy,
		fuFlags); }
#line 185 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"
#line 186 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"




inline void __stdcall DrawStatusText(HDC hDC, LPRECT lprc, LPCTSTR szText,
	UINT uFlags)



	{ ::DrawStatusTextA(hDC, lprc, szText, uFlags); }
#line 197 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"
#line 198 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"




inline BOOL __stdcall FreeResource(HGLOBAL) { return 1; }


inline int __stdcall UnlockResource(HGLOBAL) { return 0; }
#line 207 "C:\\MSDEV\\MFC\\include\\afxv_w32.h"


#line 141 "C:\\MSDEV\\MFC\\include\\afxver_.h"












	
#line 155 "C:\\MSDEV\\MFC\\include\\afxver_.h"








	
#line 165 "C:\\MSDEV\\MFC\\include\\afxver_.h"


	#line 1 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"















	
	
#line 19 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"


	
	
#line 24 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"


	
	
#line 29 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"


	
	
#line 34 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"








	





		
		
		
		
	#line 53 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"
#line 54 "C:\\MSDEV\\MFC\\include\\afxv_dll.h"
#line 168 "C:\\MSDEV\\MFC\\include\\afxver_.h"
#line 169 "C:\\MSDEV\\MFC\\include\\afxver_.h"




#line 174 "C:\\MSDEV\\MFC\\include\\afxver_.h"














#line 189 "C:\\MSDEV\\MFC\\include\\afxver_.h"
#line 190 "C:\\MSDEV\\MFC\\include\\afxver_.h"














	
#line 206 "C:\\MSDEV\\MFC\\include\\afxver_.h"






















	
#line 230 "C:\\MSDEV\\MFC\\include\\afxver_.h"



	
#line 235 "C:\\MSDEV\\MFC\\include\\afxver_.h"



	
#line 240 "C:\\MSDEV\\MFC\\include\\afxver_.h"



	
#line 245 "C:\\MSDEV\\MFC\\include\\afxver_.h"





	
#line 252 "C:\\MSDEV\\MFC\\include\\afxver_.h"

	
#line 255 "C:\\MSDEV\\MFC\\include\\afxver_.h"



	
#line 260 "C:\\MSDEV\\MFC\\include\\afxver_.h"

	
#line 263 "C:\\MSDEV\\MFC\\include\\afxver_.h"



	
#line 268 "C:\\MSDEV\\MFC\\include\\afxver_.h"

	
#line 271 "C:\\MSDEV\\MFC\\include\\afxver_.h"








































	
#line 313 "C:\\MSDEV\\MFC\\include\\afxver_.h"


	
#line 317 "C:\\MSDEV\\MFC\\include\\afxver_.h"


	
#line 321 "C:\\MSDEV\\MFC\\include\\afxver_.h"







#line 28 "C:\\MSDEV\\MFC\\include\\afx.h"






















	
		
			#pragma comment(lib, "mfc42d.lib")
			#pragma comment(lib, "mfcs42d.lib")
		


#line 58 "C:\\MSDEV\\MFC\\include\\afx.h"
	







#line 67 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 68 "C:\\MSDEV\\MFC\\include\\afx.h"


	
		#pragma comment(lib, "msvcrtd.lib")
	

#line 75 "C:\\MSDEV\\MFC\\include\\afx.h"














#line 90 "C:\\MSDEV\\MFC\\include\\afx.h"

#pragma comment(lib, "kernel32.lib")
#pragma comment(lib, "user32.lib")
#pragma comment(lib, "gdi32.lib")
#pragma comment(lib, "comdlg32.lib")
#pragma comment(lib, "winspool.lib")
#pragma comment(lib, "advapi32.lib")
#pragma comment(lib, "shell32.lib")
#pragma comment(lib, "comctl32.lib")


























































































#line 190 "C:\\MSDEV\\MFC\\include\\afx.h"


#pragma comment(linker, "/include:__afxForceEXCLUDE")








#pragma comment(linker, "/include:__afxForceSTDAFX")
#line 203 "C:\\MSDEV\\MFC\\include\\afx.h"

#line 205 "C:\\MSDEV\\MFC\\include\\afx.h"





struct CRuntimeClass;          

class CObject;                        

	class CException;                 
		class CArchiveException;      
		class CFileException;         
		class CSimpleException;
			class CMemoryException;       
			class CNotSupportedException; 

	class CFile;                      
		class CStdioFile;             
		class CMemFile;               


class CString;                        
class CTimeSpan;                      
class CTime;                          
struct CFileStatus;                   
struct CMemoryState;                  

class CArchive;                       
class CDumpContext;                   








	#line 1 "C:\\MSDEV\\INCLUDE\\stdio.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\stdio.h"






#line 25 "C:\\MSDEV\\INCLUDE\\stdio.h"







#pragma pack(push,8)
#line 34 "C:\\MSDEV\\INCLUDE\\stdio.h"


extern "C" {
#line 38 "C:\\MSDEV\\INCLUDE\\stdio.h"













































#line 84 "C:\\MSDEV\\INCLUDE\\stdio.h"




















#line 105 "C:\\MSDEV\\INCLUDE\\stdio.h"



















#line 125 "C:\\MSDEV\\INCLUDE\\stdio.h"

#line 127 "C:\\MSDEV\\INCLUDE\\stdio.h"






























#line 158 "C:\\MSDEV\\INCLUDE\\stdio.h"





























#line 188 "C:\\MSDEV\\INCLUDE\\stdio.h"










#line 199 "C:\\MSDEV\\INCLUDE\\stdio.h"

















































__declspec(dllimport) extern FILE * __cdecl __p__iob(void);





#line 255 "C:\\MSDEV\\INCLUDE\\stdio.h"

#line 257 "C:\\MSDEV\\INCLUDE\\stdio.h"

#line 259 "C:\\MSDEV\\INCLUDE\\stdio.h"












#line 272 "C:\\MSDEV\\INCLUDE\\stdio.h"


typedef __int64 fpos_t;







#line 283 "C:\\MSDEV\\INCLUDE\\stdio.h"

#line 285 "C:\\MSDEV\\INCLUDE\\stdio.h"


#line 288 "C:\\MSDEV\\INCLUDE\\stdio.h"




























__declspec(dllimport) int __cdecl _filbuf(FILE *);
__declspec(dllimport) int __cdecl _flsbuf(int, FILE *);




__declspec(dllimport) FILE * __cdecl _fsopen(const char *, const char *, int);
#line 324 "C:\\MSDEV\\INCLUDE\\stdio.h"

__declspec(dllimport) void __cdecl clearerr(FILE *);
__declspec(dllimport) int __cdecl fclose(FILE *);
__declspec(dllimport) int __cdecl _fcloseall(void);




__declspec(dllimport) FILE * __cdecl _fdopen(int, const char *);
#line 334 "C:\\MSDEV\\INCLUDE\\stdio.h"

__declspec(dllimport) int __cdecl feof(FILE *);
__declspec(dllimport) int __cdecl ferror(FILE *);
__declspec(dllimport) int __cdecl fflush(FILE *);
__declspec(dllimport) int __cdecl fgetc(FILE *);
__declspec(dllimport) int __cdecl _fgetchar(void);
__declspec(dllimport) int __cdecl fgetpos(FILE *, fpos_t *);
__declspec(dllimport) char * __cdecl fgets(char *, int, FILE *);




__declspec(dllimport) int __cdecl _fileno(FILE *);
#line 348 "C:\\MSDEV\\INCLUDE\\stdio.h"

__declspec(dllimport) int __cdecl _flushall(void);
__declspec(dllimport) FILE * __cdecl fopen(const char *, const char *);
__declspec(dllimport) int __cdecl fprintf(FILE *, const char *, ...);
__declspec(dllimport) int __cdecl fputc(int, FILE *);
__declspec(dllimport) int __cdecl _fputchar(int);
__declspec(dllimport) int __cdecl fputs(const char *, FILE *);
__declspec(dllimport) size_t __cdecl fread(void *, size_t, size_t, FILE *);
__declspec(dllimport) FILE * __cdecl freopen(const char *, const char *, FILE *);
__declspec(dllimport) int __cdecl fscanf(FILE *, const char *, ...);
__declspec(dllimport) int __cdecl fsetpos(FILE *, const fpos_t *);
__declspec(dllimport) int __cdecl fseek(FILE *, long, int);
__declspec(dllimport) long __cdecl ftell(FILE *);
__declspec(dllimport) size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
__declspec(dllimport) int __cdecl getc(FILE *);
__declspec(dllimport) int __cdecl getchar(void);
__declspec(dllimport) int __cdecl _getmaxstdio(void);
__declspec(dllimport) char * __cdecl gets(char *);
__declspec(dllimport) int __cdecl _getw(FILE *);
__declspec(dllimport) void __cdecl perror(const char *);
__declspec(dllimport) int __cdecl _pclose(FILE *);
__declspec(dllimport) FILE * __cdecl _popen(const char *, const char *);
__declspec(dllimport) int __cdecl printf(const char *, ...);
__declspec(dllimport) int __cdecl putc(int, FILE *);
__declspec(dllimport) int __cdecl putchar(int);
__declspec(dllimport) int __cdecl puts(const char *);
__declspec(dllimport) int __cdecl _putw(int, FILE *);
__declspec(dllimport) int __cdecl remove(const char *);
__declspec(dllimport) int __cdecl rename(const char *, const char *);
__declspec(dllimport) void __cdecl rewind(FILE *);
__declspec(dllimport) int __cdecl _rmtmp(void);
__declspec(dllimport) int __cdecl scanf(const char *, ...);
__declspec(dllimport) void __cdecl setbuf(FILE *, char *);
__declspec(dllimport) int __cdecl _setmaxstdio(int);
__declspec(dllimport) int __cdecl setvbuf(FILE *, char *, int, size_t);
__declspec(dllimport) int __cdecl _snprintf(char *, size_t, const char *, ...);
__declspec(dllimport) int __cdecl sprintf(char *, const char *, ...);
__declspec(dllimport) int __cdecl sscanf(const char *, const char *, ...);
__declspec(dllimport) char * __cdecl _tempnam(const char *, const char *);
__declspec(dllimport) FILE * __cdecl tmpfile(void);
__declspec(dllimport) char * __cdecl tmpnam(char *);
__declspec(dllimport) int __cdecl ungetc(int, FILE *);
__declspec(dllimport) int __cdecl _unlink(const char *);
__declspec(dllimport) int __cdecl vfprintf(FILE *, const char *, va_list);
__declspec(dllimport) int __cdecl vprintf(const char *, va_list);
__declspec(dllimport) int __cdecl _vsnprintf(char *, size_t, const char *, va_list);
__declspec(dllimport) int __cdecl vsprintf(char *, const char *, va_list);













__declspec(dllimport) FILE * __cdecl _wfsopen(const wchar_t *, const wchar_t *, int);
#line 410 "C:\\MSDEV\\INCLUDE\\stdio.h"

__declspec(dllimport) wint_t __cdecl fgetwc(FILE *);
__declspec(dllimport) wint_t __cdecl _fgetwchar(void);
__declspec(dllimport) wint_t __cdecl fputwc(wint_t, FILE *);
__declspec(dllimport) wint_t __cdecl _fputwchar(wint_t);
__declspec(dllimport) wint_t __cdecl getwc(FILE *);
__declspec(dllimport) wint_t __cdecl getwchar(void);
__declspec(dllimport) wint_t __cdecl putwc(wint_t, FILE *);
__declspec(dllimport) wint_t __cdecl putwchar(wint_t);
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t, FILE *);

__declspec(dllimport) wchar_t * __cdecl fgetws(wchar_t *, int, FILE *);
__declspec(dllimport) int __cdecl fputws(const wchar_t *, FILE *);
__declspec(dllimport) wchar_t * __cdecl _getws(wchar_t *);
__declspec(dllimport) int __cdecl _putws(const wchar_t *);

__declspec(dllimport) int __cdecl fwprintf(FILE *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl wprintf(const wchar_t *, ...);
__declspec(dllimport) int __cdecl _snwprintf(wchar_t *, size_t, const wchar_t *, ...);
__declspec(dllimport) int __cdecl swprintf(wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl vfwprintf(FILE *, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl vwprintf(const wchar_t *, va_list);
__declspec(dllimport) int __cdecl _vsnwprintf(wchar_t *, size_t, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl vswprintf(wchar_t *, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl fwscanf(FILE *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl swscanf(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl wscanf(const wchar_t *, ...);






__declspec(dllimport) FILE * __cdecl _wfdopen(int, const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wfopen(const wchar_t *, const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wfreopen(const wchar_t *, const wchar_t *, FILE *);
__declspec(dllimport) void __cdecl _wperror(const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wpopen(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wremove(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wtempnam(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wtmpnam(wchar_t *);



#line 455 "C:\\MSDEV\\INCLUDE\\stdio.h"
#line 456 "C:\\MSDEV\\INCLUDE\\stdio.h"


#line 459 "C:\\MSDEV\\INCLUDE\\stdio.h"





















#line 481 "C:\\MSDEV\\INCLUDE\\stdio.h"


























__declspec(dllimport) int __cdecl fcloseall(void);
__declspec(dllimport) FILE * __cdecl fdopen(int, const char *);
__declspec(dllimport) int __cdecl fgetchar(void);
__declspec(dllimport) int __cdecl fileno(FILE *);
__declspec(dllimport) int __cdecl flushall(void);
__declspec(dllimport) int __cdecl fputchar(int);
__declspec(dllimport) int __cdecl getw(FILE *);
__declspec(dllimport) int __cdecl putw(int, FILE *);
__declspec(dllimport) int __cdecl rmtmp(void);
__declspec(dllimport) char * __cdecl tempnam(const char *, const char *);
__declspec(dllimport) int __cdecl unlink(const char *);

#line 520 "C:\\MSDEV\\INCLUDE\\stdio.h"

#line 522 "C:\\MSDEV\\INCLUDE\\stdio.h"


}
#line 526 "C:\\MSDEV\\INCLUDE\\stdio.h"



#pragma pack(pop)
#line 531 "C:\\MSDEV\\INCLUDE\\stdio.h"

#line 533 "C:\\MSDEV\\INCLUDE\\stdio.h"
#line 243 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 244 "C:\\MSDEV\\MFC\\include\\afx.h"

	#line 1 "C:\\MSDEV\\INCLUDE\\stdlib.h"
















#pragma once
#line 19 "C:\\MSDEV\\INCLUDE\\stdlib.h"






#line 26 "C:\\MSDEV\\INCLUDE\\stdlib.h"







#pragma pack(push,8)
#line 35 "C:\\MSDEV\\INCLUDE\\stdlib.h"


extern "C" {
#line 39 "C:\\MSDEV\\INCLUDE\\stdlib.h"













































#line 85 "C:\\MSDEV\\INCLUDE\\stdlib.h"
































typedef int (__cdecl * _onexit_t)(void);



#line 122 "C:\\MSDEV\\INCLUDE\\stdlib.h"

#line 124 "C:\\MSDEV\\INCLUDE\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;


#line 142 "C:\\MSDEV\\INCLUDE\\stdlib.h"


























































#line 201 "C:\\MSDEV\\INCLUDE\\stdlib.h"












__declspec(dllimport) int * __cdecl _errno(void);
__declspec(dllimport) unsigned long * __cdecl __doserrno(void);





#line 221 "C:\\MSDEV\\INCLUDE\\stdlib.h"



#line 225 "C:\\MSDEV\\INCLUDE\\stdlib.h"

































































































__declspec(dllimport) extern char * _sys_errlist[];   
__declspec(dllimport) extern int _sys_nerr;   












#line 337 "C:\\MSDEV\\INCLUDE\\stdlib.h"
#line 338 "C:\\MSDEV\\INCLUDE\\stdlib.h"






#line 345 "C:\\MSDEV\\INCLUDE\\stdlib.h"




__declspec(dllimport) int *          __cdecl __p___argc(void);
__declspec(dllimport) char ***       __cdecl __p___argv(void);

__declspec(dllimport) wchar_t ***    __cdecl __p___wargv(void);
#line 354 "C:\\MSDEV\\INCLUDE\\stdlib.h"
__declspec(dllimport) char ***       __cdecl __p__environ(void);

__declspec(dllimport) wchar_t ***    __cdecl __p__wenviron(void);
#line 358 "C:\\MSDEV\\INCLUDE\\stdlib.h"
__declspec(dllimport) int *          __cdecl __p__fmode(void);
__declspec(dllimport) int *          __cdecl __p__fileinfo(void);
__declspec(dllimport) unsigned int * __cdecl __p__osver(void);
__declspec(dllimport) char **        __cdecl __p__pgmptr(void);

__declspec(dllimport) wchar_t **     __cdecl __p__wpgmptr(void);
#line 365 "C:\\MSDEV\\INCLUDE\\stdlib.h"
__declspec(dllimport) unsigned int * __cdecl __p__winver(void);
__declspec(dllimport) unsigned int * __cdecl __p__winmajor(void);
__declspec(dllimport) unsigned int * __cdecl __p__winminor(void);































#line 400 "C:\\MSDEV\\INCLUDE\\stdlib.h"

#line 402 "C:\\MSDEV\\INCLUDE\\stdlib.h"



__declspec(dllimport) void   __cdecl abort(void);



#line 410 "C:\\MSDEV\\INCLUDE\\stdlib.h"
        int    __cdecl abs(int);
#line 412 "C:\\MSDEV\\INCLUDE\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
__declspec(dllimport) double __cdecl atof(const char *);
__declspec(dllimport) int    __cdecl atoi(const char *);
__declspec(dllimport) long   __cdecl atol(const char *);



__declspec(dllimport) void * __cdecl bsearch(const void *, const void *, size_t, size_t,
        int (__cdecl *)(const void *, const void *));
__declspec(dllimport) void * __cdecl calloc(size_t, size_t);
__declspec(dllimport) div_t  __cdecl div(int, int);
__declspec(dllimport) void   __cdecl exit(int);
__declspec(dllimport) void   __cdecl free(void *);
__declspec(dllimport) char * __cdecl getenv(const char *);
__declspec(dllimport) char * __cdecl _itoa(int, char *, int);

__declspec(dllimport) char * __cdecl _i64toa(__int64, char *, int);
__declspec(dllimport) char * __cdecl _ui64toa(unsigned __int64, char *, int);
__declspec(dllimport) __int64 __cdecl _atoi64(const char *);
#line 432 "C:\\MSDEV\\INCLUDE\\stdlib.h"


#line 435 "C:\\MSDEV\\INCLUDE\\stdlib.h"
        long __cdecl labs(long);
#line 437 "C:\\MSDEV\\INCLUDE\\stdlib.h"
__declspec(dllimport) ldiv_t __cdecl ldiv(long, long);
__declspec(dllimport) char * __cdecl _ltoa(long, char *, int);
__declspec(dllimport) void * __cdecl malloc(size_t);
__declspec(dllimport) int    __cdecl mblen(const char *, size_t);
__declspec(dllimport) size_t __cdecl _mbstrlen(const char *s);
__declspec(dllimport) int    __cdecl mbtowc(wchar_t *, const char *, size_t);
__declspec(dllimport) size_t __cdecl mbstowcs(wchar_t *, const char *, size_t);
__declspec(dllimport) void   __cdecl qsort(void *, size_t, size_t, int (__cdecl *)
        (const void *, const void *));
__declspec(dllimport) int    __cdecl rand(void);
__declspec(dllimport) void * __cdecl realloc(void *, size_t);
__declspec(dllimport) int    __cdecl _set_error_mode(int);
__declspec(dllimport) void   __cdecl srand(unsigned int);
__declspec(dllimport) double __cdecl strtod(const char *, char **);
__declspec(dllimport) long   __cdecl strtol(const char *, char **, int);



__declspec(dllimport) unsigned long __cdecl strtoul(const char *, char **, int);

__declspec(dllimport) int    __cdecl system(const char *);
#line 459 "C:\\MSDEV\\INCLUDE\\stdlib.h"
__declspec(dllimport) char * __cdecl _ultoa(unsigned long, char *, int);
__declspec(dllimport) int    __cdecl wctomb(char *, wchar_t);
__declspec(dllimport) size_t __cdecl wcstombs(char *, const wchar_t *, size_t);






__declspec(dllimport) wchar_t * __cdecl _itow (int, wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _ltow (long, wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _ultow (unsigned long, wchar_t *, int);
__declspec(dllimport) double __cdecl wcstod(const wchar_t *, wchar_t **);
__declspec(dllimport) long   __cdecl wcstol(const wchar_t *, wchar_t **, int);
__declspec(dllimport) unsigned long __cdecl wcstoul(const wchar_t *, wchar_t **, int);
__declspec(dllimport) wchar_t * __cdecl _wgetenv(const wchar_t *);
__declspec(dllimport) int    __cdecl _wsystem(const wchar_t *);
__declspec(dllimport) int __cdecl _wtoi(const wchar_t *);
__declspec(dllimport) long __cdecl _wtol(const wchar_t *);

__declspec(dllimport) wchar_t * __cdecl _i64tow(__int64, wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _ui64tow(unsigned __int64, wchar_t *, int);
__declspec(dllimport) __int64   __cdecl _wtoi64(const wchar_t *);
#line 483 "C:\\MSDEV\\INCLUDE\\stdlib.h"


#line 486 "C:\\MSDEV\\INCLUDE\\stdlib.h"
#line 487 "C:\\MSDEV\\INCLUDE\\stdlib.h"



__declspec(dllimport) char * __cdecl _ecvt(double, int, int *, int *);
__declspec(dllimport) void   __cdecl _exit(int);
__declspec(dllimport) char * __cdecl _fcvt(double, int, int *, int *);
__declspec(dllimport) char * __cdecl _fullpath(char *, const char *, size_t);
__declspec(dllimport) char * __cdecl _gcvt(double, int, char *);
        unsigned long __cdecl _lrotl(unsigned long, int);
        unsigned long __cdecl _lrotr(unsigned long, int);

__declspec(dllimport) void   __cdecl _makepath(char *, const char *, const char *, const char *,
        const char *);
#line 501 "C:\\MSDEV\\INCLUDE\\stdlib.h"
        _onexit_t __cdecl _onexit(_onexit_t);
__declspec(dllimport) void   __cdecl perror(const char *);
__declspec(dllimport) int    __cdecl _putenv(const char *);
        unsigned int __cdecl _rotl(unsigned int, int);
        unsigned int __cdecl _rotr(unsigned int, int);
__declspec(dllimport) void   __cdecl _searchenv(const char *, const char *, char *);

__declspec(dllimport) void   __cdecl _splitpath(const char *, char *, char *, char *, char *);
#line 510 "C:\\MSDEV\\INCLUDE\\stdlib.h"
__declspec(dllimport) void   __cdecl _swab(char *, char *, int);






__declspec(dllimport) wchar_t * __cdecl _wfullpath(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) void   __cdecl _wmakepath(wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *,
        const wchar_t *);
__declspec(dllimport) void   __cdecl _wperror(const wchar_t *);
__declspec(dllimport) int    __cdecl _wputenv(const wchar_t *);
__declspec(dllimport) void   __cdecl _wsearchenv(const wchar_t *, const wchar_t *, wchar_t *);
__declspec(dllimport) void   __cdecl _wsplitpath(const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *);


#line 527 "C:\\MSDEV\\INCLUDE\\stdlib.h"
#line 528 "C:\\MSDEV\\INCLUDE\\stdlib.h"




__declspec(dllimport) void __cdecl _seterrormode(int);
__declspec(dllimport) void __cdecl _beep(unsigned, unsigned);
__declspec(dllimport) void __cdecl _sleep(unsigned long);
#line 536 "C:\\MSDEV\\INCLUDE\\stdlib.h"


#line 539 "C:\\MSDEV\\INCLUDE\\stdlib.h"






__declspec(dllimport) int __cdecl tolower(int);
#line 547 "C:\\MSDEV\\INCLUDE\\stdlib.h"

__declspec(dllimport) int __cdecl toupper(int);
#line 550 "C:\\MSDEV\\INCLUDE\\stdlib.h"

#line 552 "C:\\MSDEV\\INCLUDE\\stdlib.h"











































__declspec(dllimport) char * __cdecl ecvt(double, int, int *, int *);
__declspec(dllimport) char * __cdecl fcvt(double, int, int *, int *);
__declspec(dllimport) char * __cdecl gcvt(double, int, char *);
__declspec(dllimport) char * __cdecl itoa(int, char *, int);
__declspec(dllimport) char * __cdecl ltoa(long, char *, int);
        _onexit_t __cdecl onexit(_onexit_t);
__declspec(dllimport) int    __cdecl putenv(const char *);
__declspec(dllimport) void   __cdecl swab(char *, char *, int);
__declspec(dllimport) char * __cdecl ultoa(unsigned long, char *, int);

#line 606 "C:\\MSDEV\\INCLUDE\\stdlib.h"

#line 608 "C:\\MSDEV\\INCLUDE\\stdlib.h"

#line 610 "C:\\MSDEV\\INCLUDE\\stdlib.h"


}
#line 614 "C:\\MSDEV\\INCLUDE\\stdlib.h"



#pragma pack(pop)
#line 619 "C:\\MSDEV\\INCLUDE\\stdlib.h"

#line 621 "C:\\MSDEV\\INCLUDE\\stdlib.h"
#line 246 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 247 "C:\\MSDEV\\MFC\\include\\afx.h"

	#line 1 "C:\\MSDEV\\INCLUDE\\time.h"
















#pragma once
#line 19 "C:\\MSDEV\\INCLUDE\\time.h"






#line 26 "C:\\MSDEV\\INCLUDE\\time.h"







#pragma pack(push,8)
#line 35 "C:\\MSDEV\\INCLUDE\\time.h"


extern "C" {
#line 39 "C:\\MSDEV\\INCLUDE\\time.h"













































#line 85 "C:\\MSDEV\\INCLUDE\\time.h"






#line 92 "C:\\MSDEV\\INCLUDE\\time.h"




typedef long time_t;        

#line 99 "C:\\MSDEV\\INCLUDE\\time.h"


typedef long clock_t;

#line 104 "C:\\MSDEV\\INCLUDE\\time.h"



















struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 136 "C:\\MSDEV\\INCLUDE\\time.h"


























































__declspec(dllimport) int * __cdecl __p__daylight(void);


__declspec(dllimport) long * __cdecl __p__dstbias(void);


__declspec(dllimport) long * __cdecl __p__timezone(void);


__declspec(dllimport) char ** __cdecl __p__tzname(void);















#line 220 "C:\\MSDEV\\INCLUDE\\time.h"

#line 222 "C:\\MSDEV\\INCLUDE\\time.h"




__declspec(dllimport) char * __cdecl asctime(const struct tm *);
__declspec(dllimport) char * __cdecl ctime(const time_t *);
__declspec(dllimport) clock_t __cdecl clock(void);
__declspec(dllimport) double __cdecl difftime(time_t, time_t);
__declspec(dllimport) struct tm * __cdecl gmtime(const time_t *);
__declspec(dllimport) struct tm * __cdecl localtime(const time_t *);
__declspec(dllimport) time_t __cdecl mktime(struct tm *);
__declspec(dllimport) size_t __cdecl strftime(char *, size_t, const char *,
        const struct tm *);
__declspec(dllimport) char * __cdecl _strdate(char *);
__declspec(dllimport) char * __cdecl _strtime(char *);
__declspec(dllimport) time_t __cdecl time(time_t *);




__declspec(dllimport) void __cdecl _tzset(void);
#line 244 "C:\\MSDEV\\INCLUDE\\time.h"



unsigned __cdecl _getsystime(struct tm *);
unsigned __cdecl _setsystime(struct tm *, unsigned);












 
__declspec(dllimport) wchar_t * __cdecl _wasctime(const struct tm *);
__declspec(dllimport) wchar_t * __cdecl _wctime(const time_t *);
__declspec(dllimport) size_t __cdecl wcsftime(wchar_t *, size_t, const wchar_t *,
        const struct tm *);
__declspec(dllimport) wchar_t * __cdecl _wstrdate(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wstrtime(wchar_t *);


#line 271 "C:\\MSDEV\\INCLUDE\\time.h"
#line 272 "C:\\MSDEV\\INCLUDE\\time.h"



























__declspec(dllimport) extern long timezone;








#line 309 "C:\\MSDEV\\INCLUDE\\time.h"

__declspec(dllimport) void __cdecl tzset(void);

#line 313 "C:\\MSDEV\\INCLUDE\\time.h"

#line 315 "C:\\MSDEV\\INCLUDE\\time.h"



}
#line 320 "C:\\MSDEV\\INCLUDE\\time.h"



#pragma pack(pop)
#line 325 "C:\\MSDEV\\INCLUDE\\time.h"

#line 327 "C:\\MSDEV\\INCLUDE\\time.h"
#line 249 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 250 "C:\\MSDEV\\MFC\\include\\afx.h"

	#line 1 "C:\\MSDEV\\INCLUDE\\limits.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\limits.h"






#line 25 "C:\\MSDEV\\INCLUDE\\limits.h"













#line 39 "C:\\MSDEV\\INCLUDE\\limits.h"
















#line 56 "C:\\MSDEV\\INCLUDE\\limits.h"





#line 62 "C:\\MSDEV\\INCLUDE\\limits.h"





#line 68 "C:\\MSDEV\\INCLUDE\\limits.h"








#line 77 "C:\\MSDEV\\INCLUDE\\limits.h"








#line 86 "C:\\MSDEV\\INCLUDE\\limits.h"
































#line 119 "C:\\MSDEV\\INCLUDE\\limits.h"
#line 252 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 253 "C:\\MSDEV\\MFC\\include\\afx.h"

	#line 1 "C:\\MSDEV\\INCLUDE\\stddef.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\stddef.h"






#line 25 "C:\\MSDEV\\INCLUDE\\stddef.h"



extern "C" {
#line 30 "C:\\MSDEV\\INCLUDE\\stddef.h"













































#line 76 "C:\\MSDEV\\INCLUDE\\stddef.h"



















__declspec(dllimport) extern int * __cdecl _errno(void);



#line 100 "C:\\MSDEV\\INCLUDE\\stddef.h"





typedef int ptrdiff_t;

#line 108 "C:\\MSDEV\\INCLUDE\\stddef.h"















__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern unsigned long  __cdecl __threadhandle(void);
#line 127 "C:\\MSDEV\\INCLUDE\\stddef.h"



}
#line 132 "C:\\MSDEV\\INCLUDE\\stddef.h"

#line 134 "C:\\MSDEV\\INCLUDE\\stddef.h"
#line 255 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 256 "C:\\MSDEV\\MFC\\include\\afx.h"






	#line 1 "C:\\MSDEV\\INCLUDE\\crtdbg.h"













#pragma once
#line 16 "C:\\MSDEV\\INCLUDE\\crtdbg.h"






#line 23 "C:\\MSDEV\\INCLUDE\\crtdbg.h"



extern "C" {
#line 28 "C:\\MSDEV\\INCLUDE\\crtdbg.h"










































































 







































 





typedef void *_HFILE; 



















__declspec(dllimport) long * __cdecl __p__crtAssertBusy(void);


#line 172 "C:\\MSDEV\\INCLUDE\\crtdbg.h"

typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);

__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
        _CRT_REPORT_HOOK
        );

__declspec(dllimport) int __cdecl _CrtSetReportMode(
        int,
        int
        );

__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
        int,
        _HFILE
        );

__declspec(dllimport) int __cdecl _CrtDbgReport(
        int,
        const char *,
        int,
        const char *,
        const char *,
        ...);





































































#line 266 "C:\\MSDEV\\INCLUDE\\crtdbg.h"

 


















__declspec(dllimport) long * __cdecl __p__crtBreakAlloc(void);


#line 290 "C:\\MSDEV\\INCLUDE\\crtdbg.h"

__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
        long
        );





__declspec(dllimport) void * __cdecl _malloc_dbg(
        size_t,
        int,
        const char *,
        int
        );

__declspec(dllimport) void * __cdecl _calloc_dbg(
        size_t,
        size_t,
        int,
        const char *,
        int
        );

__declspec(dllimport) void * __cdecl _realloc_dbg(
        void *,
        size_t,
        int,
        const char *,
        int
        );

__declspec(dllimport) void * __cdecl _expand_dbg(
        void *,
        size_t,
        int,
        const char *,
        int
        );

__declspec(dllimport) void __cdecl _free_dbg(
        void *,
        int
        );

__declspec(dllimport) size_t __cdecl _msize_dbg (
        void *,
        int
        );


 









typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const char *, int);

__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
        _CRT_ALLOC_HOOK
        );


 












__declspec(dllimport) int * __cdecl __p__crtDbgFlag(void);


#line 375 "C:\\MSDEV\\INCLUDE\\crtdbg.h"



















__declspec(dllimport) int __cdecl _CrtCheckMemory(
        void
        );

__declspec(dllimport) int __cdecl _CrtSetDbgFlag(
        int
        );

__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
        void (*pfn)(void *, void *),
        void *
        );

__declspec(dllimport) int __cdecl _CrtIsValidPointer(
        const void *,
        unsigned int,
        int
        );

__declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
        const void *
        );

__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
        const void *,
        unsigned int,
        long *,
        char **,
        int *
        );


 













typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);

__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
        _CRT_DUMP_CLIENT
        );

typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        unsigned long lCounts[5];
        unsigned long lSizes[5];
        unsigned long lHighWaterCount;
        unsigned long lTotalCount;
} _CrtMemState;


__declspec(dllimport) void __cdecl _CrtMemCheckpoint(
        _CrtMemState *
        );

__declspec(dllimport) int __cdecl _CrtMemDifference(
        _CrtMemState *,
        const _CrtMemState *,
        const _CrtMemState *
        );

__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
        const _CrtMemState *
        );

__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
        const _CrtMemState *
        );

__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(
        void
        );

#line 479 "C:\\MSDEV\\INCLUDE\\crtdbg.h"


}
















 







__declspec(dllimport) void * __cdecl operator new(
        unsigned int,
        int,
        const char *,
        int
        );








#line 521 "C:\\MSDEV\\INCLUDE\\crtdbg.h"

#line 523 "C:\\MSDEV\\INCLUDE\\crtdbg.h"


#line 526 "C:\\MSDEV\\INCLUDE\\crtdbg.h"
#line 263 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 264 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 265 "C:\\MSDEV\\MFC\\include\\afx.h"










#pragma pack(push, 4)
#line 277 "C:\\MSDEV\\MFC\\include\\afx.h"





struct __POSITION { };
typedef __POSITION* POSITION;

struct _AFX_DOUBLE  { BYTE doubleBits[sizeof(double)]; };
struct _AFX_FLOAT   { BYTE floatBits[sizeof(float)]; };















BOOL __stdcall AfxAssertFailedLine(LPCSTR lpszFileName, int nLine);

void __cdecl AfxTrace(LPCTSTR lpszFormat, ...);

void __stdcall AfxAssertValidObject(const CObject* pOb,
				LPCSTR lpszFileName, int nLine);
void __stdcall AfxDump(const CObject* pOb); 







































#line 349 "C:\\MSDEV\\MFC\\include\\afx.h"













#pragma warning(disable: 4127)  
#pragma warning(disable: 4134)  
#pragma warning(disable: 4201)  
#pragma warning(disable: 4511)  
#pragma warning(disable: 4512)  
#pragma warning(disable: 4514)  
#pragma warning(disable: 4710)  
#pragma warning(disable: 4705)  








#pragma warning(disable: 4204)  
#line 380 "C:\\MSDEV\\MFC\\include\\afx.h"

#pragma warning(disable: 4275)  
#pragma warning(disable: 4251)  
#line 384 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 385 "C:\\MSDEV\\MFC\\include\\afx.h"





#line 391 "C:\\MSDEV\\MFC\\include\\afx.h"










BOOL __stdcall AfxInitialize(BOOL bDLL = 0, DWORD dwVersion = 0x0420);







struct CRuntimeClass
{

	LPCSTR m_lpszClassName;
	int m_nObjectSize;
	UINT m_wSchema; 
	CObject* (__stdcall* m_pfnCreateObject)(); 

	CRuntimeClass* (__stdcall* m_pfnGetBaseClass)();


#line 421 "C:\\MSDEV\\MFC\\include\\afx.h"


	CObject* CreateObject();
	BOOL IsDerivedFrom(const CRuntimeClass* pBaseClass) const;


	void Store(CArchive& ar) const;
	static CRuntimeClass* __stdcall Load(CArchive& ar, UINT* pwSchemaNum);

	
	CRuntimeClass* m_pNextClass;       
};








	typedef LPWSTR BSTR;
#line 443 "C:\\MSDEV\\MFC\\include\\afx.h"
#line 444 "C:\\MSDEV\\MFC\\include\\afx.h"

struct CStringData
{
	long nRefs;     
	int nDataLength;
	int nAllocLength;
	

	TCHAR* data()
		{ return (TCHAR*)(this+1); }
};

class CString
{
public:

	CString();
	CString(const CString& stringSrc);
	CString(TCHAR ch, int nRepeat = 1);
	CString(LPCSTR lpsz);
	CString(LPCWSTR lpsz);
	CString(LPCTSTR lpch, int nLength);
	CString(const unsigned char* psz);


	
	int GetLength() const;
	BOOL IsEmpty() const;
	void Empty();                       

	TCHAR GetAt(int nIndex) const;      
	TCHAR operator[](int nIndex) const; 
	void SetAt(int nIndex, TCHAR ch);
	operator LPCTSTR() const;           

	
	const CString& operator=(const CString& stringSrc);
	const CString& operator=(TCHAR ch);



	const CString& operator=(LPCSTR lpsz);
	const CString& operator=(LPCWSTR lpsz);
	const CString& operator=(const unsigned char* psz);

	
	const CString& operator+=(const CString& string);
	const CString& operator+=(TCHAR ch);



	const CString& operator+=(LPCTSTR lpsz);

	friend CString __stdcall operator+(const CString& string1,
			const CString& string2);
	friend CString __stdcall operator+(const CString& string, TCHAR ch);
	friend CString __stdcall operator+(TCHAR ch, const CString& string);




	friend CString __stdcall operator+(const CString& string, LPCTSTR lpsz);
	friend CString __stdcall operator+(LPCTSTR lpsz, const CString& string);

	
	int Compare(LPCTSTR lpsz) const;         
	int CompareNoCase(LPCTSTR lpsz) const;   
	int Collate(LPCTSTR lpsz) const;         

	
	CString Mid(int nFirst, int nCount) const;
	CString Mid(int nFirst) const;
	CString Left(int nCount) const;
	CString Right(int nCount) const;

	CString SpanIncluding(LPCTSTR lpszCharSet) const;
	CString SpanExcluding(LPCTSTR lpszCharSet) const;

	
	void MakeUpper();
	void MakeLower();
	void MakeReverse();

	
	void TrimRight();
	void TrimLeft();

	
	
	int Find(TCHAR ch) const;               
	int ReverseFind(TCHAR ch) const;
	int FindOneOf(LPCTSTR lpszCharSet) const;

	
	int Find(LPCTSTR lpszSub) const;        

	
	void __cdecl Format(LPCTSTR lpszFormat, ...);
	void __cdecl Format(UINT nFormatID, ...);


	
	void __cdecl FormatMessageA(LPCTSTR lpszFormat, ...);
	void __cdecl FormatMessageA(UINT nFormatID, ...);
#line 549 "C:\\MSDEV\\MFC\\include\\afx.h"

	

	friend CDumpContext& __stdcall operator<<(CDumpContext& dc,
				const CString& string);
#line 555 "C:\\MSDEV\\MFC\\include\\afx.h"
	friend CArchive& __stdcall operator<<(CArchive& ar, const CString& string);
	friend CArchive& __stdcall operator>>(CArchive& ar, CString& string);

	
	BOOL LoadStringA(UINT nID);          
										

	
	void CharToOemA();
	void OemToCharA();
#line 566 "C:\\MSDEV\\MFC\\include\\afx.h"


	
	BSTR AllocSysString() const;
	BSTR SetSysString(BSTR* pbstr) const;
#line 572 "C:\\MSDEV\\MFC\\include\\afx.h"

	
	LPTSTR GetBuffer(int nMinBufLength);
	void ReleaseBuffer(int nNewLength = -1);
	LPTSTR GetBufferSetLength(int nNewLength);
	void FreeExtra();

	
	LPTSTR LockBuffer();
	void UnlockBuffer();


public:
	~CString();
	int GetAllocLength() const;

protected:
	LPTSTR m_pchData;   

	
	CStringData* GetData() const;
	void Init();
	void AllocCopy(CString& dest, int nCopyLen, int nCopyIndex, int nExtraLen) const;
	void AllocBuffer(int nLen);
	void AssignCopy(int nSrcLen, LPCTSTR lpszSrcData);
	void ConcatCopy(int nSrc1Len, LPCTSTR lpszSrc1Data, int nSrc2Len, LPCTSTR lpszSrc2Data);
	void ConcatInPlace(int nSrcLen, LPCTSTR lpszSrcData);
	void FormatV(LPCTSTR lpszFormat, va_list argList);
	void CopyBeforeWrite();
	void AllocBeforeWrite(int nLen);
	void Release();
	static void __stdcall Release(CStringData* pData);
	static int __stdcall SafeStrlen(LPCTSTR lpsz);
};


BOOL __stdcall operator==(const CString& s1, const CString& s2);
BOOL __stdcall operator==(const CString& s1, LPCTSTR s2);
BOOL __stdcall operator==(LPCTSTR s1, const CString& s2);
BOOL __stdcall operator!=(const CString& s1, const CString& s2);
BOOL __stdcall operator!=(const CString& s1, LPCTSTR s2);
BOOL __stdcall operator!=(LPCTSTR s1, const CString& s2);
BOOL __stdcall operator<(const CString& s1, const CString& s2);
BOOL __stdcall operator<(const CString& s1, LPCTSTR s2);
BOOL __stdcall operator<(LPCTSTR s1, const CString& s2);
BOOL __stdcall operator>(const CString& s1, const CString& s2);
BOOL __stdcall operator>(const CString& s1, LPCTSTR s2);
BOOL __stdcall operator>(LPCTSTR s1, const CString& s2);
BOOL __stdcall operator<=(const CString& s1, const CString& s2);
BOOL __stdcall operator<=(const CString& s1, LPCTSTR s2);
BOOL __stdcall operator<=(LPCTSTR s1, const CString& s2);
BOOL __stdcall operator>=(const CString& s1, const CString& s2);
BOOL __stdcall operator>=(const CString& s1, LPCTSTR s2);
BOOL __stdcall operator>=(LPCTSTR s1, const CString& s2);


int __cdecl _wcstombsz(char* mbstr, const wchar_t* wcstr, size_t count);
int __cdecl _mbstowcsz(wchar_t* wcstr, const char* mbstr, size_t count);


extern __declspec(dllimport) TCHAR afxChNil;
const CString& __stdcall AfxGetEmptyString();





class CObject
{
public:


	virtual CRuntimeClass* GetRuntimeClass() const;
	virtual ~CObject();  

	
	void* __stdcall operator new(size_t nSize);
	void* __stdcall operator new(size_t, void* p);
	void __stdcall operator delete(void* p);


	
	void* __stdcall operator new(size_t nSize, LPCSTR lpszFileName, int nLine);
#line 656 "C:\\MSDEV\\MFC\\include\\afx.h"

	
	
	
protected:
	CObject();
private:
	CObject(const CObject& objectSrc);              
	void operator=(const CObject& objectSrc);       


public:
	BOOL IsSerializable() const;
	BOOL IsKindOf(const CRuntimeClass* pClass) const;


	virtual void Serialize(CArchive& ar);

	
	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;


public:
	static const __declspec(dllimport) CRuntimeClass classCObject;

	static CRuntimeClass* __stdcall _GetBaseClass();
#line 684 "C:\\MSDEV\\MFC\\include\\afx.h"
};







const CObject* __cdecl AfxDynamicDownCast(CRuntimeClass* pClass, const CObject* pObject);
CObject* __cdecl AfxDynamicDownCast(CRuntimeClass* pClass, CObject* pObject);




const CObject* __cdecl AfxStaticDownCast(CRuntimeClass* pClass, const CObject* pObject);
CObject* __cdecl AfxStaticDownCast(CRuntimeClass* pClass, CObject* pObject);




#line 705 "C:\\MSDEV\\MFC\\include\\afx.h"






























#line 736 "C:\\MSDEV\\MFC\\include\\afx.h"















struct AFX_CLASSINIT
	{ AFX_CLASSINIT(CRuntimeClass* pNewClass); };



































#line 789 "C:\\MSDEV\\MFC\\include\\afx.h"


































class CException : public CObject
{
	
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCException; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CException();   
	CException(BOOL bAutoDelete);   


	void Delete();  

	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
	virtual int ReportError(UINT nType = 0x00000000L, UINT nMessageID = 0);


public:
	virtual ~CException();
	BOOL m_bAutoDelete;

	void __stdcall operator delete(void* p);
protected:
	BOOL m_bReadyForDelete;
#line 849 "C:\\MSDEV\\MFC\\include\\afx.h"
};

class CSimpleException : public CException
{
	
	

public:

	CSimpleException();
	CSimpleException(BOOL bAutoDelete);


	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);


public:
	virtual ~CSimpleException();
	BOOL m_bAutoDelete;

	void InitString();      

protected:
	BOOL m_bInitialized;
	BOOL m_bLoaded;
	TCHAR m_szMessage[128];
	UINT m_nResourceID;


	BOOL m_bReadyForDelete;
#line 881 "C:\\MSDEV\\MFC\\include\\afx.h"
};






	
	void __stdcall AfxThrowLastCleanup();
#line 891 "C:\\MSDEV\\MFC\\include\\afx.h"


void __stdcall AfxTryCleanup();




#line 899 "C:\\MSDEV\\MFC\\include\\afx.h"


struct AFX_EXCEPTION_LINK
{













	AFX_EXCEPTION_LINK* m_pLinkPrev;    
	CException* m_pException;   

	AFX_EXCEPTION_LINK();       
	~AFX_EXCEPTION_LINK()       
		{ AfxTryCleanup(); };
};


struct AFX_EXCEPTION_CONTEXT
{
	AFX_EXCEPTION_LINK* m_pLinkTop;

	
};


typedef int (__cdecl * _PNH)( size_t );

#line 936 "C:\\MSDEV\\MFC\\include\\afx.h"

_PNH __stdcall AfxGetNewHandler();
_PNH __stdcall AfxSetNewHandler(_PNH pfnNewHandler);
int __cdecl AfxNewHandler(size_t nSize);

void __stdcall AfxAbort();




















































































#line 1027 "C:\\MSDEV\\MFC\\include\\afx.h"




class CMemoryException : public CSimpleException
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMemoryException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CMemoryException();


public:
	CMemoryException(BOOL bAutoDelete);
	CMemoryException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CMemoryException();
};

class CNotSupportedException : public CSimpleException
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCNotSupportedException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CNotSupportedException();


public:
	CNotSupportedException(BOOL bAutoDelete);
	CNotSupportedException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CNotSupportedException();
};

class CArchiveException : public CException
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCArchiveException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	enum {
		none,
		generic,
		readOnly,
		endOfFile,
		writeOnly,
		badIndex,
		badClass,
		badSchema
	};


	CArchiveException(int cause = CArchiveException::none,
		LPCTSTR lpszArchiveName = 0);


	int m_cause;
	CString m_strFileName;


public:
	virtual ~CArchiveException();

	virtual void Dump(CDumpContext& dc) const;
#line 1086 "C:\\MSDEV\\MFC\\include\\afx.h"
	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
};

class CFileException : public CException
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFileException; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	enum {
		none,
		generic,
		fileNotFound,
		badPath,
		tooManyOpenFiles,
		accessDenied,
		invalidFile,
		removeCurrentDir,
		directoryFull,
		badSeek,
		hardIO,
		sharingViolation,
		lockViolation,
		diskFull,
		endOfFile
	};


	CFileException(int cause = CFileException::none, LONG lOsError = -1,
		LPCTSTR lpszArchiveName = 0);


	int     m_cause;
	LONG    m_lOsError;
	CString m_strFileName;


	
	static int __stdcall OsErrorToException(LONG lOsError);
	static int __stdcall ErrnoToException(int nErrno);

	
	static void __stdcall ThrowOsError(LONG lOsError, LPCTSTR lpszFileName = 0);
	static void __stdcall ThrowErrno(int nErrno, LPCTSTR lpszFileName = 0);


public:
	virtual ~CFileException();

	virtual void Dump(CDumpContext&) const;
#line 1137 "C:\\MSDEV\\MFC\\include\\afx.h"
	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
};




void __stdcall AfxThrowMemoryException();
void __stdcall AfxThrowNotSupportedException();
void __stdcall AfxThrowArchiveException(int cause,
	LPCTSTR lpszArchiveName = 0);
void __stdcall AfxThrowFileException(int cause, LONG lOsError = -1,
	LPCTSTR lpszFileName = 0);




class CFile : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFile; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	enum OpenFlags {
		modeRead =          0x0000,
		modeWrite =         0x0001,
		modeReadWrite =     0x0002,
		shareCompat =       0x0000,
		shareExclusive =    0x0010,
		shareDenyWrite =    0x0020,
		shareDenyRead =     0x0030,
		shareDenyNone =     0x0040,
		modeNoInherit =     0x0080,
		modeCreate =        0x1000,
		modeNoTruncate =    0x2000,
		typeText =          0x4000, 
		typeBinary =   (int)0x8000 
		};

	enum Attribute {
		normal =    0x00,
		readOnly =  0x01,
		hidden =    0x02,
		system =    0x04,
		volume =    0x08,
		directory = 0x10,
		archive =   0x20
		};

	enum SeekPosition { begin = 0x0, current = 0x1, end = 0x2 };

	enum { hFileNull = -1 };


	CFile();
	CFile(int hFile);
	CFile(LPCTSTR lpszFileName, UINT nOpenFlags);


	UINT m_hFile;
	operator HFILE() const;

	virtual DWORD GetPosition() const;
	BOOL GetStatus(CFileStatus& rStatus) const;
	virtual CString GetFileName() const;
	virtual CString GetFileTitle() const;
	virtual CString GetFilePath() const;
	virtual void SetFilePath(LPCTSTR lpszNewName);


	virtual BOOL Open(LPCTSTR lpszFileName, UINT nOpenFlags,
		CFileException* pError = 0);

	static void __stdcall Rename(LPCTSTR lpszOldName,
				LPCTSTR lpszNewName);
	static void __stdcall Remove(LPCTSTR lpszFileName);
	static BOOL __stdcall GetStatus(LPCTSTR lpszFileName,
				CFileStatus& rStatus);
	static void __stdcall SetStatus(LPCTSTR lpszFileName,
				const CFileStatus& status);

	DWORD SeekToEnd();
	void SeekToBegin();

	
	DWORD ReadHuge(void* lpBuffer, DWORD dwCount);
	void WriteHuge(const void* lpBuffer, DWORD dwCount);


	virtual CFile* Duplicate() const;

	virtual LONG Seek(LONG lOff, UINT nFrom);
	virtual void SetLength(DWORD dwNewLen);
	virtual DWORD GetLength() const;

	virtual UINT Read(void* lpBuf, UINT nCount);
	virtual void Write(const void* lpBuf, UINT nCount);

	virtual void LockRange(DWORD dwPos, DWORD dwCount);
	virtual void UnlockRange(DWORD dwPos, DWORD dwCount);

	virtual void Abort();
	virtual void Flush();
	virtual void Close();


public:
	virtual ~CFile();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 1249 "C:\\MSDEV\\MFC\\include\\afx.h"
	enum BufferCommand { bufferRead, bufferWrite, bufferCommit, bufferCheck };
	virtual UINT GetBufferPtr(UINT nCommand, UINT nCount = 0,
		void** ppBufStart = 0, void** ppBufMax = 0);

protected:
	BOOL m_bCloseOnDelete;
	CString m_strFileName;
};




class CStdioFile : public CFile
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCStdioFile; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CStdioFile();
	CStdioFile(FILE* pOpenStream);
	CStdioFile(LPCTSTR lpszFileName, UINT nOpenFlags);


	FILE* m_pStream;    
						


	
	virtual void WriteString(LPCTSTR lpsz);
	virtual LPTSTR ReadString(LPTSTR lpsz, UINT nMax);
	virtual BOOL ReadString(CString& rString);


public:
	virtual ~CStdioFile();

	void Dump(CDumpContext& dc) const;
#line 1287 "C:\\MSDEV\\MFC\\include\\afx.h"
	virtual DWORD GetPosition() const;
	virtual BOOL Open(LPCTSTR lpszFileName, UINT nOpenFlags,
		CFileException* pError = 0);
	virtual UINT Read(void* lpBuf, UINT nCount);
	virtual void Write(const void* lpBuf, UINT nCount);
	virtual LONG Seek(LONG lOff, UINT nFrom);
	virtual void Abort();
	virtual void Flush();
	virtual void Close();

	
	virtual CFile* Duplicate() const;
	virtual void LockRange(DWORD dwPos, DWORD dwCount);
	virtual void UnlockRange(DWORD dwPos, DWORD dwCount);
};




class CMemFile : public CFile
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMemFile; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CMemFile(UINT nGrowBytes = 1024);
	CMemFile(BYTE* lpBuffer, UINT nBufferSize, UINT nGrowBytes = 0);


	void Attach(BYTE* lpBuffer, UINT nBufferSize, UINT nGrowBytes = 0);
	BYTE* Detach();


protected:
	virtual BYTE* Alloc(DWORD nBytes);
	virtual BYTE* Realloc(BYTE* lpMem, DWORD nBytes);
	virtual BYTE* Memcpy(BYTE* lpMemTarget, const BYTE* lpMemSource, UINT nBytes);
	virtual void Free(BYTE* lpMem);
	virtual void GrowFile(DWORD dwNewLen);


protected:
	UINT m_nGrowBytes;
	DWORD m_nPosition;
	DWORD m_nBufferSize;
	DWORD m_nFileSize;
	BYTE* m_lpBuffer;
	BOOL m_bAutoDelete;

public:
	virtual ~CMemFile();

	virtual void Dump(CDumpContext& dc) const;
	virtual void AssertValid() const;
#line 1342 "C:\\MSDEV\\MFC\\include\\afx.h"
	virtual DWORD GetPosition() const;
	BOOL GetStatus(CFileStatus& rStatus) const;
	virtual LONG Seek(LONG lOff, UINT nFrom);
	virtual void SetLength(DWORD dwNewLen);
	virtual UINT Read(void* lpBuf, UINT nCount);
	virtual void Write(const void* lpBuf, UINT nCount);
	virtual void Abort();
	virtual void Flush();
	virtual void Close();
	virtual UINT GetBufferPtr(UINT nCommand, UINT nCount = 0,
		void** ppBufStart = 0, void** ppBufMax = 0);

	
	virtual CFile* Duplicate() const;
	virtual void LockRange(DWORD dwPos, DWORD dwCount);
	virtual void UnlockRange(DWORD dwPos, DWORD dwCount);
};






class CFileFind : public CObject
{
public:
	CFileFind();
	virtual ~CFileFind();


public:
	DWORD GetLength() const;

	__int64 GetLength64() const;
#line 1377 "C:\\MSDEV\\MFC\\include\\afx.h"
	virtual CString GetFileName() const;
	virtual CString GetFilePath() const;
	virtual CString GetFileTitle() const;
	virtual CString GetFileURL() const;
	virtual CString GetRoot() const;

	virtual BOOL GetLastWriteTime(FILETIME* pTimeStamp) const;
	virtual BOOL GetLastAccessTime(FILETIME* pTimeStamp) const;
	virtual BOOL GetCreationTime(FILETIME* pTimeStamp) const;
	virtual BOOL GetLastWriteTime(CTime& refTime) const;
	virtual BOOL GetLastAccessTime(CTime& refTime) const;
	virtual BOOL GetCreationTime(CTime& refTime) const;

	virtual BOOL MatchesMask(DWORD dwMask) const;

	virtual BOOL IsDots() const;
	
	BOOL IsReadOnly() const;
	BOOL IsDirectory() const;
	BOOL IsCompressed() const;
	BOOL IsSystem() const;
	BOOL IsHidden() const;
	BOOL IsTemporary() const;
	BOOL IsNormal() const;
	BOOL IsArchived() const;


	void Close();
	virtual BOOL FindFile(LPCTSTR pstrName = 0, DWORD dwUnused = 0);
	virtual BOOL FindNextFileA();

protected:
	virtual void CloseContext();


protected:
	void* m_pFoundInfo;
	void* m_pNextInfo;
	HANDLE m_hContext;
	BOOL m_bGotLast;
	CString m_strRoot;
	TCHAR m_chDirSeparator;     


	void Dump(CDumpContext& dc) const;
	void AssertValid() const;
#line 1424 "C:\\MSDEV\\MFC\\include\\afx.h"

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFileFind; virtual CRuntimeClass* GetRuntimeClass() const;
};

#line 1429 "C:\\MSDEV\\MFC\\include\\afx.h"




class CTimeSpan
{
public:


	CTimeSpan();
	CTimeSpan(time_t time);
	CTimeSpan(LONG lDays, int nHours, int nMins, int nSecs);

	CTimeSpan(const CTimeSpan& timeSpanSrc);
	const CTimeSpan& operator=(const CTimeSpan& timeSpanSrc);


	
	LONG GetDays() const;   
	LONG GetTotalHours() const;
	int GetHours() const;
	LONG GetTotalMinutes() const;
	int GetMinutes() const;
	LONG GetTotalSeconds() const;
	int GetSeconds() const;


	
	CTimeSpan operator-(CTimeSpan timeSpan) const;
	CTimeSpan operator+(CTimeSpan timeSpan) const;
	const CTimeSpan& operator+=(CTimeSpan timeSpan);
	const CTimeSpan& operator-=(CTimeSpan timeSpan);
	BOOL operator==(CTimeSpan timeSpan) const;
	BOOL operator!=(CTimeSpan timeSpan) const;
	BOOL operator<(CTimeSpan timeSpan) const;
	BOOL operator>(CTimeSpan timeSpan) const;
	BOOL operator<=(CTimeSpan timeSpan) const;
	BOOL operator>=(CTimeSpan timeSpan) const;





	CString Format(LPCTSTR pFormat) const;
	CString Format(UINT nID) const;

	

	friend CDumpContext& __stdcall operator<<(CDumpContext& dc,CTimeSpan timeSpan);
#line 1479 "C:\\MSDEV\\MFC\\include\\afx.h"
	friend CArchive& __stdcall operator<<(CArchive& ar, CTimeSpan timeSpan);
	friend CArchive& __stdcall operator>>(CArchive& ar, CTimeSpan& rtimeSpan);

private:
	time_t m_timeSpan;
	friend class CTime;
};

class CTime
{
public:


	static CTime __stdcall GetTickCount();

	CTime();
	CTime(time_t time);
	CTime(int nYear, int nMonth, int nDay, int nHour, int nMin, int nSec,
		int nDST = -1);
	CTime(WORD wDosDate, WORD wDosTime, int nDST = -1);
	CTime(const CTime& timeSrc);

	CTime(const SYSTEMTIME& sysTime, int nDST = -1);
	CTime(const FILETIME& fileTime, int nDST = -1);
	const CTime& operator=(const CTime& timeSrc);
	const CTime& operator=(time_t t);


	struct tm* GetGmtTm(struct tm* ptm = 0) const;
	struct tm* GetLocalTm(struct tm* ptm = 0) const;

	time_t GetTime() const;
	int GetYear() const;
	int GetMonth() const;       
	int GetDay() const;         
	int GetHour() const;
	int GetMinute() const;
	int GetSecond() const;
	int GetDayOfWeek() const;   


	
	CTimeSpan operator-(CTime time) const;
	CTime operator-(CTimeSpan timeSpan) const;
	CTime operator+(CTimeSpan timeSpan) const;
	const CTime& operator+=(CTimeSpan timeSpan);
	const CTime& operator-=(CTimeSpan timeSpan);
	BOOL operator==(CTime time) const;
	BOOL operator!=(CTime time) const;
	BOOL operator<(CTime time) const;
	BOOL operator>(CTime time) const;
	BOOL operator<=(CTime time) const;
	BOOL operator>=(CTime time) const;

	
	CString Format(LPCTSTR pFormat) const;
	CString FormatGmt(LPCTSTR pFormat) const;
	CString Format(UINT nFormatID) const;
	CString FormatGmt(UINT nFormatID) const;







	

	friend CDumpContext& __stdcall operator<<(CDumpContext& dc, CTime time);
#line 1549 "C:\\MSDEV\\MFC\\include\\afx.h"
	friend CArchive& __stdcall operator<<(CArchive& ar, CTime time);
	friend CArchive& __stdcall operator>>(CArchive& ar, CTime& rtime);

private:
	time_t m_time;
};




struct CFileStatus
{
	CTime m_ctime;          
	CTime m_mtime;          
	CTime m_atime;          
	LONG m_size;            
	BYTE m_attribute;       
	BYTE _m_padding;        
	TCHAR m_szFullName[260]; 


	void Dump(CDumpContext& dc) const;
#line 1572 "C:\\MSDEV\\MFC\\include\\afx.h"
};





BOOL __stdcall AfxIsValidAddress(const void* lp,
			UINT nBytes, BOOL bReadWrite = 1);
BOOL __stdcall AfxIsValidString(LPCWSTR lpsz, int nLength = -1);
BOOL __stdcall AfxIsValidString(LPCSTR lpsz, int nLength = -1);




void* __cdecl operator new(size_t nSize, LPCSTR lpszFileName, int nLine);


void* __stdcall AfxAllocMemoryDebug(size_t nSize, BOOL bIsObject,
	LPCSTR lpszFileName, int nLine);
void __stdcall AfxFreeMemoryDebug(void* pbData, BOOL bIsObject);


BOOL __stdcall AfxDumpMemoryLeaks();


BOOL __stdcall AfxIsMemoryBlock(const void* p, UINT nBytes,
	LONG* plRequestNumber = 0);


BOOL __stdcall AfxCheckMemory();



enum AfxMemDF 
{
	allocMemDF          = 0x01,         
	delayFreeMemDF      = 0x02,         
	checkAlwaysMemDF    = 0x04          
};










#line 1622 "C:\\MSDEV\\MFC\\include\\afx.h"


BOOL __stdcall AfxEnableMemoryTracking(BOOL bTrack);


BOOL __stdcall AfxDiagnosticInit(void);


typedef BOOL (__stdcall* AFX_ALLOC_HOOK)(size_t nSize, BOOL bObject, LONG lRequestNumber);


AFX_ALLOC_HOOK __stdcall AfxSetAllocHook(AFX_ALLOC_HOOK pfnAllocHook);


void __stdcall AfxSetAllocStop(LONG lRequestNumber);


struct CMemoryState
{

	enum blockUsage
	{
		freeBlock,    
		objectBlock,  
		bitBlock,     
		crtBlock,
		ignoredBlock,
		nBlockUseMax  
	};

	_CrtMemState m_memState;
	LONG m_lCounts[nBlockUseMax];
	LONG m_lSizes[nBlockUseMax];
	LONG m_lHighWaterCount;
	LONG m_lTotalCount;

	CMemoryState();


	void Checkpoint();  
	BOOL Difference(const CMemoryState& oldState,
					const CMemoryState& newState);  
	void UpdateData();

	
	void DumpStatistics() const;
	void DumpAllObjectsSince() const;
};


void __stdcall AfxDoForAllObjects(void (__cdecl *pfn)(CObject* pObject, void* pContext),
	void* pContext);
void __stdcall AfxDoForAllClasses(void (__cdecl *pfn)(const CRuntimeClass* pClass,
	void* pContext), void* pContext);

















#line 1694 "C:\\MSDEV\\MFC\\include\\afx.h"





class CPtrArray;
class CMapPtrToPtr;
class CDocument;

class CArchive
{
public:

	enum Mode { store = 0, load = 1, bNoFlushOnDelete = 2, bNoByteSwap = 4 };

	CArchive(CFile* pFile, UINT nMode, int nBufSize = 4096, void* lpBuf = 0);
	~CArchive();


	BOOL IsLoading() const;
	BOOL IsStoring() const;
	BOOL IsByteSwapping() const;
	BOOL IsBufferEmpty() const;

	CFile* GetFile() const;
	UINT GetObjectSchema(); 
	void SetObjectSchema(UINT nSchema);

	
	
	CDocument* m_pDocument;


	UINT Read(void* lpBuf, UINT nMax);
	void Write(const void* lpBuf, UINT nMax);
	void Flush();
	void Close();
	void Abort();   

	
	void WriteString(LPCTSTR lpsz);
	LPTSTR ReadString(LPTSTR lpsz, UINT nMax);
	BOOL ReadString(CString& rString);

public:
	
	
	friend CArchive& __stdcall operator<<(CArchive& ar, const CObject* pOb);

	friend CArchive& __stdcall operator>>(CArchive& ar, CObject*& pOb);
	friend CArchive& __stdcall operator>>(CArchive& ar, const CObject*& pOb);

	
	CArchive& operator<<(BYTE by);
	CArchive& operator<<(WORD w);
	CArchive& operator<<(LONG l);
	CArchive& operator<<(DWORD dw);
	CArchive& operator<<(float f);
	CArchive& operator<<(double d);

	CArchive& operator<<(int i);
	CArchive& operator<<(short w);
	CArchive& operator<<(char ch);
	CArchive& operator<<(unsigned u);

	
	CArchive& operator>>(BYTE& by);
	CArchive& operator>>(WORD& w);
	CArchive& operator>>(DWORD& dw);
	CArchive& operator>>(LONG& l);
	CArchive& operator>>(float& f);
	CArchive& operator>>(double& d);

	CArchive& operator>>(int& i);
	CArchive& operator>>(short& w);
	CArchive& operator>>(char& ch);
	CArchive& operator>>(unsigned& u);

	
	CObject* ReadObject(const CRuntimeClass* pClass);
	void WriteObject(const CObject* pOb);
	
	void MapObject(const CObject* pOb);

	
	void WriteClass(const CRuntimeClass* pClassRef);
	CRuntimeClass* ReadClass(const CRuntimeClass* pClassRefRequested = 0,
		UINT* pSchema = 0, DWORD* pObTag = 0);
	void SerializeClass(const CRuntimeClass* pClassRef);

	
	void SetStoreParams(UINT nHashSize = 2053, UINT nBlockSize = 128);
	void SetLoadParams(UINT nGrowBy = 1024);


public:
	BOOL m_bForceFlat;  
	BOOL m_bDirectBuffer;   
	void FillBuffer(UINT nBytesNeeded);
	void CheckCount();  

	
	DWORD ReadCount();
	void WriteCount(DWORD dwCount);

	
	UINT m_nObjectSchema;
	CString m_strFileName;

protected:
	
	CArchive(const CArchive& arSrc);
	void operator=(const CArchive& arSrc);

	BOOL m_nMode;
	BOOL m_bUserBuf;
	int m_nBufSize;
	CFile* m_pFile;
	BYTE* m_lpBufCur;
	BYTE* m_lpBufMax;
	BYTE* m_lpBufStart;

	
	UINT m_nMapCount;
	union
	{
		CPtrArray* m_pLoadArray;
		CMapPtrToPtr* m_pStoreMap;
	};
	
	CMapPtrToPtr* m_pSchemaMap;

	
	UINT m_nGrowSize;
	UINT m_nHashSize;
};




class CDumpContext
{
public:
	CDumpContext(CFile* pFile = 0);


	int GetDepth() const;      
	void SetDepth(int nNewDepth);


	CDumpContext& operator<<(LPCTSTR lpsz);



	CDumpContext& operator<<(LPCWSTR lpsz); 
#line 1850 "C:\\MSDEV\\MFC\\include\\afx.h"
	CDumpContext& operator<<(const void* lp);
	CDumpContext& operator<<(const CObject* pOb);
	CDumpContext& operator<<(const CObject& ob);
	CDumpContext& operator<<(BYTE by);
	CDumpContext& operator<<(WORD w);
	CDumpContext& operator<<(UINT u);
	CDumpContext& operator<<(LONG l);
	CDumpContext& operator<<(DWORD dw);
	CDumpContext& operator<<(float f);
	CDumpContext& operator<<(double d);
	CDumpContext& operator<<(int n);
	void HexDump(LPCTSTR lpszLine, BYTE* pby, int nBytes, int nWidth);
	void Flush();


protected:
	
	CDumpContext(const CDumpContext& dcSrc);
	void operator=(const CDumpContext& dcSrc);
	void OutputString(LPCTSTR lpsz);

	int m_nDepth;

public:
	CFile* m_pFile;
};


extern __declspec(dllimport) CDumpContext afxDump;
extern __declspec(dllimport) BOOL afxTraceEnabled;
#line 1881 "C:\\MSDEV\\MFC\\include\\afx.h"





#pragma pack(pop)
#line 1888 "C:\\MSDEV\\MFC\\include\\afx.h"


	#line 1 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


















#pragma component(minrebuild, off)
#line 21 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

#pragma component(mintypeinfo, on)
#line 24 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


#pragma pack(push, 4)
#line 28 "C:\\MSDEV\\MFC\\include\\afxcoll.h"





	
	class CByteArray;           
	class CWordArray;           
	class CDWordArray;          
	class CUIntArray;           
	class CPtrArray;            
	class CObArray;             

	
	class CPtrList;             
	class CObList;              

	
	class CMapWordToOb;         
	class CMapWordToPtr;        
	class CMapPtrToWord;        
	class CMapPtrToPtr;         

	
	class CStringArray;         
	class CStringList;          
	class CMapStringToPtr;      
	class CMapStringToOb;       
	class CMapStringToString;   








class CByteArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCByteArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CByteArray* &pOb);
public:


	CByteArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	BYTE GetAt(int nIndex) const;
	void SetAt(int nIndex, BYTE newElement);
	BYTE& ElementAt(int nIndex);

	
	const BYTE* GetData() const;
	BYTE* GetData();

	
	void SetAtGrow(int nIndex, BYTE newElement);
	int Add(BYTE newElement);
	int Append(const CByteArray& src);
	void Copy(const CByteArray& src);

	
	BYTE operator[](int nIndex) const;
	BYTE& operator[](int nIndex);

	
	void InsertAt(int nIndex, BYTE newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CByteArray* pNewArray);


protected:
	BYTE* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CByteArray();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 123 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef BYTE BASE_TYPE;
	typedef BYTE BASE_ARG_TYPE;
};




class CWordArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCWordArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CWordArray* &pOb);
public:


	CWordArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	WORD GetAt(int nIndex) const;
	void SetAt(int nIndex, WORD newElement);
	WORD& ElementAt(int nIndex);

	
	const WORD* GetData() const;
	WORD* GetData();

	
	void SetAtGrow(int nIndex, WORD newElement);
	int Add(WORD newElement);
	int Append(const CWordArray& src);
	void Copy(const CWordArray& src);

	
	WORD operator[](int nIndex) const;
	WORD& operator[](int nIndex);

	
	void InsertAt(int nIndex, WORD newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CWordArray* pNewArray);


protected:
	WORD* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CWordArray();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 191 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef WORD BASE_TYPE;
	typedef WORD BASE_ARG_TYPE;
};




class CDWordArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCDWordArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CDWordArray* &pOb);
public:


	CDWordArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	DWORD GetAt(int nIndex) const;
	void SetAt(int nIndex, DWORD newElement);
	DWORD& ElementAt(int nIndex);

	
	const DWORD* GetData() const;
	DWORD* GetData();

	
	void SetAtGrow(int nIndex, DWORD newElement);
	int Add(DWORD newElement);
	int Append(const CDWordArray& src);
	void Copy(const CDWordArray& src);

	
	DWORD operator[](int nIndex) const;
	DWORD& operator[](int nIndex);

	
	void InsertAt(int nIndex, DWORD newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CDWordArray* pNewArray);


protected:
	DWORD* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CDWordArray();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 259 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef DWORD BASE_TYPE;
	typedef DWORD BASE_ARG_TYPE;
};




class CUIntArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCUIntArray; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CUIntArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	UINT GetAt(int nIndex) const;
	void SetAt(int nIndex, UINT newElement);
	UINT& ElementAt(int nIndex);

	
	const UINT* GetData() const;
	UINT* GetData();

	
	void SetAtGrow(int nIndex, UINT newElement);
	int Add(UINT newElement);
	int Append(const CUIntArray& src);
	void Copy(const CUIntArray& src);

	
	UINT operator[](int nIndex) const;
	UINT& operator[](int nIndex);

	
	void InsertAt(int nIndex, UINT newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CUIntArray* pNewArray);


protected:
	UINT* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CUIntArray();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 325 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef UINT BASE_TYPE;
	typedef UINT BASE_ARG_TYPE;
};




class CPtrArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPtrArray; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CPtrArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	void* GetAt(int nIndex) const;
	void SetAt(int nIndex, void* newElement);
	void*& ElementAt(int nIndex);

	
	const void** GetData() const;
	void** GetData();

	
	void SetAtGrow(int nIndex, void* newElement);
	int Add(void* newElement);
	int Append(const CPtrArray& src);
	void Copy(const CPtrArray& src);

	
	void* operator[](int nIndex) const;
	void*& operator[](int nIndex);

	
	void InsertAt(int nIndex, void* newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CPtrArray* pNewArray);


protected:
	void** m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CPtrArray();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 391 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef void* BASE_TYPE;
	typedef void* BASE_ARG_TYPE;
};




class CObArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCObArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CObArray* &pOb);
public:


	CObArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	CObject* GetAt(int nIndex) const;
	void SetAt(int nIndex, CObject* newElement);
	CObject*& ElementAt(int nIndex);

	
	const CObject** GetData() const;
	CObject** GetData();

	
	void SetAtGrow(int nIndex, CObject* newElement);
	int Add(CObject* newElement);
	int Append(const CObArray& src);
	void Copy(const CObArray& src);

	
	CObject* operator[](int nIndex) const;
	CObject*& operator[](int nIndex);

	
	void InsertAt(int nIndex, CObject* newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CObArray* pNewArray);


protected:
	CObject** m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CObArray();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 459 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef CObject* BASE_TYPE;
	typedef CObject* BASE_ARG_TYPE;
};




class CStringArray : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCStringArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CStringArray* &pOb);
public:


	CStringArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	CString GetAt(int nIndex) const;
	void SetAt(int nIndex, LPCTSTR newElement);
	CString& ElementAt(int nIndex);

	
	const CString* GetData() const;
	CString* GetData();

	
	void SetAtGrow(int nIndex, LPCTSTR newElement);
	int Add(LPCTSTR newElement);
	int Append(const CStringArray& src);
	void Copy(const CStringArray& src);

	
	CString operator[](int nIndex) const;
	CString& operator[](int nIndex);

	
	void InsertAt(int nIndex, LPCTSTR newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CStringArray* pNewArray);


protected:
	CString* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CStringArray();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 527 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef CString BASE_TYPE;
	typedef LPCTSTR BASE_ARG_TYPE;
};




class CPtrList : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPtrList; virtual CRuntimeClass* GetRuntimeClass() const;

protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		void* data;
	};
public:


	CPtrList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	void*& GetHead();
	void* GetHead() const;
	void*& GetTail();
	void* GetTail() const;


	
	void* RemoveHead();
	void* RemoveTail();

	
	POSITION AddHead(void* newElement);
	POSITION AddTail(void* newElement);

	
	void AddHead(CPtrList* pNewList);
	void AddTail(CPtrList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	void*& GetNext(POSITION& rPosition); 
	void* GetNext(POSITION& rPosition) const; 
	void*& GetPrev(POSITION& rPosition); 
	void* GetPrev(POSITION& rPosition) const; 

	
	void*& GetAt(POSITION position);
	void* GetAt(POSITION position) const;
	void SetAt(POSITION pos, void* newElement);
	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, void* newElement);
	POSITION InsertAfter(POSITION position, void* newElement);

	
	POSITION Find(void* searchValue, POSITION startAfter = 0) const;
						
						
	POSITION FindIndex(int nIndex) const;
						


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CPtrList();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 624 "C:\\MSDEV\\MFC\\include\\afxcoll.h"
	
	typedef void* BASE_TYPE;
	typedef void* BASE_ARG_TYPE;
};




class CObList : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCObList; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CObList* &pOb);

protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		CObject* data;
	};
public:


	CObList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	CObject*& GetHead();
	CObject* GetHead() const;
	CObject*& GetTail();
	CObject* GetTail() const;


	
	CObject* RemoveHead();
	CObject* RemoveTail();

	
	POSITION AddHead(CObject* newElement);
	POSITION AddTail(CObject* newElement);

	
	void AddHead(CObList* pNewList);
	void AddTail(CObList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	CObject*& GetNext(POSITION& rPosition); 
	CObject* GetNext(POSITION& rPosition) const; 
	CObject*& GetPrev(POSITION& rPosition); 
	CObject* GetPrev(POSITION& rPosition) const; 

	
	CObject*& GetAt(POSITION position);
	CObject* GetAt(POSITION position) const;
	void SetAt(POSITION pos, CObject* newElement);
	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, CObject* newElement);
	POSITION InsertAfter(POSITION position, CObject* newElement);

	
	POSITION Find(CObject* searchValue, POSITION startAfter = 0) const;
						
						
	POSITION FindIndex(int nIndex) const;
						


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CObList();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 721 "C:\\MSDEV\\MFC\\include\\afxcoll.h"
	
	typedef CObject* BASE_TYPE;
	typedef CObject* BASE_ARG_TYPE;
};




class CStringList : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCStringList; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CStringList* &pOb);

protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		CString data;
	};
public:


	CStringList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	CString& GetHead();
	CString GetHead() const;
	CString& GetTail();
	CString GetTail() const;


	
	CString RemoveHead();
	CString RemoveTail();

	
	POSITION AddHead(LPCTSTR newElement);
	POSITION AddTail(LPCTSTR newElement);

	
	void AddHead(CStringList* pNewList);
	void AddTail(CStringList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	CString& GetNext(POSITION& rPosition); 
	CString GetNext(POSITION& rPosition) const; 
	CString& GetPrev(POSITION& rPosition); 
	CString GetPrev(POSITION& rPosition) const; 

	
	CString& GetAt(POSITION position);
	CString GetAt(POSITION position) const;
	void SetAt(POSITION pos, LPCTSTR newElement);
	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, LPCTSTR newElement);
	POSITION InsertAfter(POSITION position, LPCTSTR newElement);

	
	POSITION Find(LPCTSTR searchValue, POSITION startAfter = 0) const;
						
						
	POSITION FindIndex(int nIndex) const;
						


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CStringList();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 818 "C:\\MSDEV\\MFC\\include\\afxcoll.h"
	
	typedef CString BASE_TYPE;
	typedef LPCTSTR BASE_ARG_TYPE;
};




class CMapWordToPtr : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMapWordToPtr; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		WORD key;
		void* value;
	};

public:


	CMapWordToPtr(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(WORD key, void*& rValue) const;


	
	void*& operator[](WORD key);

	
	void SetAt(WORD key, void* newValue);

	
	BOOL RemoveKey(WORD key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, WORD& rKey, void*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(WORD key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(WORD, UINT&) const;

public:
	~CMapWordToPtr();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 895 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


protected:
	
	typedef WORD BASE_KEY;
	typedef WORD BASE_ARG_KEY;
	typedef void* BASE_VALUE;
	typedef void* BASE_ARG_VALUE;
};




class CMapPtrToWord : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMapPtrToWord; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		void* key;
		WORD value;
	};

public:


	CMapPtrToWord(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(void* key, WORD& rValue) const;


	
	WORD& operator[](void* key);

	
	void SetAt(void* key, WORD newValue);

	
	BOOL RemoveKey(void* key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, void*& rKey, WORD& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(void* key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(void*, UINT&) const;

public:
	~CMapPtrToWord();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 977 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


protected:
	
	typedef void* BASE_KEY;
	typedef void* BASE_ARG_KEY;
	typedef WORD BASE_VALUE;
	typedef WORD BASE_ARG_VALUE;
};




class CMapPtrToPtr : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMapPtrToPtr; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		void* key;
		void* value;
	};

public:


	CMapPtrToPtr(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(void* key, void*& rValue) const;


	
	void*& operator[](void* key);

	
	void SetAt(void* key, void* newValue);

	
	BOOL RemoveKey(void* key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, void*& rKey, void*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(void* key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(void*, UINT&) const;

public:
	~CMapPtrToPtr();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 1059 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

	void* GetValueAt(void* key) const;


protected:
	
	typedef void* BASE_KEY;
	typedef void* BASE_ARG_KEY;
	typedef void* BASE_VALUE;
	typedef void* BASE_ARG_VALUE;
};




class CMapWordToOb : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCMapWordToOb; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CMapWordToOb* &pOb);
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		WORD key;
		CObject* value;
	};

public:


	CMapWordToOb(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(WORD key, CObject*& rValue) const;


	
	CObject*& operator[](WORD key);

	
	void SetAt(WORD key, CObject* newValue);

	
	BOOL RemoveKey(WORD key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, WORD& rKey, CObject*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(WORD key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(WORD, UINT&) const;

public:
	~CMapWordToOb();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 1145 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


protected:
	
	typedef WORD BASE_KEY;
	typedef WORD BASE_ARG_KEY;
	typedef CObject* BASE_VALUE;
	typedef CObject* BASE_ARG_VALUE;
};




class CMapStringToPtr : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMapStringToPtr; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		CString key;
		void* value;
	};

public:


	CMapStringToPtr(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(LPCTSTR key, void*& rValue) const;
	BOOL LookupKey(LPCTSTR key, LPCTSTR& rKey) const;


	
	void*& operator[](LPCTSTR key);

	
	void SetAt(LPCTSTR key, void* newValue);

	
	BOOL RemoveKey(LPCTSTR key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, CString& rKey, void*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(LPCTSTR key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(LPCTSTR, UINT&) const;

public:
	~CMapStringToPtr();

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 1228 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef CString BASE_KEY;
	typedef LPCTSTR BASE_ARG_KEY;
	typedef void* BASE_VALUE;
	typedef void* BASE_ARG_VALUE;
};




class CMapStringToOb : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCMapStringToOb; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CMapStringToOb* &pOb);
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		CString key;
		CObject* value;
	};

public:


	CMapStringToOb(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(LPCTSTR key, CObject*& rValue) const;
	BOOL LookupKey(LPCTSTR key, LPCTSTR& rKey) const;


	
	CObject*& operator[](LPCTSTR key);

	
	void SetAt(LPCTSTR key, CObject* newValue);

	
	BOOL RemoveKey(LPCTSTR key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, CString& rKey, CObject*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(LPCTSTR key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(LPCTSTR, UINT&) const;

public:
	~CMapStringToOb();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 1312 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef CString BASE_KEY;
	typedef LPCTSTR BASE_ARG_KEY;
	typedef CObject* BASE_VALUE;
	typedef CObject* BASE_ARG_VALUE;
};




class CMapStringToString : public CObject
{

	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static __declspec(dllimport) CRuntimeClass classCMapStringToString; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CMapStringToString* &pOb);
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		CString key;
		CString value;
	};

public:


	CMapStringToString(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(LPCTSTR key, CString& rValue) const;
	BOOL LookupKey(LPCTSTR key, LPCTSTR& rKey) const;


	
	CString& operator[](LPCTSTR key);

	
	void SetAt(LPCTSTR key, LPCTSTR newValue);

	
	BOOL RemoveKey(LPCTSTR key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, CString& rKey, CString& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(LPCTSTR key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(LPCTSTR, UINT&) const;

public:
	~CMapStringToString();

	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 1396 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

protected:
	
	typedef CString BASE_KEY;
	typedef LPCTSTR BASE_ARG_KEY;
	typedef CString BASE_VALUE;
	typedef LPCTSTR BASE_ARG_VALUE;
};















#pragma pack(pop)
#line 1421 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


	#line 1 "C:\\MSDEV\\MFC\\include\\afxstat_.h"














#pragma pack(push, 4)
#line 17 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


	#line 1 "C:\\MSDEV\\MFC\\include\\afxtls_.h"














#pragma pack(push, 4)
#line 17 "C:\\MSDEV\\MFC\\include\\afxtls_.h"






class CSimpleList;
class CThreadSlotData;                  
class CThreadLocalObject;               
class CProcessLocalObject;              
class CNoTrackObject;








class CSimpleList
{
public:
	CSimpleList(int nNextOffset = 0);
	void Construct(int nNextOffset);


	BOOL IsEmpty() const;
	void AddHead(void* p);
	void RemoveAll();
	void* GetHead() const;
	void* GetNext(void* p) const;
	BOOL Remove(void* p);


	void* m_pHead;
	size_t m_nNextOffset;

	void** GetNextPtr(void* p) const;   
};

inline CSimpleList::CSimpleList(int nNextOffset)
	{ m_pHead = 0; m_nNextOffset = nNextOffset; }
inline void CSimpleList::Construct(int nNextOffset)
	{ do { if (!(m_pHead == 0) && AfxAssertFailedLine("C:\\MSDEV\\MFC\\include\\afxtls_.h", 60)) __asm { int 3 }; } while (0); m_nNextOffset = nNextOffset; }
inline BOOL CSimpleList::IsEmpty() const
	{ return m_pHead == 0; }
inline void** CSimpleList::GetNextPtr(void* p) const
	{ do { if (!(p != 0) && AfxAssertFailedLine("C:\\MSDEV\\MFC\\include\\afxtls_.h", 64)) __asm { int 3 }; } while (0); return (void**)((BYTE*)p+m_nNextOffset); }
inline void CSimpleList::RemoveAll()
	{ m_pHead = 0; }
inline void* CSimpleList::GetHead() const
	{ return m_pHead; }
inline void* CSimpleList::GetNext(void* prevElement) const
	{ return *GetNextPtr(prevElement); }

template<class TYPE>
class CTypedSimpleList : public CSimpleList
{
public:
	CTypedSimpleList(int nNextOffset = 0)
		: CSimpleList(nNextOffset) { }
	void AddHead(TYPE p)
		{ CSimpleList::AddHead(p); }
	TYPE GetHead()
		{ return (TYPE)CSimpleList::GetHead(); }
	TYPE GetNext(TYPE p)
		{ return (TYPE)CSimpleList::GetNext(p); }
	BOOL Remove(TYPE p)
		{ return CSimpleList::Remove((TYPE)p); }
	operator TYPE()
		{ return (TYPE)CSimpleList::GetHead(); }
};




struct CThreadData; 
struct CSlotData;   

class CThreadSlotData
{
public:
	CThreadSlotData();


	int AllocSlot();
	void FreeSlot(int nSlot);
	void* GetValue(int nSlot);
	void SetValue(int nSlot, void* pValue);
	
	void DeleteValues(HINSTANCE hInst, BOOL bAll = 0);
	
	void AssignInstance(HINSTANCE hInst);


	DWORD m_tlsIndex;   

	int m_nAlloc;       
	int m_nRover;       
	int m_nMax;         
	CSlotData* m_pSlotData; 
	CTypedSimpleList<CThreadData*> m_list;  
	CRITICAL_SECTION m_sect;

	void* GetThreadValue(int nSlot); 
	void* __stdcall operator new(size_t, void* p)
		{ return p; }
	void DeleteValues(CThreadData* pData, HINSTANCE hInst);
	~CThreadSlotData();
};

class CNoTrackObject
{
public:
	void* __stdcall operator new(size_t nSize);
	void __stdcall operator delete(void*);


	void* __stdcall operator new(size_t nSize, LPCSTR, int);
#line 137 "C:\\MSDEV\\MFC\\include\\afxtls_.h"
	virtual ~CNoTrackObject() { }
};

class CThreadLocalObject
{
public:

	CNoTrackObject* GetData(CNoTrackObject* (__stdcall* pfnCreateObject)());
	CNoTrackObject* GetDataNA();


	int m_nSlot;
	~CThreadLocalObject();
};

class CProcessLocalObject
{
public:

	CNoTrackObject* GetData(CNoTrackObject* (__stdcall* pfnCreateObject)());


	CNoTrackObject* volatile m_pObject;
	~CProcessLocalObject();
};

template<class TYPE>
class CThreadLocal : public CThreadLocalObject
{

public:
	inline TYPE* GetData()
	{
		TYPE* pData = (TYPE*)CThreadLocalObject::GetData(&CreateObject);
		do { if (!(pData != 0) && AfxAssertFailedLine("C:\\MSDEV\\MFC\\include\\afxtls_.h", 171)) __asm { int 3 }; } while (0);
		return pData;
	}
	inline TYPE* GetDataNA()
	{
		TYPE* pData = (TYPE*)CThreadLocalObject::GetDataNA();
		return pData;
	}
	inline operator TYPE*()
		{ return GetData(); }
	inline TYPE* operator->()
		{ return GetData(); }


public:
	static CNoTrackObject* __stdcall CreateObject()
		{ return new TYPE; }
};






template<class TYPE>
class CProcessLocal : public CProcessLocalObject
{

public:
	inline TYPE* GetData()
	{
		TYPE* pData = (TYPE*)CProcessLocalObject::GetData(&CreateObject);
		do { if (!(pData != 0) && AfxAssertFailedLine("C:\\MSDEV\\MFC\\include\\afxtls_.h", 203)) __asm { int 3 }; } while (0);
		return pData;
	}
	inline TYPE* GetDataNA()
		{ return (TYPE*)m_pObject; }
	inline operator TYPE*()
		{ return GetData(); }
	inline TYPE* operator->()
		{ return GetData(); }


public:
	static CNoTrackObject* __stdcall CreateObject()
		{ return new TYPE; }
};








void __stdcall AfxInitLocalData(HINSTANCE hInstInit);
void __stdcall AfxTermLocalData(HINSTANCE hInstTerm, BOOL bAll = 0);
void __stdcall AfxTlsAddRef();
void __stdcall AfxTlsRelease();


#pragma pack(pop)
#line 234 "C:\\MSDEV\\MFC\\include\\afxtls_.h"




#line 239 "C:\\MSDEV\\MFC\\include\\afxtls_.h"


#line 20 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
#line 21 "C:\\MSDEV\\MFC\\include\\afxstat_.h"









class _AFX_DEBUG_STATE : public CNoTrackObject
{
public:
	_AFX_DEBUG_STATE();
	virtual ~_AFX_DEBUG_STATE();
};

extern __declspec(dllimport)  CProcessLocal<_AFX_DEBUG_STATE> afxDebugState;

#line 40 "C:\\MSDEV\\MFC\\include\\afxstat_.h"







class _AFX_WIN_STATE : public CNoTrackObject
{
public:
	_AFX_WIN_STATE();
	virtual ~_AFX_WIN_STATE();

	
	HBRUSH m_hDlgBkBrush; 
	COLORREF m_crDlgTextClr;




	
	BOOL m_bUserAbort;
};

extern   CProcessLocal<_AFX_WIN_STATE> _afxWinState;






struct ITypeInfo;
typedef ITypeInfo* LPTYPEINFO;

struct ITypeLib;
typedef ITypeLib* LPTYPELIB;

typedef struct _GUID GUID;


#line 81 "C:\\MSDEV\\MFC\\include\\afxstat_.h"

class CTypeLibCache
{
public:
	CTypeLibCache() : m_cRef(0), m_lcid((LCID)-1), m_ptlib(0), m_ptinfo(0) {}
	void Lock();
	void Unlock();
	BOOL Lookup(LCID lcid, LPTYPELIB* pptlib);
	void Cache(LCID lcid, LPTYPELIB ptlib);
	BOOL LookupTypeInfo(LCID lcid, const GUID & guid, LPTYPEINFO* pptinfo);
	void CacheTypeInfo(LCID lcid, const GUID & guid, LPTYPEINFO ptinfo);
	const GUID* m_pTypeLibID;

protected:
	LCID m_lcid;
	LPTYPELIB m_ptlib;
	GUID m_guidInfo;
	LPTYPEINFO m_ptinfo;
	long m_cRef;
};

#line 103 "C:\\MSDEV\\MFC\\include\\afxstat_.h"





class CWinThread;
class CHandleMap;
class CFrameWnd;







class AFX_MODULE_THREAD_STATE : public CNoTrackObject
{
public:
	AFX_MODULE_THREAD_STATE();
	virtual ~AFX_MODULE_THREAD_STATE();

	
	CWinThread* m_pCurrentWinThread;

	
	CTypedSimpleList<CFrameWnd*> m_frameList;

	
	DWORD m_nTempMapLock;           
	CHandleMap* m_pmapHWND;
	CHandleMap* m_pmapHMENU;
	CHandleMap* m_pmapHDC;
	CHandleMap* m_pmapHGDIOBJ;
	CHandleMap* m_pmapHIMAGELIST;

	
	_PNH m_pfnNewHandler;


	
	HWND m_hSocketWindow;
	CMapPtrToPtr m_mapSocketHandle;
	CMapPtrToPtr m_mapDeadSockets;
	CPtrList m_listSocketNotifications;
#line 148 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
};


class CWinApp;
class COleObjectFactory;

class CWnd;


class CDynLinkLibrary;
#line 159 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


class COccManager;
class COleControlLock;
#line 164 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


class _AFX_DAO_STATE;
#line 168 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


class AFX_MODULE_STATE : public CNoTrackObject
{
public:

	AFX_MODULE_STATE(BOOL bDLL, WNDPROC pfnAfxWndProc, DWORD dwVersion);
	AFX_MODULE_STATE(BOOL bDLL, WNDPROC pfnAfxWndProc, DWORD dwVersion,
		BOOL bSystem);


#line 180 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
	~AFX_MODULE_STATE();

	CWinApp* m_pCurrentWinApp;
	HINSTANCE m_hCurrentInstanceHandle;
	HINSTANCE m_hCurrentResourceHandle;
	LPCTSTR m_lpszCurrentAppName;
	BYTE m_bDLL;    
	BYTE m_bSystem; 
	BYTE m_bReserved[2]; 

	short m_fRegisteredClasses; 

	

	CRuntimeClass* m_pClassInit;
#line 196 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
	CTypedSimpleList<CRuntimeClass*> m_classList;

	


	COleObjectFactory* m_pFactoryInit;
#line 203 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
	CTypedSimpleList<COleObjectFactory*> m_factoryList;
#line 205 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
	
	long m_nObjectCount;
	BOOL m_bUserCtrl;

	
	TCHAR m_szUnregisterList[4096];

	WNDPROC m_pfnAfxWndProc;
	DWORD m_dwVersion;  
#line 215 "C:\\MSDEV\\MFC\\include\\afxstat_.h"

	
	




	void (__stdcall *m_pfnFilterToolTipMessage)(MSG*, CWnd*);


	
	CTypedSimpleList<CDynLinkLibrary*> m_libraryList;

	
	HINSTANCE m_appLangDLL;
#line 231 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


	
	COccManager* m_pOccManager;
	
	CTypedSimpleList<COleControlLock*> m_lockList;
#line 238 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


	_AFX_DAO_STATE* m_pDaoState;
#line 242 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


	
	CTypeLibCache m_typeLibCache;
	CMapPtrToPtr* m_pTypeLibCacheMap;
#line 248 "C:\\MSDEV\\MFC\\include\\afxstat_.h"

	
	 CThreadLocal<AFX_MODULE_THREAD_STATE> m_thread;
};

AFX_MODULE_STATE* __stdcall AfxGetAppModuleState();

AFX_MODULE_STATE* __stdcall AfxSetModuleState(AFX_MODULE_STATE* pNewState);
#line 257 "C:\\MSDEV\\MFC\\include\\afxstat_.h"
AFX_MODULE_STATE* __stdcall AfxGetModuleState();
AFX_MODULE_STATE* __stdcall AfxGetStaticModuleState();

AFX_MODULE_THREAD_STATE* __stdcall AfxGetModuleThreadState();





#line 267 "C:\\MSDEV\\MFC\\include\\afxstat_.h"





struct AFX_MAINTAIN_STATE
{
	AFX_MAINTAIN_STATE(AFX_MODULE_STATE* pModuleState);
	~AFX_MAINTAIN_STATE();

protected:
	AFX_MODULE_STATE* m_pPrevModuleState;
};



#line 284 "C:\\MSDEV\\MFC\\include\\afxstat_.h"





class CView;
class CToolTipCtrl;
class CControlBar;

class _AFX_THREAD_STATE : public CNoTrackObject
{
public:
	_AFX_THREAD_STATE();
	virtual ~_AFX_THREAD_STATE();

	
	AFX_MODULE_STATE* m_pModuleState;
	AFX_MODULE_STATE* m_pPrevModuleState;

	
	void* m_pSafetyPoolBuffer;    

	
	AFX_EXCEPTION_CONTEXT m_exceptionContext;

	
	CWnd* m_pWndInit;
	CWnd* m_pAlternateWndInit;      
	DWORD m_dwPropStyle;
	DWORD m_dwPropExStyle;
	HWND m_hWndInit;
	BOOL m_bDlgCreate;
	HHOOK m_hHookOldCbtFilter;
	HHOOK m_hHookOldMsgFilter;

	
	MSG m_lastSentMsg;              
	HWND m_hTrackingWindow;         
	HMENU m_hTrackingMenu;
	TCHAR m_szTempClassName[96];    
	HWND m_hLockoutNotifyWindow;    
	BOOL m_bInMsgFilter;

	
	CView* m_pRoutingView;          
	CFrameWnd* m_pRoutingFrame;     

	
	BOOL m_bWaitForDataSource;

	
	CToolTipCtrl* m_pToolTip;
	CWnd* m_pLastHit;       
	int m_nLastHit;         
	TOOLINFOA m_lastInfo;    
	int m_nLastStatus;      
	CControlBar* m_pLastStatus; 

	
	CWnd* m_pWndPark;       
	long m_nCtrlRef;        
	BOOL m_bNeedTerm;       
};

extern   CThreadLocal<_AFX_THREAD_STATE> _afxThreadState;

_AFX_THREAD_STATE* __stdcall AfxGetThreadState();




#pragma pack(pop)
#line 357 "C:\\MSDEV\\MFC\\include\\afxstat_.h"




#line 362 "C:\\MSDEV\\MFC\\include\\afxstat_.h"


#line 1424 "C:\\MSDEV\\MFC\\include\\afxcoll.h"
#line 1425 "C:\\MSDEV\\MFC\\include\\afxcoll.h"













#pragma component(minrebuild, on)
#line 1440 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

#pragma component(mintypeinfo, off)
#line 1443 "C:\\MSDEV\\MFC\\include\\afxcoll.h"

#line 1445 "C:\\MSDEV\\MFC\\include\\afxcoll.h"


#line 1891 "C:\\MSDEV\\MFC\\include\\afx.h"
	


#line 1895 "C:\\MSDEV\\MFC\\include\\afx.h"













#pragma component(minrebuild, on)
#line 1910 "C:\\MSDEV\\MFC\\include\\afx.h"

#pragma component(mintypeinfo, off)
#line 1913 "C:\\MSDEV\\MFC\\include\\afx.h"

#line 1915 "C:\\MSDEV\\MFC\\include\\afx.h"


#line 20 "C:\\MSDEV\\MFC\\include\\afxwin.h"
#line 21 "C:\\MSDEV\\MFC\\include\\afxwin.h"




	#line 1 "C:\\MSDEV\\INCLUDE\\shellapi.h"





















#line 23 "C:\\MSDEV\\INCLUDE\\shellapi.h"
#line 24 "C:\\MSDEV\\INCLUDE\\shellapi.h"

#line 1 "C:\\MSDEV\\INCLUDE\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#pragma pack(1)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 26 "C:\\MSDEV\\INCLUDE\\shellapi.h"


extern "C" {            
#line 30 "C:\\MSDEV\\INCLUDE\\shellapi.h"



struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;

__declspec(dllimport) UINT __stdcall DragQueryFileA(HDROP,UINT,LPSTR,UINT);
__declspec(dllimport) UINT __stdcall DragQueryFileW(HDROP,UINT,LPWSTR,UINT);




#line 42 "C:\\MSDEV\\INCLUDE\\shellapi.h"
__declspec(dllimport) BOOL __stdcall DragQueryPoint(HDROP,LPPOINT);
__declspec(dllimport) void __stdcall DragFinish(HDROP);
__declspec(dllimport) void __stdcall DragAcceptFiles(HWND,BOOL);

__declspec(dllimport) HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
__declspec(dllimport) HINSTANCE __stdcall ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);




#line 53 "C:\\MSDEV\\INCLUDE\\shellapi.h"
__declspec(dllimport) HINSTANCE __stdcall FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
__declspec(dllimport) HINSTANCE __stdcall FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);




#line 60 "C:\\MSDEV\\INCLUDE\\shellapi.h"
__declspec(dllimport) LPWSTR *  __stdcall CommandLineToArgvW(LPCWSTR lpCmdLine, int*pNumArgs);

__declspec(dllimport) INT       __stdcall ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
__declspec(dllimport) INT       __stdcall ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);




#line 69 "C:\\MSDEV\\INCLUDE\\shellapi.h"
__declspec(dllimport) HICON     __stdcall ExtractAssociatedIconA(HINSTANCE hInst, LPSTR lpIconPath, LPWORD lpiIcon);
__declspec(dllimport) HICON     __stdcall ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR lpIconPath, LPWORD lpiIcon);




#line 76 "C:\\MSDEV\\INCLUDE\\shellapi.h"

__declspec(dllimport) HICON     __stdcall ExtractIconA(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
__declspec(dllimport) HICON     __stdcall ExtractIconW(HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);




#line 84 "C:\\MSDEV\\INCLUDE\\shellapi.h"















                                        
                                        


















typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam; 
} APPBARDATA, *PAPPBARDATA;

__declspec(dllimport) UINT __stdcall SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData);









__declspec(dllimport) UINT __stdcall ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON  *phiconLarge, HICON  *phiconSmall, UINT nIcons);
__declspec(dllimport) UINT __stdcall ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON  *phiconLarge, HICON  *phiconSmall, UINT nIcons);




#line 146 "C:\\MSDEV\\INCLUDE\\shellapi.h"




















                                      





typedef WORD FILEOP_FLAGS;




                                
                                
                                
                                




typedef WORD PRINTEROP_FLAGS;

#line 188 "C:\\MSDEV\\INCLUDE\\shellapi.h"








typedef struct _SHFILEOPSTRUCTA
{
        HWND            hwnd;
        UINT            wFunc;
        LPCSTR          pFrom;
        LPCSTR          pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCSTR           lpszProgressTitle; 
} SHFILEOPSTRUCTA,  *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
        HWND            hwnd;
        UINT            wFunc;
        LPCWSTR         pFrom;
        LPCWSTR         pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCWSTR          lpszProgressTitle; 
} SHFILEOPSTRUCTW,  *LPSHFILEOPSTRUCTW;




typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
#line 225 "C:\\MSDEV\\INCLUDE\\shellapi.h"

__declspec(dllimport) int __stdcall SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
__declspec(dllimport) int __stdcall SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);




#line 233 "C:\\MSDEV\\INCLUDE\\shellapi.h"

__declspec(dllimport) void __stdcall SHFreeNameMappings(HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR   pszOldPath;
    LPSTR   pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGA,  *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR  pszOldPath;
    LPWSTR  pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGW,  *LPSHNAMEMAPPINGW;




typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#line 257 "C:\\MSDEV\\INCLUDE\\shellapi.h"



























#line 285 "C:\\MSDEV\\INCLUDE\\shellapi.h"






























typedef struct _SHELLEXECUTEINFOA
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR   lpVerb;
        LPCSTR   lpFile;
        LPCSTR   lpParameters;
        LPCSTR   lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCSTR   lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        HANDLE hIcon;
        HANDLE hProcess;
} SHELLEXECUTEINFOA,  *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  lpVerb;
        LPCWSTR  lpFile;
        LPCWSTR  lpParameters;
        LPCWSTR  lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCWSTR  lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        HANDLE hIcon;
        HANDLE hProcess;
} SHELLEXECUTEINFOW,  *LPSHELLEXECUTEINFOW;




typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
#line 360 "C:\\MSDEV\\INCLUDE\\shellapi.h"

__declspec(dllimport) BOOL __stdcall ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
__declspec(dllimport) BOOL __stdcall ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);




#line 368 "C:\\MSDEV\\INCLUDE\\shellapi.h"










typedef struct _NOTIFYICONDATAA {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        CHAR   szTip[64];
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        WCHAR  szTip[64];
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#line 403 "C:\\MSDEV\\INCLUDE\\shellapi.h"










__declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
__declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);




#line 420 "C:\\MSDEV\\INCLUDE\\shellapi.h"



























typedef struct _SHFILEINFOA
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        CHAR        szDisplayName[260];    
        CHAR        szTypeName[80];             
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        WCHAR       szDisplayName[260];    
        WCHAR       szTypeName[80];             
} SHFILEINFOW;



typedef SHFILEINFOA SHFILEINFO;
#line 468 "C:\\MSDEV\\INCLUDE\\shellapi.h"

















__declspec(dllimport) DWORD __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA  *psfi, UINT cbFileInfo, UINT uFlags);
__declspec(dllimport) DWORD __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW  *psfi, UINT cbFileInfo, UINT uFlags);




#line 492 "C:\\MSDEV\\INCLUDE\\shellapi.h"
















#line 509 "C:\\MSDEV\\INCLUDE\\shellapi.h"


}
#line 513 "C:\\MSDEV\\INCLUDE\\shellapi.h"

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 515 "C:\\MSDEV\\INCLUDE\\shellapi.h"

#line 517 "C:\\MSDEV\\INCLUDE\\shellapi.h"
#line 26 "C:\\MSDEV\\MFC\\include\\afxwin.h"
#line 27 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	#line 1 "C:\\MSDEV\\MFC\\include\\afxres.h"

























#pragma component(minrebuild, off)
#line 28 "C:\\MSDEV\\MFC\\include\\afxres.h"











#line 40 "C:\\MSDEV\\MFC\\include\\afxres.h"




































































































#line 141 "C:\\MSDEV\\MFC\\include\\afxres.h"






#line 148 "C:\\MSDEV\\MFC\\include\\afxres.h"
















































































#line 229 "C:\\MSDEV\\MFC\\include\\afxres.h"




























#line 258 "C:\\MSDEV\\MFC\\include\\afxres.h"













	




















#line 293 "C:\\MSDEV\\MFC\\include\\afxres.h"
















































































































































































#line 470 "C:\\MSDEV\\MFC\\include\\afxres.h"
































#line 503 "C:\\MSDEV\\MFC\\include\\afxres.h"


























































#line 562 "C:\\MSDEV\\MFC\\include\\afxres.h"






















	






















































































































































































#pragma component(minrebuild, on)
#line 769 "C:\\MSDEV\\MFC\\include\\afxres.h"

#line 771 "C:\\MSDEV\\MFC\\include\\afxres.h"


#line 30 "C:\\MSDEV\\MFC\\include\\afxwin.h"
#line 31 "C:\\MSDEV\\MFC\\include\\afxwin.h"






#pragma component(minrebuild, off)
#line 39 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#pragma component(mintypeinfo, on)
#line 42 "C:\\MSDEV\\MFC\\include\\afxwin.h"


#pragma comment(lib, "uuid.lib")
#line 46 "C:\\MSDEV\\MFC\\include\\afxwin.h"








#pragma pack(push, 4)
#line 56 "C:\\MSDEV\\MFC\\include\\afxwin.h"




class CSize;
class CPoint;
class CRect;


	
		
			class CResourceException;
			class CUserException;    

	class CGdiObject;            
		class CPen;              
		class CBrush;            
		class CFont;             
		class CBitmap;           
		class CPalette;          
		class CRgn;              

	class CDC;                   
		class CClientDC;         
		class CWindowDC;         
		class CPaintDC;          

	class CMenu;                 

	class CCmdTarget;            
		class CWnd;                 
			class CDialog;          

			
			class CStatic;          
			class CButton;          
			class CListBox;         
				class CCheckListBox;
			class CComboBox;        
			class CEdit;            
			class CScrollBar;       

			
			class CFrameWnd;        
				class CMDIFrameWnd; 
				class CMDIChildWnd; 
				class CMiniFrameWnd;

			
			class CView;            
				class CScrollView;  

		class CWinThread;           
			class CWinApp;          

		class CDocTemplate;         
			class CSingleDocTemplate;
			class CMultiDocTemplate; 

		class CDocument;            



class CCmdUI;           
class CDataExchange;    
class CCommandLineInfo; 
class CDocManager;      






#line 130 "C:\\MSDEV\\MFC\\include\\afxwin.h"







class CSize : public tagSIZE
{
public:


	CSize();
	CSize(int initCX, int initCY);
	CSize(SIZE initSize);
	CSize(POINT initPt);
	CSize(DWORD dwSize);


	BOOL operator==(SIZE size) const;
	BOOL operator!=(SIZE size) const;
	void operator+=(SIZE size);
	void operator-=(SIZE size);


	CSize operator+(SIZE size) const;
	CSize operator-(SIZE size) const;
	CSize operator-() const;


	CPoint operator+(POINT point) const;
	CPoint operator-(POINT point) const;


	CRect operator+(const RECT* lpRect) const;
	CRect operator-(const RECT* lpRect) const;
};




class CPoint : public tagPOINT
{
public:


	CPoint();
	CPoint(int initX, int initY);
	CPoint(POINT initPt);
	CPoint(SIZE initSize);
	CPoint(DWORD dwPoint);


	void Offset(int xOffset, int yOffset);
	void Offset(POINT point);
	void Offset(SIZE size);
	BOOL operator==(POINT point) const;
	BOOL operator!=(POINT point) const;
	void operator+=(SIZE size);
	void operator-=(SIZE size);
	void operator+=(POINT point);
	void operator-=(POINT point);


	CPoint operator+(SIZE size) const;
	CPoint operator-(SIZE size) const;
	CPoint operator-() const;
	CPoint operator+(POINT point) const;


	CSize operator-(POINT point) const;


	CRect operator+(const RECT* lpRect) const;
	CRect operator-(const RECT* lpRect) const;
};




typedef const RECT* LPCRECT;    

class CRect : public tagRECT
{
public:


	CRect();
	CRect(int l, int t, int r, int b);
	CRect(const RECT& srcRect);
	CRect(LPCRECT lpSrcRect);
	CRect(POINT point, SIZE size);
	CRect(POINT topLeft, POINT bottomRight);


	int Width() const;
	int Height() const;
	CSize Size() const;
	CPoint& TopLeft();
	CPoint& BottomRight();
	const CPoint& TopLeft() const;
	const CPoint& BottomRight() const;
	CPoint CenterPoint() const;

	
	operator LPRECT();
	operator LPCRECT() const;

	BOOL IsRectEmpty() const;
	BOOL IsRectNull() const;
	BOOL PtInRect(POINT point) const;


	void SetRect(int x1, int y1, int x2, int y2);
	void SetRect(POINT topLeft, POINT bottomRight);
	void SetRectEmpty();
	void CopyRect(LPCRECT lpSrcRect);
	BOOL EqualRect(LPCRECT lpRect) const;

	void InflateRect(int x, int y);
	void InflateRect(SIZE size);
	void InflateRect(LPCRECT lpRect);
	void InflateRect(int l, int t, int r, int b);
	void DeflateRect(int x, int y);
	void DeflateRect(SIZE size);
	void DeflateRect(LPCRECT lpRect);
	void DeflateRect(int l, int t, int r, int b);

	void OffsetRect(int x, int y);
	void OffsetRect(SIZE size);
	void OffsetRect(POINT point);
	void NormalizeRect();

	
	BOOL IntersectRect(LPCRECT lpRect1, LPCRECT lpRect2);
	BOOL UnionRect(LPCRECT lpRect1, LPCRECT lpRect2);
	BOOL SubtractRect(LPCRECT lpRectSrc1, LPCRECT lpRectSrc2);


	void operator=(const RECT& srcRect);
	BOOL operator==(const RECT& rect) const;
	BOOL operator!=(const RECT& rect) const;
	void operator+=(POINT point);
	void operator+=(SIZE size);
	void operator+=(LPCRECT lpRect);
	void operator-=(POINT point);
	void operator-=(SIZE size);
	void operator-=(LPCRECT lpRect);
	void operator&=(const RECT& rect);
	void operator|=(const RECT& rect);


	CRect operator+(POINT point) const;
	CRect operator-(POINT point) const;
	CRect operator+(LPCRECT lpRect) const;
	CRect operator+(SIZE size) const;
	CRect operator-(SIZE size) const;
	CRect operator-(LPCRECT lpRect) const;
	CRect operator&(const RECT& rect2) const;
	CRect operator|(const RECT& rect2) const;
	CRect MulDiv(int nMultiplier, int nDivisor) const;
};



CDumpContext& __stdcall operator<<(CDumpContext& dc, SIZE size);
CDumpContext& __stdcall operator<<(CDumpContext& dc, POINT point);
CDumpContext& __stdcall operator<<(CDumpContext& dc, const RECT& rect);
#line 299 "C:\\MSDEV\\MFC\\include\\afxwin.h"


CArchive& __stdcall operator<<(CArchive& ar, SIZE size);
CArchive& __stdcall operator<<(CArchive& ar, POINT point);
CArchive& __stdcall operator<<(CArchive& ar, const RECT& rect);
CArchive& __stdcall operator>>(CArchive& ar, SIZE& size);
CArchive& __stdcall operator>>(CArchive& ar, POINT& point);
CArchive& __stdcall operator>>(CArchive& ar, RECT& rect);




class CResourceException : public CSimpleException    
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCResourceException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CResourceException();


public:
	CResourceException(BOOL bAutoDelete);
	CResourceException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CResourceException();
};

class CUserException : public CSimpleException   
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCUserException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CUserException();


public:
	CUserException(BOOL bAutoDelete);
	CUserException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CUserException();
};

void __stdcall AfxThrowResourceException();
void __stdcall AfxThrowUserException();




class CGdiObject : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCGdiObject; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:


	HGDIOBJ m_hObject;                  
	operator HGDIOBJ() const;
	HGDIOBJ GetSafeHandle() const;

	static CGdiObject* __stdcall FromHandle(HGDIOBJ hObject);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HGDIOBJ hObject);
	HGDIOBJ Detach();


	CGdiObject(); 
	BOOL DeleteObject();


	int GetObjectA(int nCount, LPVOID lpObject) const;
	UINT GetObjectType() const;
	BOOL CreateStockObject(int nIndex);
	BOOL UnrealizeObject();


public:
	virtual ~CGdiObject();

	virtual void Dump(CDumpContext& dc) const;
	virtual void AssertValid() const;
#line 375 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};




class CPen : public CGdiObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPen; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CPen* __stdcall FromHandle(HPEN hPen);


	CPen();
	CPen(int nPenStyle, int nWidth, COLORREF crColor);

	CPen(int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush,
		int nStyleCount = 0, const DWORD* lpStyle = 0);
#line 394 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL CreatePen(int nPenStyle, int nWidth, COLORREF crColor);

	BOOL CreatePen(int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush,
		int nStyleCount = 0, const DWORD* lpStyle = 0);
#line 399 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL CreatePenIndirect(LPLOGPEN lpLogPen);


	operator HPEN() const;
	int GetLogPen(LOGPEN* pLogPen);

	int GetExtLogPen(EXTLOGPEN* pLogPen);
#line 407 "C:\\MSDEV\\MFC\\include\\afxwin.h"


public:
	virtual ~CPen();

	virtual void Dump(CDumpContext& dc) const;
#line 414 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CBrush : public CGdiObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCBrush; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CBrush* __stdcall FromHandle(HBRUSH hBrush);


	CBrush();
	CBrush(COLORREF crColor);             
	CBrush(int nIndex, COLORREF crColor); 
	CBrush(CBitmap* pBitmap);          

	BOOL CreateSolidBrush(COLORREF crColor);
	BOOL CreateHatchBrush(int nIndex, COLORREF crColor);
	BOOL CreateBrushIndirect(const LOGBRUSH* lpLogBrush);
	BOOL CreatePatternBrush(CBitmap* pBitmap);
	BOOL CreateDIBPatternBrush(HGLOBAL hPackedDIB, UINT nUsage);
	BOOL CreateDIBPatternBrush(const void* lpPackedDIB, UINT nUsage);
	BOOL CreateSysColorBrush(int nIndex);


	operator HBRUSH() const;
	int GetLogBrush(LOGBRUSH* pLogBrush);


public:
	virtual ~CBrush();

	virtual void Dump(CDumpContext& dc) const;
#line 447 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CFont : public CGdiObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFont; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CFont* __stdcall FromHandle(HFONT hFont);


	CFont();
	BOOL CreateFontIndirectA(const LOGFONT* lpLogFont);
	BOOL CreateFontA(int nHeight, int nWidth, int nEscapement,
			int nOrientation, int nWeight, BYTE bItalic, BYTE bUnderline,
			BYTE cStrikeOut, BYTE nCharSet, BYTE nOutPrecision,
			BYTE nClipPrecision, BYTE nQuality, BYTE nPitchAndFamily,
			LPCTSTR lpszFacename);
	BOOL CreatePointFont(int nPointSize, LPCTSTR lpszFaceName, CDC* pDC = 0);
	BOOL CreatePointFontIndirect(const LOGFONT* lpLogFont, CDC* pDC = 0);


	operator HFONT() const;
	int GetLogFont(LOGFONT* pLogFont);


public:
	virtual ~CFont();

	virtual void Dump(CDumpContext& dc) const;
#line 477 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CBitmap : public CGdiObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCBitmap; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CBitmap* __stdcall FromHandle(HBITMAP hBitmap);


	CBitmap();

	BOOL LoadBitmapA(LPCTSTR lpszResourceName);
	BOOL LoadBitmapA(UINT nIDResource);

	BOOL LoadOEMBitmap(UINT nIDBitmap); 
#line 494 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL LoadMappedBitmap(UINT nIDBitmap, UINT nFlags = 0,
		LPCOLORMAP lpColorMap = 0, int nMapSize = 0);
	BOOL CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitcount,
			const void* lpBits);
	BOOL CreateBitmapIndirect(LPBITMAP lpBitmap);
	BOOL CreateCompatibleBitmap(CDC* pDC, int nWidth, int nHeight);
	BOOL CreateDiscardableBitmap(CDC* pDC, int nWidth, int nHeight);


	operator HBITMAP() const;
	int GetBitmap(BITMAP* pBitMap);


	DWORD SetBitmapBits(DWORD dwCount, const void* lpBits);
	DWORD GetBitmapBits(DWORD dwCount, LPVOID lpBits) const;
	CSize SetBitmapDimension(int nWidth, int nHeight);
	CSize GetBitmapDimension() const;


public:
	virtual ~CBitmap();

	virtual void Dump(CDumpContext& dc) const;
#line 518 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CPalette : public CGdiObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPalette; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CPalette* __stdcall FromHandle(HPALETTE hPalette);


	CPalette();
	BOOL CreatePalette(LPLOGPALETTE lpLogPalette);

	BOOL CreateHalftonePalette(CDC* pDC);
#line 533 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	operator HPALETTE() const;
	int GetEntryCount();
	UINT GetPaletteEntries(UINT nStartIndex, UINT nNumEntries,
			LPPALETTEENTRY lpPaletteColors) const;
	UINT SetPaletteEntries(UINT nStartIndex, UINT nNumEntries,
			LPPALETTEENTRY lpPaletteColors);



	void AnimatePalette(UINT nStartIndex, UINT nNumEntries,
			LPPALETTEENTRY lpPaletteColors);
#line 547 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	UINT GetNearestPaletteIndex(COLORREF crColor) const;
	BOOL ResizePalette(UINT nNumEntries);


	virtual ~CPalette();
};

class CRgn : public CGdiObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCRgn; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CRgn* __stdcall FromHandle(HRGN hRgn);
	operator HRGN() const;


	CRgn();
	BOOL CreateRectRgn(int x1, int y1, int x2, int y2);
	BOOL CreateRectRgnIndirect(LPCRECT lpRect);
	BOOL CreateEllipticRgn(int x1, int y1, int x2, int y2);
	BOOL CreateEllipticRgnIndirect(LPCRECT lpRect);
	BOOL CreatePolygonRgn(LPPOINT lpPoints, int nCount, int nMode);

	BOOL CreatePolyPolygonRgn(LPPOINT lpPoints, LPINT lpPolyCounts,
			int nCount, int nPolyFillMode);
#line 573 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL CreateRoundRectRgn(int x1, int y1, int x2, int y2, int x3, int y3);

	BOOL CreateFromPath(CDC* pDC);
	BOOL CreateFromData(const XFORM* lpXForm, int nCount,
		const RGNDATA* pRgnData);
#line 579 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	void SetRectRgn(int x1, int y1, int x2, int y2);
	void SetRectRgn(LPCRECT lpRect);
	int CombineRgn(CRgn* pRgn1, CRgn* pRgn2, int nCombineMode);
	int CopyRgn(CRgn* pRgnSrc);
	BOOL EqualRgn(CRgn* pRgn) const;
	int OffsetRgn(int x, int y);
	int OffsetRgn(POINT point);
	int GetRgnBox(LPRECT lpRect) const;
	BOOL PtInRegion(int x, int y) const;
	BOOL PtInRegion(POINT point) const;
	BOOL RectInRegion(LPCRECT lpRect) const;

	int GetRegionData(LPRGNDATA lpRgnData, int nCount) const;
#line 595 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	virtual ~CRgn();
};




class CDC : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDC; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:


	HDC m_hDC;          
	HDC m_hAttribDC;    
	operator HDC() const;
	HDC GetSafeHdc() const; 

	CWnd* GetWindow() const;
#line 616 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	static CDC* __stdcall FromHandle(HDC hDC);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HDC hDC);   
	HDC Detach();

	virtual void SetAttribDC(HDC hDC);  
	virtual void SetOutputDC(HDC hDC);  
	virtual void ReleaseAttribDC();     
	virtual void ReleaseOutputDC();     

	BOOL IsPrinting() const;            

	CPen* GetCurrentPen() const;
	CBrush* GetCurrentBrush() const;
	CPalette* GetCurrentPalette() const;
	CFont* GetCurrentFont() const;
	CBitmap* GetCurrentBitmap() const;


	CDC();
	BOOL CreateDCA(LPCTSTR lpszDriverName, LPCTSTR lpszDeviceName,
		LPCTSTR lpszOutput, const void* lpInitData);
	BOOL CreateICA(LPCTSTR lpszDriverName, LPCTSTR lpszDeviceName,
		LPCTSTR lpszOutput, const void* lpInitData);
	BOOL CreateCompatibleDC(CDC* pDC);

	BOOL DeleteDC();


	virtual int SaveDC();
	virtual BOOL RestoreDC(int nSavedDC);
	int GetDeviceCaps(int nIndex) const;

	UINT SetBoundsRect(LPCRECT lpRectBounds, UINT flags);
	UINT GetBoundsRect(LPRECT lpRectBounds, UINT flags);
#line 653 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL ResetDCA(const DEVMODE* lpDevMode);


	CPoint GetBrushOrg() const;
	CPoint SetBrushOrg(int x, int y);
	CPoint SetBrushOrg(POINT point);
	int EnumObjects(int nObjectType,
			int (__stdcall* lpfn)(LPVOID, LPARAM), LPARAM lpData);


public:
	virtual CGdiObject* SelectStockObject(int nIndex);
	CPen* SelectObject(CPen* pPen);
	CBrush* SelectObject(CBrush* pBrush);
	virtual CFont* SelectObject(CFont* pFont);
	CBitmap* SelectObject(CBitmap* pBitmap);
	int SelectObject(CRgn* pRgn);       
	CGdiObject* SelectObject(CGdiObject* pObject);
		


	COLORREF GetNearestColor(COLORREF crColor) const;
	CPalette* SelectPalette(CPalette* pPalette, BOOL bForceBackground);
	UINT RealizePalette();
	void UpdateColors();


	COLORREF GetBkColor() const;
	int GetBkMode() const;
	int GetPolyFillMode() const;
	int GetROP2() const;
	int GetStretchBltMode() const;
	COLORREF GetTextColor() const;

	virtual COLORREF SetBkColor(COLORREF crColor);
	int SetBkMode(int nBkMode);
	int SetPolyFillMode(int nPolyFillMode);
	int SetROP2(int nDrawMode);
	int SetStretchBltMode(int nStretchMode);
	virtual COLORREF SetTextColor(COLORREF crColor);


	BOOL GetColorAdjustment(LPCOLORADJUSTMENT lpColorAdjust) const;
	BOOL SetColorAdjustment(const COLORADJUSTMENT* lpColorAdjust);
#line 698 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	int GetMapMode() const;
	CPoint GetViewportOrg() const;
	virtual int SetMapMode(int nMapMode);
	
	virtual CPoint SetViewportOrg(int x, int y);
			CPoint SetViewportOrg(POINT point);
	virtual CPoint OffsetViewportOrg(int nWidth, int nHeight);

	
	CSize GetViewportExt() const;
	virtual CSize SetViewportExt(int cx, int cy);
			CSize SetViewportExt(SIZE size);
	virtual CSize ScaleViewportExt(int xNum, int xDenom, int yNum, int yDenom);

	
	CPoint GetWindowOrg() const;
	CPoint SetWindowOrg(int x, int y);
	CPoint SetWindowOrg(POINT point);
	CPoint OffsetWindowOrg(int nWidth, int nHeight);

	
	CSize GetWindowExt() const;
	virtual CSize SetWindowExt(int cx, int cy);
			CSize SetWindowExt(SIZE size);
	virtual CSize ScaleWindowExt(int xNum, int xDenom, int yNum, int yDenom);


	void DPtoLP(LPPOINT lpPoints, int nCount = 1) const;
	void DPtoLP(LPRECT lpRect) const;
	void DPtoLP(LPSIZE lpSize) const;
	void LPtoDP(LPPOINT lpPoints, int nCount = 1) const;
	void LPtoDP(LPRECT lpRect) const;
	void LPtoDP(LPSIZE lpSize) const;


	void DPtoHIMETRIC(LPSIZE lpSize) const;
	void LPtoHIMETRIC(LPSIZE lpSize) const;
	void HIMETRICtoDP(LPSIZE lpSize) const;
	void HIMETRICtoLP(LPSIZE lpSize) const;


	BOOL FillRgn(CRgn* pRgn, CBrush* pBrush);
	BOOL FrameRgn(CRgn* pRgn, CBrush* pBrush, int nWidth, int nHeight);
	BOOL InvertRgn(CRgn* pRgn);
	BOOL PaintRgn(CRgn* pRgn);


	virtual int GetClipBox(LPRECT lpRect) const;
	virtual BOOL PtVisible(int x, int y) const;
			BOOL PtVisible(POINT point) const;
	virtual BOOL RectVisible(LPCRECT lpRect) const;
			int SelectClipRgn(CRgn* pRgn);
			int ExcludeClipRect(int x1, int y1, int x2, int y2);
			int ExcludeClipRect(LPCRECT lpRect);
			int ExcludeUpdateRgn(CWnd* pWnd);
			int IntersectClipRect(int x1, int y1, int x2, int y2);
			int IntersectClipRect(LPCRECT lpRect);
			int OffsetClipRgn(int x, int y);
			int OffsetClipRgn(SIZE size);

	int SelectClipRgn(CRgn* pRgn, int nMode);
#line 762 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	CPoint GetCurrentPosition() const;
	CPoint MoveTo(int x, int y);
	CPoint MoveTo(POINT point);
	BOOL LineTo(int x, int y);
	BOOL LineTo(POINT point);
	BOOL Arc(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
	BOOL Arc(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	BOOL Polyline(LPPOINT lpPoints, int nCount);


	BOOL AngleArc(int x, int y, int nRadius, float fStartAngle, float fSweepAngle);
	BOOL ArcTo(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
	BOOL ArcTo(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	int GetArcDirection() const;
	int SetArcDirection(int nArcDirection);

	BOOL PolyDraw(const POINT* lpPoints, const BYTE* lpTypes, int nCount);
	BOOL PolylineTo(const POINT* lpPoints, int nCount);
	BOOL PolyPolyline(const POINT* lpPoints,
		const DWORD* lpPolyPoints, int nCount);

	BOOL PolyBezier(const POINT* lpPoints, int nCount);
	BOOL PolyBezierTo(const POINT* lpPoints, int nCount);
#line 788 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	void FillRect(LPCRECT lpRect, CBrush* pBrush);
	void FrameRect(LPCRECT lpRect, CBrush* pBrush);
	void InvertRect(LPCRECT lpRect);
	BOOL DrawIcon(int x, int y, HICON hIcon);
	BOOL DrawIcon(POINT point, HICON hIcon);


	BOOL DrawState(CPoint pt, CSize size, HBITMAP hBitmap, UINT nFlags,
		HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, CBitmap* pBitmap, UINT nFlags,
		CBrush* pBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, HICON hIcon, UINT nFlags,
		HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, HICON hIcon, UINT nFlags,
		CBrush* pBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, LPCTSTR lpszText, UINT nFlags,
		BOOL bPrefixText = 1, int nTextLen = 0, HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, LPCTSTR lpszText, UINT nFlags,
		BOOL bPrefixText = 1, int nTextLen = 0, CBrush* pBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, DRAWSTATEPROC lpDrawProc,
		LPARAM lData, UINT nFlags, HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, DRAWSTATEPROC lpDrawProc,
		LPARAM lData, UINT nFlags, CBrush* pBrush = 0);
#line 814 "C:\\MSDEV\\MFC\\include\\afxwin.h"
#line 815 "C:\\MSDEV\\MFC\\include\\afxwin.h"



	BOOL Chord(int x1, int y1, int x2, int y2, int x3, int y3,
		int x4, int y4);
	BOOL Chord(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
#line 822 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	void DrawFocusRect(LPCRECT lpRect);
	BOOL Ellipse(int x1, int y1, int x2, int y2);
	BOOL Ellipse(LPCRECT lpRect);
	BOOL Pie(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
	BOOL Pie(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	BOOL Polygon(LPPOINT lpPoints, int nCount);

	BOOL PolyPolygon(LPPOINT lpPoints, LPINT lpPolyCounts, int nCount);
#line 831 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL Rectangle(int x1, int y1, int x2, int y2);
	BOOL Rectangle(LPCRECT lpRect);
	BOOL RoundRect(int x1, int y1, int x2, int y2, int x3, int y3);
	BOOL RoundRect(LPCRECT lpRect, POINT point);


	BOOL PatBlt(int x, int y, int nWidth, int nHeight, DWORD dwRop);
	BOOL BitBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, DWORD dwRop);
	BOOL StretchBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, int nSrcWidth, int nSrcHeight, DWORD dwRop);
	COLORREF GetPixel(int x, int y) const;
	COLORREF GetPixel(POINT point) const;
	COLORREF SetPixel(int x, int y, COLORREF crColor);
	COLORREF SetPixel(POINT point, COLORREF crColor);

	BOOL FloodFill(int x, int y, COLORREF crColor);
	BOOL ExtFloodFill(int x, int y, COLORREF crColor, UINT nFillType);
	BOOL MaskBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, CBitmap& maskBitmap, int xMask, int yMask,
		DWORD dwRop);
	BOOL PlgBlt(LPPOINT lpPoint, CDC* pSrcDC, int xSrc, int ySrc,
		int nWidth, int nHeight, CBitmap& maskBitmap, int xMask, int yMask);
	BOOL SetPixelV(int x, int y, COLORREF crColor);
	BOOL SetPixelV(POINT point, COLORREF crColor);
#line 857 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	virtual BOOL TextOutA(int x, int y, LPCTSTR lpszString, int nCount);
			BOOL TextOutA(int x, int y, const CString& str);
	virtual BOOL ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
				LPCTSTR lpszString, UINT nCount, LPINT lpDxWidths);
			BOOL ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
				const CString& str, LPINT lpDxWidths);
	virtual CSize TabbedTextOutA(int x, int y, LPCTSTR lpszString, int nCount,
				int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin);
			CSize TabbedTextOutA(int x, int y, const CString& str,
				int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin);
	virtual int DrawTextA(LPCTSTR lpszString, int nCount, LPRECT lpRect,
				UINT nFormat);
			int DrawTextA(const CString& str, LPRECT lpRect, UINT nFormat);
	CSize GetTextExtent(LPCTSTR lpszString, int nCount) const;
	CSize GetTextExtent(const CString& str) const;
	CSize GetOutputTextExtent(LPCTSTR lpszString, int nCount) const;
	CSize GetOutputTextExtent(const CString& str) const;
	CSize GetTabbedTextExtentA(LPCTSTR lpszString, int nCount,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	CSize GetTabbedTextExtentA(const CString& str,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	CSize GetOutputTabbedTextExtent(LPCTSTR lpszString, int nCount,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	CSize GetOutputTabbedTextExtent(const CString& str,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	virtual BOOL GrayStringA(CBrush* pBrush,
		BOOL (__stdcall* lpfnOutput)(HDC, LPARAM, int), LPARAM lpData,
			int nCount, int x, int y, int nWidth, int nHeight);
	UINT GetTextAlign() const;
	UINT SetTextAlign(UINT nFlags);
	int GetTextFaceA(int nCount, LPTSTR lpszFacename) const;
	int GetTextFaceA(CString& rString) const;
	BOOL GetTextMetricsA(LPTEXTMETRIC lpMetrics) const;
	BOOL GetOutputTextMetrics(LPTEXTMETRIC lpMetrics) const;

	int SetTextJustification(int nBreakExtra, int nBreakCount);
#line 896 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	int GetTextCharacterExtra() const;
	int SetTextCharacterExtra(int nCharExtra);




	BOOL DrawEdge(LPRECT lpRect, UINT nEdge, UINT nFlags);
	BOOL DrawFrameControl(LPRECT lpRect, UINT nType, UINT nState);
#line 905 "C:\\MSDEV\\MFC\\include\\afxwin.h"
#line 906 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	BOOL ScrollDC(int dx, int dy, LPCRECT lpRectScroll, LPCRECT lpRectClip,
		CRgn* pRgnUpdate, LPRECT lpRectUpdate);


	BOOL GetCharWidthA(UINT nFirstChar, UINT nLastChar, LPINT lpBuffer) const;
	BOOL GetOutputCharWidth(UINT nFirstChar, UINT nLastChar, LPINT lpBuffer) const;
	DWORD SetMapperFlags(DWORD dwFlag);
	CSize GetAspectRatioFilter() const;

	BOOL GetCharABCWidthsA(UINT nFirstChar, UINT nLastChar, LPABC lpabc) const;
	DWORD GetFontData(DWORD dwTable, DWORD dwOffset, LPVOID lpData, DWORD cbData) const;

	int GetKerningPairsA(int nPairs, LPKERNINGPAIR lpkrnpair) const;
#line 922 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	UINT GetOutlineTextMetricsA(UINT cbData, LPOUTLINETEXTMETRIC lpotm) const;

	DWORD GetGlyphOutlineA(UINT nChar, UINT nFormat, LPGLYPHMETRICS lpgm,
		DWORD cbBuffer, LPVOID lpBuffer, const MAT2* lpmat2) const;
#line 927 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	BOOL GetCharABCWidthsA(UINT nFirstChar, UINT nLastChar,
		LPABCFLOAT lpABCF) const;
	BOOL GetCharWidthA(UINT nFirstChar, UINT nLastChar,
		float* lpFloatBuffer) const;
#line 934 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	virtual int Escape(int nEscape, int nCount,
		LPCSTR lpszInData, LPVOID lpOutData);

	int Escape(int nEscape, int nInputSize, LPCSTR lpszInputData,
		int nOutputSize, LPSTR lpszOutputData);
	int DrawEscape(int nEscape, int nInputSize, LPCSTR lpszInputData);
#line 943 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	int StartDocA(LPCTSTR lpszDocName);  
	int StartDocA(LPDOCINFO lpDocInfo);
	int StartPage();
	int EndPage();
	int SetAbortProc(BOOL (__stdcall* lpfn)(HDC, int));
	int AbortDoc();
	int EndDoc();


	BOOL PlayMetaFile(HMETAFILE hMF);

	BOOL PlayMetaFile(HENHMETAFILE hEnhMetaFile, LPCRECT lpBounds);
	BOOL AddMetaFileComment(UINT nDataSize, const BYTE* pCommentData);
		


	BOOL AbortPath();
	BOOL BeginPath();
	BOOL CloseFigure();
	BOOL EndPath();
	BOOL FillPath();
	BOOL FlattenPath();
	BOOL StrokeAndFillPath();
	BOOL StrokePath();
	BOOL WidenPath();
	float GetMiterLimit() const;
	BOOL SetMiterLimit(float fMiterLimit);
	int GetPath(LPPOINT lpPoints, LPBYTE lpTypes, int nCount) const;
	BOOL SelectClipPath(int nMode);
#line 975 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	static CBrush* __stdcall GetHalftoneBrush();
	void DrawDragRect(LPCRECT lpRect, SIZE size,
		LPCRECT lpRectLast, SIZE sizeLast,
		CBrush* pBrush = 0, CBrush* pBrushLast = 0);
	void FillSolidRect(LPCRECT lpRect, COLORREF clr);
	void FillSolidRect(int x, int y, int cx, int cy, COLORREF clr);
	void Draw3dRect(LPCRECT lpRect, COLORREF clrTopLeft, COLORREF clrBottomRight);
	void Draw3dRect(int x, int y, int cx, int cy,
		COLORREF clrTopLeft, COLORREF clrBottomRight);


public:
	virtual ~CDC();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 994 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	BOOL m_bPrinting;
	HGDIOBJ SelectObject(HGDIOBJ);      

protected:
	
	static CGdiObject* __stdcall SelectGdiObject(HDC hDC, HGDIOBJ h);
};




class CPaintDC : public CDC
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPaintDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPaintDC(CWnd* pWnd);   


protected:
	HWND m_hWnd;
public:
	PAINTSTRUCT m_ps;       


public:
	virtual ~CPaintDC();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 1028 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CClientDC : public CDC
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCClientDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CClientDC(CWnd* pWnd);


protected:
	HWND m_hWnd;


public:
	virtual ~CClientDC();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 1049 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CWindowDC : public CDC
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCWindowDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CWindowDC(CWnd* pWnd);


protected:
	HWND m_hWnd;


public:
	virtual ~CWindowDC();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 1070 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};




class CMenu : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMenu; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:


	CMenu();

	BOOL CreateMenu();
	BOOL CreatePopupMenu();
	BOOL LoadMenuA(LPCTSTR lpszResourceName);
	BOOL LoadMenuA(UINT nIDResource);
	BOOL LoadMenuIndirectA(const void* lpMenuTemplate);
	BOOL DestroyMenu();


	HMENU m_hMenu;          
	HMENU GetSafeHmenu() const;
	operator HMENU() const;

	static CMenu* __stdcall FromHandle(HMENU hMenu);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HMENU hMenu);
	HMENU Detach();


	BOOL DeleteMenu(UINT nPosition, UINT nFlags);
	BOOL TrackPopupMenu(UINT nFlags, int x, int y,
						CWnd* pWnd, LPCRECT lpRect = 0);


	BOOL AppendMenuA(UINT nFlags, UINT nIDNewItem = 0,
					LPCTSTR lpszNewItem = 0);
	BOOL AppendMenuA(UINT nFlags, UINT nIDNewItem, const CBitmap* pBmp);
	UINT CheckMenuItem(UINT nIDCheckItem, UINT nCheck);
	UINT EnableMenuItem(UINT nIDEnableItem, UINT nEnable);
	UINT GetMenuItemCount() const;
	UINT GetMenuItemID(int nPos) const;
	UINT GetMenuState(UINT nID, UINT nFlags) const;
	int GetMenuStringA(UINT nIDItem, LPTSTR lpString, int nMaxCount,
					UINT nFlags) const;
	int GetMenuStringA(UINT nIDItem, CString& rString, UINT nFlags) const;
	CMenu* GetSubMenu(int nPos) const;
	BOOL InsertMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem = 0,
					LPCTSTR lpszNewItem = 0);
	BOOL InsertMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem,
					const CBitmap* pBmp);
	BOOL ModifyMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem = 0,
					LPCTSTR lpszNewItem = 0);
	BOOL ModifyMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem,
					const CBitmap* pBmp);
	BOOL RemoveMenu(UINT nPosition, UINT nFlags);
	BOOL SetMenuItemBitmaps(UINT nPosition, UINT nFlags,
					const CBitmap* pBmpUnchecked, const CBitmap* pBmpChecked);

	BOOL CheckMenuRadioItem(UINT nIDFirst, UINT nIDLast, UINT nIDItem, UINT nFlags);
#line 1132 "C:\\MSDEV\\MFC\\include\\afxwin.h"



	BOOL SetMenuContextHelpId(DWORD dwContextHelpId);
	DWORD GetMenuContextHelpId() const;
#line 1138 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);


public:
	virtual ~CMenu();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 1150 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	static CMenu* __stdcall CMenu::FromHandlePermanent(HMENU hMenu);
};




struct AFX_MSGMAP_ENTRY;       

struct AFX_MSGMAP
{

	const AFX_MSGMAP* (__stdcall* pfnGetBaseMap)();


#line 1165 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	const AFX_MSGMAP_ENTRY* lpEntries;
};


















#line 1186 "C:\\MSDEV\\MFC\\include\\afxwin.h"





















#line 1208 "C:\\MSDEV\\MFC\\include\\afxwin.h"






#line 1 "C:\\MSDEV\\MFC\\include\\afxmsg_.h"













































enum AfxSig
{
	AfxSig_end = 0,     

	AfxSig_bD,      
	AfxSig_bb,      
	AfxSig_bWww,    
	AfxSig_hDWw,    
	AfxSig_hDw,     
	AfxSig_iwWw,    
	AfxSig_iww,     
	AfxSig_iWww,    
	AfxSig_is,      
	AfxSig_lwl,     
	AfxSig_lwwM,    
	AfxSig_vv,      

	AfxSig_vw,      
	AfxSig_vww,     
	AfxSig_vvii,    
	AfxSig_vwww,    
	AfxSig_vwii,    
	AfxSig_vwl,     
	AfxSig_vbWW,    
	AfxSig_vD,      
	AfxSig_vM,      
	AfxSig_vMwb,    

	AfxSig_vW,      
	AfxSig_vWww,    
	AfxSig_vWp,     
	AfxSig_vWh,     
	AfxSig_vwW,     
	AfxSig_vwWb,    
	AfxSig_vwwW,    
	AfxSig_vwwx,    
	AfxSig_vs,      
	AfxSig_vOWNER,  
	AfxSig_iis,     
	AfxSig_wp,      
	AfxSig_wv,      
	AfxSig_vPOS,    
	AfxSig_vCALC,   
	AfxSig_vNMHDRpl,    
	AfxSig_bNMHDRpl,    
	AfxSig_vwNMHDRpl,   
	AfxSig_bwNMHDRpl,   
	AfxSig_bHELPINFO,   
	AfxSig_vwSIZING,    

	
	AfxSig_cmdui,   
	AfxSig_cmduiw,  
	AfxSig_vpv,     
	AfxSig_bpv,     

	
	AfxSig_vwwh,                
	AfxSig_vwp,                 
	AfxSig_bw = AfxSig_bb,      
	AfxSig_bh = AfxSig_bb,      
	AfxSig_iw = AfxSig_bb,      
	AfxSig_ww = AfxSig_bb,      
	AfxSig_bv = AfxSig_wv,      
	AfxSig_hv = AfxSig_wv,      
	AfxSig_vb = AfxSig_vw,      
	AfxSig_vbh = AfxSig_vww,    
	AfxSig_vbw = AfxSig_vww,    
	AfxSig_vhh = AfxSig_vww,    
	AfxSig_vh = AfxSig_vw,      
	AfxSig_viSS = AfxSig_vwl,   
	AfxSig_bwl = AfxSig_lwl,
	AfxSig_vwMOVING = AfxSig_vwSIZING,  

	AfxSig_vW2,     
};












		
		




		
		










































































































































































































































































































































































































































































































































































#line 1215 "C:\\MSDEV\\MFC\\include\\afxwin.h"





class CDataExchange
{

public:
	BOOL m_bSaveAndValidate;   
	CWnd* m_pDlgWnd;           


	HWND PrepareCtrl(int nIDC);     
	HWND PrepareEditCtrl(int nIDC); 
	void Fail();                    


	CWnd* PrepareOleCtrl(int nIDC); 
#line 1235 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	CDataExchange(CWnd* pDlgWnd, BOOL bSaveAndValidate);

	HWND m_hWndLastControl;    
	BOOL m_bEditLastControl;   
};

#line 1 "C:\\MSDEV\\MFC\\include\\afxdd_.h"















class COleCurrency;    
class COleDateTime;    


void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, BYTE& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, short& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, UINT& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, long& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, DWORD& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, float& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, double& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, COleCurrency& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, COleDateTime& value);


void __stdcall DDX_Check(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_Radio(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_LBString(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_CBString(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_LBIndex(CDataExchange* pDX, int nIDC, int& index);
void __stdcall DDX_CBIndex(CDataExchange* pDX, int nIDC, int& index);
void __stdcall DDX_LBStringExact(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_CBStringExact(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_Scroll(CDataExchange* pDX, int nIDC, int& value);


void __stdcall DDX_Control(CDataExchange* pDX, int nIDC, CWnd& rControl);







void __stdcall DDV_MinMaxByte(CDataExchange* pDX, BYTE value, BYTE minVal, BYTE maxVal);
void __stdcall DDV_MinMaxShort(CDataExchange* pDX, short value, short minVal, short maxVal);
void __stdcall DDV_MinMaxInt(CDataExchange* pDX, int value, int minVal, int maxVal);
void __stdcall DDV_MinMaxLong(CDataExchange* pDX, long value, long minVal, long maxVal);
void __stdcall DDV_MinMaxUInt(CDataExchange* pDX, UINT value, UINT minVal, UINT maxVal);
void __stdcall DDV_MinMaxDWord(CDataExchange* pDX, DWORD value, DWORD minVal, DWORD maxVal);
void __stdcall DDV_MinMaxFloat(CDataExchange* pDX, float const& value, float minVal, float maxVal);
void __stdcall DDV_MinMaxDouble(CDataExchange* pDX, double const& value, double minVal, double maxVal);


void __stdcall DDV_MaxChars(CDataExchange* pDX, CString const& value, int nChars);


#line 1244 "C:\\MSDEV\\MFC\\include\\afxwin.h"




typedef LONG HRESULT;

struct IUnknown;
typedef IUnknown* LPUNKNOWN;

struct IDispatch;
typedef IDispatch* LPDISPATCH;

struct IConnectionPoint;
typedef IConnectionPoint* LPCONNECTIONPOINT;

struct IEnumOLEVERB;
typedef IEnumOLEVERB* LPENUMOLEVERB;

typedef struct _GUID GUID;
typedef GUID IID;
typedef GUID CLSID;


#line 1268 "C:\\MSDEV\\MFC\\include\\afxwin.h"

typedef long DISPID;
typedef unsigned short VARTYPE;
typedef long SCODE;


typedef WCHAR OLECHAR;


#line 1278 "C:\\MSDEV\\MFC\\include\\afxwin.h"
typedef OLECHAR* BSTR;

struct tagDISPPARAMS;
typedef tagDISPPARAMS DISPPARAMS;

struct tagVARIANT;
typedef tagVARIANT VARIANT;

struct ITypeInfo;
typedef ITypeInfo* LPTYPEINFO;

struct ITypeLib;
typedef ITypeLib* LPTYPELIB;





struct AFX_CMDHANDLERINFO;  
struct AFX_EVENT;           
class CTypeLibCache;        






struct AFX_INTERFACEMAP_ENTRY
{
	const void* piid;       
	size_t nOffset;         
};

struct AFX_INTERFACEMAP
{

	const AFX_INTERFACEMAP* (__stdcall* pfnGetBaseMap)(); 


#line 1318 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	const AFX_INTERFACEMAP_ENTRY* pEntry; 
};



















#line 1340 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#line 1342 "C:\\MSDEV\\MFC\\include\\afxwin.h"






struct AFX_DISPMAP_ENTRY;

struct AFX_DISPMAP
{

	const AFX_DISPMAP* (__stdcall* pfnGetBaseMap)();


#line 1357 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	const AFX_DISPMAP_ENTRY* lpEntries;
	UINT* lpEntryCount;
	DWORD* lpStockPropMask;
};






















#line 1384 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#line 1386 "C:\\MSDEV\\MFC\\include\\afxwin.h"






struct AFX_OLECMDMAP_ENTRY
{
   const GUID* pguid;   
   ULONG       cmdID;   
   UINT        nID;     
};

struct AFX_OLECMDMAP
{

	const AFX_OLECMDMAP* (__stdcall* pfnGetBaseMap)();


#line 1406 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	const AFX_OLECMDMAP_ENTRY* lpEntries;
};


















#line 1427 "C:\\MSDEV\\MFC\\include\\afxwin.h"





















#line 1449 "C:\\MSDEV\\MFC\\include\\afxwin.h"





class COleCmdUI;

#line 1457 "C:\\MSDEV\\MFC\\include\\afxwin.h"






struct AFX_EVENTSINKMAP_ENTRY;

struct AFX_EVENTSINKMAP
{

	const AFX_EVENTSINKMAP* (__stdcall* pfnGetBaseMap)();


#line 1472 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	const AFX_EVENTSINKMAP_ENTRY* lpEntries;
	UINT* lpEntryCount;
};




















#line 1496 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#line 1498 "C:\\MSDEV\\MFC\\include\\afxwin.h"






struct AFX_CONNECTIONMAP_ENTRY
{
	const void* piid;   
	size_t nOffset;         
};

struct AFX_CONNECTIONMAP
{

	const AFX_CONNECTIONMAP* (__stdcall* pfnGetBaseMap)(); 


#line 1517 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	const AFX_CONNECTIONMAP_ENTRY* pEntry; 
};


















#line 1538 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#line 1540 "C:\\MSDEV\\MFC\\include\\afxwin.h"





class COccManager;      
#line 1547 "C:\\MSDEV\\MFC\\include\\afxwin.h"

class CCmdTarget : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCCmdTarget; virtual CRuntimeClass* GetRuntimeClass() const;
protected:

public:

	CCmdTarget();


	LPDISPATCH GetIDispatch(BOOL bAddRef);
		
	static CCmdTarget* __stdcall FromIDispatch(LPDISPATCH lpDispatch);
		
	BOOL IsResultExpected();
		


	void EnableAutomation();
		
	void EnableConnections();
		

	void BeginWaitCursor();
	void EndWaitCursor();
	void RestoreWaitCursor();       


	
	BOOL EnumOleVerbs(LPENUMOLEVERB* ppenumOleVerb);
	BOOL DoOleVerb(LONG iVerb, LPMSG lpMsg, HWND hWndParent, LPCRECT lpRect);
#line 1580 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	
	
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);


	
	virtual void OnFinalRelease();
#line 1591 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	
	virtual BOOL IsInvokeAllowed(DISPID dispid);
#line 1596 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	
	void EnableTypeLib();
	HRESULT GetTypeInfoOfGuid(LCID lcid, const GUID& guid,
		LPTYPEINFO* ppTypeInfo);
	virtual BOOL GetDispatchIID(IID* pIID);
	virtual UINT GetTypeInfoCount();
	virtual CTypeLibCache* GetTypeLibCache();
	virtual HRESULT GetTypeLib(LCID lcid, LPTYPELIB* ppTypeLib);
#line 1607 "C:\\MSDEV\\MFC\\include\\afxwin.h"


public:
	virtual ~CCmdTarget();

	virtual void Dump(CDumpContext& dc) const;
	virtual void AssertValid() const;
#line 1615 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	void GetNotSupported();
	void SetNotSupported();
#line 1619 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:
	friend class CView;

	CView* GetRoutingView();
	CFrameWnd* GetRoutingFrame();
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;       


	private: static const AFX_OLECMDMAP_ENTRY _commandEntries[]; protected: static __declspec(dllimport) const AFX_OLECMDMAP commandMap; static const AFX_OLECMDMAP* __stdcall _GetBaseCommandMap(); virtual const AFX_OLECMDMAP* GetCommandMap() const;
	friend class COleCmdUI;
#line 1631 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	private: static const AFX_DISPMAP_ENTRY _dispatchEntries[]; static UINT _dispatchEntryCount; static DWORD _dwStockPropMask; protected: static __declspec(dllimport) const AFX_DISPMAP dispatchMap; static const AFX_DISPMAP* __stdcall _GetBaseDispatchMap(); virtual const AFX_DISPMAP* GetDispatchMap() const;
	private: static const AFX_CONNECTIONMAP_ENTRY _connectionEntries[]; protected: static __declspec(dllimport) const AFX_CONNECTIONMAP connectionMap; static const AFX_CONNECTIONMAP* __stdcall _GetBaseConnectionMap(); virtual const AFX_CONNECTIONMAP* GetConnectionMap() const;
	private: static const AFX_INTERFACEMAP_ENTRY _interfaceEntries[]; protected: static __declspec(dllimport) const AFX_INTERFACEMAP interfaceMap; static const AFX_INTERFACEMAP* __stdcall _GetBaseInterfaceMap(); virtual const AFX_INTERFACEMAP* GetInterfaceMap() const;


	private: static const AFX_EVENTSINKMAP_ENTRY _eventsinkEntries[]; static UINT _eventsinkEntryCount; protected: static __declspec(dllimport) const AFX_EVENTSINKMAP eventsinkMap; static const AFX_EVENTSINKMAP* __stdcall _GetBaseEventSinkMap(); virtual const AFX_EVENTSINKMAP* GetEventSinkMap() const;
#line 1640 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
public:
	
	long m_dwRef;
	LPUNKNOWN m_pOuterUnknown;  
	DWORD m_xInnerUnknown;  

public:
	
	void EnableAggregation();       
	void ExternalDisconnect();      
	LPUNKNOWN GetControllingUnknown();
		

	
	DWORD InternalQueryInterface(const void*, LPVOID* ppvObj);
	DWORD InternalAddRef();
	DWORD InternalRelease();
	
	DWORD ExternalQueryInterface(const void*, LPVOID* ppvObj);
	DWORD ExternalAddRef();
	DWORD ExternalRelease();

	
	LPUNKNOWN GetInterface(const void*);
	LPUNKNOWN QueryAggregates(const void*);

	
	virtual BOOL OnCreateAggregates();
	virtual LPUNKNOWN GetInterfaceHook(const void*);

	
protected:
	struct XDispatch
	{
		DWORD m_vtbl;   



	} m_xDispatch;
	BOOL m_bResultExpected;

	
	void GetStandardProp(const AFX_DISPMAP_ENTRY* pEntry,
		VARIANT* pvarResult, UINT* puArgErr);
	SCODE SetStandardProp(const AFX_DISPMAP_ENTRY* pEntry,
		DISPPARAMS* pDispParams, UINT* puArgErr);

	
	static UINT __stdcall GetEntryCount(const AFX_DISPMAP* pDispMap);
	const AFX_DISPMAP_ENTRY* __stdcall GetDispEntry(LONG memid);
	static LONG __stdcall MemberIDFromName(const AFX_DISPMAP* pDispMap, LPCTSTR lpszName);

	
	static UINT __stdcall GetStackSize(const BYTE* pbParams, VARTYPE vtResult);




#line 1701 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	SCODE PushStackArgs(BYTE* pStack, const BYTE* pbParams,
		void* pResult, VARTYPE vtResult, DISPPARAMS* pDispParams,
		UINT* puArgErr, VARIANT* rgTempVars);
#line 1705 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	SCODE CallMemberFunc(const AFX_DISPMAP_ENTRY* pEntry, WORD wFlags,
		VARIANT* pvarResult, DISPPARAMS* pDispParams, UINT* puArgErr);

	friend class COleDispatchImpl;


public:
	
	BOOL OnEvent(UINT idCtrl, AFX_EVENT* pEvent,
		AFX_CMDHANDLERINFO* pHandlerInfo);
protected:
	const AFX_EVENTSINKMAP_ENTRY* __stdcall GetEventSinkEntry(UINT idCtrl,
		AFX_EVENT* pEvent);
#line 1719 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	struct XConnPtContainer
	{
		DWORD m_vtbl;   



	} m_xConnPtContainer;


	AFX_MODULE_STATE* m_pModuleState;
	friend class CInnerUnknown;
	friend UINT __stdcall _AfxThreadEntry(void* pParam);
#line 1734 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	virtual BOOL GetExtraConnectionPoints(CPtrArray* pConnPoints);
	virtual LPCONNECTIONPOINT GetConnectionHook(const IID& iid);

	friend class COleConnPtContainer;

#line 1741 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};

class CCmdUI        
{
public:

	UINT m_nID;
	UINT m_nIndex;          

	
	CMenu* m_pMenu;         
	CMenu* m_pSubMenu;      
							

	
	CWnd* m_pOther;         


	virtual void Enable(BOOL bOn = 1);
	virtual void SetCheck(int nCheck = 1);   
	virtual void SetRadio(BOOL bOn = 1);
	virtual void SetText(LPCTSTR lpszText);


	void ContinueRouting();


	CCmdUI();
	BOOL m_bEnableChanged;
	BOOL m_bContinueRouting;
	UINT m_nIndexMax;       

	CMenu* m_pParentMenu;   
							

	BOOL DoUpdate(CCmdTarget* pTarget, BOOL bDisableIfNoHndler);
};







#line 1786 "C:\\MSDEV\\MFC\\include\\afxwin.h"
typedef void ( CCmdTarget::*AFX_PMSG)(void);

enum AFX_DISPMAP_FLAGS
{
	afxDispCustom = 0,
	afxDispStock = 1
};

struct AFX_DISPMAP_ENTRY
{
	LPCTSTR lpszName;       
	long lDispID;           
	LPCSTR lpszParams;      
	WORD vt;                
	AFX_PMSG pfn;           
	AFX_PMSG pfnSet;        
	size_t nPropOffset;     
	AFX_DISPMAP_FLAGS flags;
};

struct AFX_EVENTSINKMAP_ENTRY
{
	AFX_DISPMAP_ENTRY dispEntry;
	UINT nCtrlIDFirst;
	UINT nCtrlIDLast;
};


enum DSCSTATE
{
	dscNoState = 0,
	dscOKToDo,
	dscCancelled,
	dscSyncBefore,
	dscAboutToDo,
	dscFailedToDo,
	dscSyncAfter,
	dscDidEvent
};

enum DSCREASON
{
	dscNoReason = 0,
	dscClose,
	dscCommit,
	dscDelete,
	dscEdit,
	dscInsert,
	dscModify,
	dscMove
};





struct CCreateContext;      
struct CPrintInfo;          

struct AFX_MSGMAP_ENTRY
{
	UINT nMessage;   
	UINT nCode;      
	UINT nID;        
	UINT nLastID;    
	UINT nSig;       
	AFX_PMSG pfn;    
};




class COleDropTarget;   
class COleControlContainer;
class COleControlSite;
























class CWnd : public CCmdTarget
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
protected:
	static const MSG* __stdcall GetCurrentMessage();


public:
	HWND m_hWnd;            
	operator HWND() const;

	HWND GetSafeHwnd() const;
	DWORD GetStyle() const;
	DWORD GetExStyle() const;
	BOOL ModifyStyle(DWORD dwRemove, DWORD dwAdd, UINT nFlags = 0);
	BOOL ModifyStyleEx(DWORD dwRemove, DWORD dwAdd, UINT nFlags = 0);

	CWnd* GetOwner() const;
	void SetOwner(CWnd* pOwnerWnd);


	CWnd();

	static CWnd* __stdcall FromHandle(HWND hWnd);
	static CWnd* __stdcall FromHandlePermanent(HWND hWnd);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HWND hWndNew);
	HWND Detach();

	
	virtual void PreSubclassWindow();
	BOOL SubclassWindow(HWND hWnd);
	BOOL SubclassDlgItem(UINT nID, CWnd* pParent);
	HWND UnsubclassWindow();

	
	BOOL ExecuteDlgInit(LPCTSTR lpszResourceName);
	BOOL ExecuteDlgInit(LPVOID lpResource);

public:
	
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = 0);

	
	BOOL CreateEx(DWORD dwExStyle, LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		int x, int y, int nWidth, int nHeight,
		HWND hWndParent, HMENU nIDorHMenu, LPVOID lpParam = 0);


	
	BOOL CreateControl(const CLSID & clsid, LPCTSTR pszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID, CFile* pPersist=0,
		BOOL bStorage=0, BSTR bstrLicKey=0);

	BOOL CreateControl(LPCTSTR pszClass, LPCTSTR pszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID, CFile* pPersist=0,
		BOOL bStorage=0, BSTR bstrLicKey=0);

	LPUNKNOWN GetControlUnknown();
#line 1950 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	virtual BOOL DestroyWindow();

	
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);

	
	enum AdjustType { adjustBorder = 0, adjustOutside = 1 };
	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);


	int GetDlgCtrlID() const;
	int SetDlgCtrlID(int nID);
		
	CWnd* GetDlgItem(int nID) const;
		
	void GetDlgItem(int nID, HWND* phWnd) const;
		
	CWnd* GetDescendantWindow(int nID, BOOL bOnlyPerm = 0) const;
		
	void SendMessageToDescendants(UINT message, WPARAM wParam = 0,
		LPARAM lParam = 0, BOOL bDeep = 1, BOOL bOnlyPerm = 0);
	CFrameWnd* GetParentFrame() const;
	CWnd* GetTopLevelParent() const;
	CWnd* GetTopLevelOwner() const;
	CWnd* GetParentOwner() const;
	CFrameWnd* GetTopLevelFrame() const;
	static CWnd* __stdcall GetSafeOwner(CWnd* pParent = 0, HWND* pWndTop = 0);


	LRESULT SendMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0);
	BOOL PostMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0);


	BOOL SendNotifyMessageA(UINT message, WPARAM wParam, LPARAM lParam);
#line 1987 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL SendChildNotifyLastMsg(LRESULT* pResult = 0);


	BOOL IsDialogMessageA(LPMSG lpMsg);


	void SetWindowTextA(LPCTSTR lpszString);
	int GetWindowTextA(LPTSTR lpszStringBuf, int nMaxCount) const;
	void GetWindowTextA(CString& rString) const;
	int GetWindowTextLengthA() const;
	void SetFont(CFont* pFont, BOOL bRedraw = 1);
	CFont* GetFont() const;


	CMenu* GetMenu() const;
	BOOL SetMenu(CMenu* pMenu);
	void DrawMenuBar();
	CMenu* GetSystemMenu(BOOL bRevert) const;
	BOOL HiliteMenuItem(CMenu* pMenu, UINT nIDHiliteItem, UINT nHilite);


	BOOL IsIconic() const;
	BOOL IsZoomed() const;
	void MoveWindow(int x, int y, int nWidth, int nHeight,
				BOOL bRepaint = 1);
	void MoveWindow(LPCRECT lpRect, BOOL bRepaint = 1);

	static __declspec(dllimport) const CWnd wndTop; 
	static __declspec(dllimport) const CWnd wndBottom; 
	static __declspec(dllimport) const CWnd wndTopMost; 
	static __declspec(dllimport) const CWnd wndNoTopMost; 

	BOOL SetWindowPos(const CWnd* pWndInsertAfter, int x, int y,
				int cx, int cy, UINT nFlags);

	UINT ArrangeIconicWindows();
#line 2024 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	void BringWindowToTop();
	void GetWindowRect(LPRECT lpRect) const;
	void GetClientRect(LPRECT lpRect) const;

	BOOL GetWindowPlacement(WINDOWPLACEMENT* lpwndpl) const;
	BOOL SetWindowPlacement(const WINDOWPLACEMENT* lpwndpl);


	void ClientToScreen(LPPOINT lpPoint) const;
	void ClientToScreen(LPRECT lpRect) const;
	void ScreenToClient(LPPOINT lpPoint) const;
	void ScreenToClient(LPRECT lpRect) const;
	void MapWindowPoints(CWnd* pwndTo, LPPOINT lpPoint, UINT nCount) const;
	void MapWindowPoints(CWnd* pwndTo, LPRECT lpRect) const;


	CDC* BeginPaint(LPPAINTSTRUCT lpPaint);
	void EndPaint(LPPAINTSTRUCT lpPaint);
	CDC* GetDC();
	CDC* GetWindowDC();
	int ReleaseDC(CDC* pDC);
	void Print(CDC* pDC, DWORD dwFlags) const;
	void PrintClient(CDC* pDC, DWORD dwFlags) const;

	void UpdateWindow();
	void SetRedraw(BOOL bRedraw = 1);
	BOOL GetUpdateRect(LPRECT lpRect, BOOL bErase = 0);
	int GetUpdateRgn(CRgn* pRgn, BOOL bErase = 0);
	void Invalidate(BOOL bErase = 1);
	void InvalidateRect(LPCRECT lpRect, BOOL bErase = 1);
	void InvalidateRgn(CRgn* pRgn, BOOL bErase = 1);
	void ValidateRect(LPCRECT lpRect);
	void ValidateRgn(CRgn* pRgn);
	BOOL ShowWindow(int nCmdShow);
	BOOL IsWindowVisible() const;
	void ShowOwnedPopups(BOOL bShow = 1);

	CDC* GetDCEx(CRgn* prgnClip, DWORD flags);

	BOOL LockWindowUpdate();    
	void UnlockWindowUpdate();
#line 2066 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	BOOL RedrawWindow(LPCRECT lpRectUpdate = 0,
		CRgn* prgnUpdate = 0,
		UINT flags = 0x0001 | 0x0100 | 0x0004);
	BOOL EnableScrollBar(int nSBFlags, UINT nArrowFlags = 0x0000);


	UINT SetTimer(UINT nIDEvent, UINT nElapse,
		void (__stdcall* lpfnTimer)(HWND, UINT, UINT, DWORD));
	BOOL KillTimer(int nIDEvent);


	BOOL EnableToolTips(BOOL bEnable = 1);
	static void __stdcall CancelToolTips(BOOL bKeys = 0);
	void FilterToolTipMessage(MSG* pMsg);

	
	virtual int OnToolHitTest(CPoint point, TOOLINFOA* pTI) const;


	BOOL IsWindowEnabled() const;
	BOOL EnableWindow(BOOL bEnable = 1);

	
	static CWnd* __stdcall GetActiveWindow();
	CWnd* SetActiveWindow();

	
	BOOL SetForegroundWindow();
	static CWnd* __stdcall GetForegroundWindow();

	
	static CWnd* __stdcall GetCapture();
	CWnd* SetCapture();
	static CWnd* __stdcall GetFocus();
	CWnd* SetFocus();

	static CWnd* __stdcall GetDesktopWindow();



	void CloseWindow();
	BOOL OpenIcon();
#line 2109 "C:\\MSDEV\\MFC\\include\\afxwin.h"



	void CheckDlgButton(int nIDButton, UINT nCheck);
	void CheckRadioButton(int nIDFirstButton, int nIDLastButton,
					int nIDCheckButton);
	int GetCheckedRadioButton(int nIDFirstButton, int nIDLastButton);

	int DlgDirListA(LPTSTR lpPathSpec, int nIDListBox,
					int nIDStaticPath, UINT nFileType);
	int DlgDirListComboBoxA(LPTSTR lpPathSpec, int nIDComboBox,
					int nIDStaticPath, UINT nFileType);
	BOOL DlgDirSelect(LPTSTR lpString, int nIDListBox);
	BOOL DlgDirSelectComboBox(LPTSTR lpString, int nIDComboBox);
#line 2124 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	UINT GetDlgItemInt(int nID, BOOL* lpTrans = 0,
					BOOL bSigned = 1) const;
	int GetDlgItemTextA(int nID, LPTSTR lpStr, int nMaxCount) const;
	int GetDlgItemTextA(int nID, CString& rString) const;
	CWnd* GetNextDlgGroupItem(CWnd* pWndCtl, BOOL bPrevious = 0) const;

	CWnd* GetNextDlgTabItem(CWnd* pWndCtl, BOOL bPrevious = 0) const;
	UINT IsDlgButtonChecked(int nIDButton) const;
	LRESULT SendDlgItemMessageA(int nID, UINT message,
					WPARAM wParam = 0, LPARAM lParam = 0);
	void SetDlgItemInt(int nID, UINT nValue, BOOL bSigned = 1);
	void SetDlgItemTextA(int nID, LPCTSTR lpszString);


	int GetScrollPos(int nBar) const;
	void GetScrollRange(int nBar, LPINT lpMinPos, LPINT lpMaxPos) const;
	void ScrollWindow(int xAmount, int yAmount,
					LPCRECT lpRect = 0,
					LPCRECT lpClipRect = 0);
	int SetScrollPos(int nBar, int nPos, BOOL bRedraw = 1);
	void SetScrollRange(int nBar, int nMinPos, int nMaxPos,
			BOOL bRedraw = 1);
	void ShowScrollBar(UINT nBar, BOOL bShow = 1);
	void EnableScrollBarCtrl(int nBar, BOOL bEnable = 1);
	virtual CScrollBar* GetScrollBarCtrl(int nBar) const;
			

	int ScrollWindowEx(int dx, int dy,
				LPCRECT lpRectScroll, LPCRECT lpRectClip,
				CRgn* prgnUpdate, LPRECT lpRectUpdate, UINT flags);
	BOOL SetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo,
		BOOL bRedraw = 1);
	BOOL GetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo, UINT nMask = (0x0001 | 0x0002 | 0x0004 | 0x0010));
	int GetScrollLimit(int nBar);


	CWnd* ChildWindowFromPoint(POINT point) const;

	CWnd* ChildWindowFromPoint(POINT point, UINT nFlags) const;
#line 2165 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	static CWnd* __stdcall FindWindowA(LPCTSTR lpszClassName, LPCTSTR lpszWindowName);
	CWnd* GetNextWindow(UINT nFlag = 2) const;
	CWnd* GetTopWindow() const;

	CWnd* GetWindow(UINT nCmd) const;
	CWnd* GetLastActivePopup() const;

	BOOL IsChild(const CWnd* pWnd) const;
	CWnd* GetParent() const;
	CWnd* SetParent(CWnd* pWndNewParent);
	static CWnd* __stdcall WindowFromPoint(POINT point);


	BOOL FlashWindow(BOOL bInvert);
	int MessageBoxA(LPCTSTR lpszText, LPCTSTR lpszCaption = 0,
			UINT nType = 0x00000000L);


	BOOL ChangeClipboardChain(HWND hWndNext);
	HWND SetClipboardViewer();
	BOOL OpenClipboard();
	static CWnd* __stdcall GetClipboardOwner();
	static CWnd* __stdcall GetClipboardViewer();
	static CWnd* __stdcall GetOpenClipboardWindow();


	void CreateCaret(CBitmap* pBitmap);
	void CreateSolidCaret(int nWidth, int nHeight);
	void CreateGrayCaret(int nWidth, int nHeight);
	static CPoint __stdcall GetCaretPos();
	static void __stdcall SetCaretPos(POINT point);
	void HideCaret();
	void ShowCaret();


	void DragAcceptFiles(BOOL bAccept = 1);


	HICON SetIcon(HICON hIcon, BOOL bBigIcon);
	HICON GetIcon(BOOL bBigIcon) const;



	BOOL SetWindowContextHelpId(DWORD dwContextHelpId);
	DWORD GetWindowContextHelpId() const;

#line 2212 "C:\\MSDEV\\MFC\\include\\afxwin.h"


public:
	BOOL UpdateData(BOOL bSaveAndValidate = 1);
			


	 void OnHelp();          
	 void OnHelpIndex();     
	 void OnHelpFinder();    
	 void OnHelpUsing();     
	virtual void WinHelpA(DWORD dwData, UINT nCmd = 0x0001L);


public:
	enum RepositionFlags
		{ reposDefault = 0, reposQuery = 1, reposExtra = 2 };
	void RepositionBars(UINT nIDFirst, UINT nIDLast, UINT nIDLeftOver,
		UINT nFlag = reposDefault, LPRECT lpRectParam = 0,
		LPCRECT lpRectClient = 0, BOOL bStretch = 1);

	
	void UpdateDialogControls(CCmdTarget* pTarget, BOOL bDisableIfNoHndler);
	void CenterWindow(CWnd* pAlternateOwner = 0);
	int RunModalLoop(DWORD dwFlags = 0);
	virtual BOOL ContinueModal();
	virtual void EndModalLoop(int nResult);



	void __cdecl InvokeHelper(DISPID dwDispID, WORD wFlags,
		VARTYPE vtRet, void* pvRet, const BYTE* pbParamInfo, ...);
	void __cdecl SetProperty(DISPID dwDispID, VARTYPE vtProp, ...);
	void GetProperty(DISPID dwDispID, VARTYPE vtProp, void* pvProp) const;
	IUnknown* GetDSCCursor();
	void BindDefaultProperty(DISPID dwDispID, VARTYPE vtProp, LPCTSTR szFieldName, CWnd* pDSCWnd);
	void BindProperty(DISPID dwDispId, CWnd* pWndDSC);
#line 2250 "C:\\MSDEV\\MFC\\include\\afxwin.h"


protected:
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);

	 void OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized);
	 void OnActivateApp(BOOL bActive, HTASK hTask);
	 LRESULT OnActivateTopLevel(WPARAM, LPARAM);
	 void OnCancelMode();
	 void OnChildActivate();
	 void OnClose();
	 void OnContextMenu(CWnd* pWnd, CPoint pos);
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);

	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);

	 void OnDestroy();
	 void OnEnable(BOOL bEnable);
	 void OnEndSession(BOOL bEnding);
	 void OnEnterIdle(UINT nWhy, CWnd* pWho);
	 BOOL OnEraseBkgnd(CDC* pDC);
	 void OnGetMinMaxInfo(MINMAXINFO* lpMMI);
	 BOOL OnHelpInfo(HELPINFO* lpHelpInfo);
	 void OnIconEraseBkgnd(CDC* pDC);
	 void OnKillFocus(CWnd* pNewWnd);
	 LRESULT OnMenuChar(UINT nChar, UINT nFlags, CMenu* pMenu);
	 void OnMenuSelect(UINT nItemID, UINT nFlags, HMENU hSysMenu);
	 void OnMove(int x, int y);
	 void OnPaint();
	 void OnParentNotify(UINT message, LPARAM lParam);
	 HCURSOR OnQueryDragIcon();
	 BOOL OnQueryEndSession();
	 BOOL OnQueryNewPalette();
	 BOOL OnQueryOpen();
	 void OnSetFocus(CWnd* pOldWnd);
	 void OnShowWindow(BOOL bShow, UINT nStatus);
	 void OnSize(UINT nType, int cx, int cy);
	 void OnTCard(UINT idAction, DWORD dwActionData);
	 void OnWindowPosChanging(WINDOWPOS* lpwndpos);
	 void OnWindowPosChanged(WINDOWPOS* lpwndpos);


	 BOOL OnNcActivate(BOOL bActive);
	 void OnNcCalcSize(BOOL bCalcValidRects, NCCALCSIZE_PARAMS* lpncsp);
	 BOOL OnNcCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnNcDestroy();
	 UINT OnNcHitTest(CPoint point);
	 void OnNcLButtonDblClk(UINT nHitTest, CPoint point);
	 void OnNcLButtonDown(UINT nHitTest, CPoint point);
	 void OnNcLButtonUp(UINT nHitTest, CPoint point);
	 void OnNcMButtonDblClk(UINT nHitTest, CPoint point);
	 void OnNcMButtonDown(UINT nHitTest, CPoint point);
	 void OnNcMButtonUp(UINT nHitTest, CPoint point);
	 void OnNcMouseMove(UINT nHitTest, CPoint point);
	 void OnNcPaint();
	 void OnNcRButtonDblClk(UINT nHitTest, CPoint point);
	 void OnNcRButtonDown(UINT nHitTest, CPoint point);
	 void OnNcRButtonUp(UINT nHitTest, CPoint point);


	 void OnDropFiles(HDROP hDropInfo);
	 void OnPaletteIsChanging(CWnd* pRealizeWnd);
	 void OnSysChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSysCommand(UINT nID, LPARAM lParam);
	 void OnSysDeadChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSysKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSysKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnCompacting(UINT nCpuTime);
	 void OnDevModeChange(LPTSTR lpDeviceName);
	 void OnFontChange();
	 void OnPaletteChanged(CWnd* pFocusWnd);
	 void OnSpoolerStatus(UINT nStatus, UINT nJobs);
	 void OnSysColorChange();
	 void OnTimeChange();
	 void OnWinIniChange(LPCTSTR lpszSection);


	 void OnChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnDeadChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnLButtonDblClk(UINT nFlags, CPoint point);
	 void OnLButtonDown(UINT nFlags, CPoint point);
	 void OnLButtonUp(UINT nFlags, CPoint point);
	 void OnMButtonDblClk(UINT nFlags, CPoint point);
	 void OnMButtonDown(UINT nFlags, CPoint point);
	 void OnMButtonUp(UINT nFlags, CPoint point);
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message);
	 void OnMouseMove(UINT nFlags, CPoint point);
	 void OnRButtonDblClk(UINT nFlags, CPoint point);
	 void OnRButtonDown(UINT nFlags, CPoint point);
	 void OnRButtonUp(UINT nFlags, CPoint point);
	 BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	 void OnTimer(UINT nIDEvent);


	 void OnInitMenu(CMenu* pMenu);
	 void OnInitMenuPopup(CMenu* pPopupMenu, UINT nIndex, BOOL bSysMenu);


	 void OnAskCbFormatName(UINT nMaxCount, LPTSTR lpszString);
	 void OnChangeCbChain(HWND hWndRemove, HWND hWndAfter);
	 void OnDestroyClipboard();
	 void OnDrawClipboard();
	 void OnHScrollClipboard(CWnd* pClipAppWnd, UINT nSBCode, UINT nPos);
	 void OnPaintClipboard(CWnd* pClipAppWnd, HGLOBAL hPaintStruct);
	 void OnRenderAllFormats();
	 void OnRenderFormat(UINT nFormat);
	 void OnSizeClipboard(CWnd* pClipAppWnd, HGLOBAL hRect);
	 void OnVScrollClipboard(CWnd* pClipAppWnd, UINT nSBCode, UINT nPos);


	 int OnCompareItem(int nIDCtl, LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	 void OnDeleteItem(int nIDCtl, LPDELETEITEMSTRUCT lpDeleteItemStruct);
	 void OnDrawItem(int nIDCtl, LPDRAWITEMSTRUCT lpDrawItemStruct);
	 UINT OnGetDlgCode();
	 void OnMeasureItem(int nIDCtl, LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	 int OnCharToItem(UINT nChar, CListBox* pListBox, UINT nIndex);
	 int OnVKeyToItem(UINT nKey, CListBox* pListBox, UINT nIndex);


	 void OnMDIActivate(BOOL bActivate,
		CWnd* pActivateWnd, CWnd* pDeactivateWnd);


	 void OnEnterMenuLoop(BOOL bIsTrackPopupMenu);
	 void OnExitMenuLoop(BOOL bIsTrackPopupMenu);


	 void OnStyleChanged(int nStyleType, LPSTYLESTRUCT lpStyleStruct);
	 void OnStyleChanging(int nStyleType, LPSTYLESTRUCT lpStyleStruct);
	 void OnSizing(UINT nSide, LPRECT lpRect);
	 void OnMoving(UINT nSide, LPRECT lpRect);
	 void OnCaptureChanged(CWnd* pWnd);
	 BOOL OnDeviceChange(UINT nEventType, DWORD dwData);


protected:
	
	virtual WNDPROC* GetSuperWndProcAddr();

	
	virtual void DoDataExchange(CDataExchange* pDX);

public:
	
	virtual void BeginModalState();
	virtual void EndModalState();

	
	virtual BOOL PreTranslateMessage(MSG* pMsg);


	
	virtual BOOL OnAmbientProperty(COleControlSite* pSite, DISPID dispid,
		VARIANT* pvar);
#line 2410 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:
	
	virtual LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam);
	virtual BOOL OnWndMsg(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult);

	
	LRESULT Default();
	virtual LRESULT DefWindowProcA(UINT message, WPARAM wParam, LPARAM lParam);

	
	virtual void PostNcDestroy();

	
	virtual BOOL OnChildNotify(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult);
		
	BOOL ReflectChildNotify(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult);
	static BOOL __stdcall ReflectLastMsg(HWND hWndChild, LRESULT* pResult = 0);


public:
	virtual ~CWnd();
	virtual BOOL CheckAutoCenter();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 2437 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	
	BOOL SubclassCtl3d(int nControlType = -1);
		
	BOOL SubclassDlg3d(DWORD dwMask = 0xFFFF );
		
	static BOOL __stdcall GrayCtlColor(HDC hDC, HWND hWnd, UINT nCtlColor,
		HBRUSH hbrGray, COLORREF clrText);
	HBRUSH OnGrayCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);

	
	BOOL HandleFloatingSysCommand(UINT nID, LPARAM lParam);
	BOOL IsTopParentActive() const;
	void ActivateTopParent();
	static BOOL __stdcall WalkPreTranslateTree(HWND hWndStop, MSG* pMsg);
	static CWnd* __stdcall GetDescendantWindow(HWND hWnd, int nID,
		BOOL bOnlyPerm);
	static void __stdcall SendMessageToDescendants(HWND hWnd, UINT message,
		WPARAM wParam, LPARAM lParam, BOOL bDeep, BOOL bOnlyPerm);
	virtual BOOL IsFrameWnd() const; 
	virtual void OnFinalRelease();
	BOOL PreTranslateInput(LPMSG lpMsg);
	static BOOL __stdcall ModifyStyle(HWND hWnd, DWORD dwRemove, DWORD dwAdd,
		UINT nFlags);
	static BOOL __stdcall ModifyStyleEx(HWND hWnd, DWORD dwRemove, DWORD dwAdd,
		UINT nFlags);
	static void __stdcall _FilterToolTipMessage(MSG* pMsg, CWnd* pWnd);

public:
	HWND m_hWndOwner;   
	UINT m_nFlags;      

protected:
	WNDPROC m_pfnSuper; 
	static const UINT m_nMsgDragList;
	int m_nModalResult; 

	COleDropTarget* m_pDropTarget;  
	friend class COleDropTarget;
	friend class CFrameWnd;

	
	BOOL CreateDlg(LPCTSTR lpszTemplateName, CWnd* pParentWnd);
	BOOL CreateDlgIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd);
	BOOL CreateDlgIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd,
		HINSTANCE hInst);


	COleControlContainer* m_pCtrlCont;  
	COleControlSite* m_pCtrlSite;       
	friend class COccManager;
	friend class COleControlSite;
	friend class COleControlContainer;
	BOOL InitControlContainer();
	virtual BOOL SetOccDialogInfo(struct _AFX_OCC_DIALOG_INFO* pOccDialogInfo);
	void AttachControlSite(CHandleMap* pMap);
public:
	void AttachControlSite(CWnd* pWndParent);
#line 2495 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:
	
	friend LRESULT __stdcall _AfxSendMsgHook(int, WPARAM, LPARAM);
	friend void __stdcall _AfxStandardSubclass(HWND);
	friend LRESULT __stdcall _AfxCbtFilterHook(int, WPARAM, LPARAM);
	friend LRESULT __stdcall AfxCallWndProc(CWnd*, HWND, UINT, WPARAM, LPARAM);

	
	 LRESULT OnNTCtlColor(WPARAM wParam, LPARAM lParam);
	 LRESULT OnQuery3dControls(WPARAM, LPARAM);
	 LRESULT OnDisplayChange(WPARAM, LPARAM);




	 LRESULT OnDragList(WPARAM, LPARAM);

	
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

private:
	CWnd(HWND hWnd);    
};


LPCTSTR __stdcall AfxRegisterWndClass(UINT nClassStyle,
	HCURSOR hCursor = 0, HBRUSH hbrBackground = 0, HICON hIcon = 0);

BOOL __stdcall AfxRegisterClass(WNDCLASS* lpWndClass);


LRESULT __stdcall AfxWndProc(HWND, UINT, WPARAM, LPARAM);

WNDPROC __stdcall AfxGetAfxWndProc();


typedef void ( CWnd::*AFX_PMSGW)(void);
	

typedef void ( CWinThread::*AFX_PMSGT)(void);
	




class CDialog : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDialog; virtual CRuntimeClass* GetRuntimeClass() const;

	
public:
	CDialog();

	BOOL Create(LPCTSTR lpszTemplateName, CWnd* pParentWnd = 0);
	BOOL Create(UINT nIDTemplate, CWnd* pParentWnd = 0);
	BOOL CreateIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd = 0,
		void* lpDialogInit = 0);
	BOOL CreateIndirect(HGLOBAL hDialogTemplate, CWnd* pParentWnd = 0);

	
public:
	CDialog(LPCTSTR lpszTemplateName, CWnd* pParentWnd = 0);
	CDialog(UINT nIDTemplate, CWnd* pParentWnd = 0);
	BOOL InitModalIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd = 0,
		void* lpDialogInit = 0);
	BOOL InitModalIndirect(HGLOBAL hDialogTemplate, CWnd* pParentWnd = 0);


public:
	void MapDialogRect(LPRECT lpRect) const;
	void SetHelpID(UINT nIDR);


public:
	
	virtual int DoModal();

	
	void NextDlgCtrl() const;
	void PrevDlgCtrl() const;
	void GotoDlgCtrl(CWnd* pWndCtrl);

	
	void SetDefID(UINT nID);
	DWORD GetDefID() const;

	
	void EndDialog(int nResult);


	virtual BOOL OnInitDialog();
	virtual void OnSetFont(CFont* pFont);
protected:
	virtual void OnOK();
	virtual void OnCancel();


public:
	virtual ~CDialog();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 2600 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual BOOL CheckAutoCenter();

protected:
	UINT m_nIDHelp;                 

	
	LPCTSTR m_lpszTemplateName;     
	HGLOBAL m_hDialogTemplate;      
	LPCDLGTEMPLATE m_lpDialogTemplate;  
	void* m_lpDialogInit;           
	CWnd* m_pParentWnd;             
	HWND m_hWndTop;                 


	_AFX_OCC_DIALOG_INFO* m_pOccDialogInfo;
	virtual BOOL SetOccDialogInfo(_AFX_OCC_DIALOG_INFO* pOccDialogInfo);
#line 2620 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual void PreInitDialog();

	
	HWND PreModal();
	void PostModal();

	BOOL CreateIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd,
		void* lpDialogInit, HINSTANCE hInst);
	BOOL CreateIndirect(HGLOBAL hDialogTemplate, CWnd* pParentWnd,
		HINSTANCE hInst);

protected:
	
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	 LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
	 LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
	 LRESULT HandleInitDialog(WPARAM, LPARAM);
	 LRESULT HandleSetFont(WPARAM, LPARAM);
	



	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};







class CStatic : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCStatic; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CStatic();
	BOOL Create(LPCTSTR lpszText, DWORD dwStyle,
				const RECT& rect, CWnd* pParentWnd, UINT nID = 0xffff);


	HICON SetIcon(HICON hIcon);
	HICON GetIcon() const;


	HENHMETAFILE SetEnhMetaFile(HENHMETAFILE hMetaFile);
	HENHMETAFILE GetEnhMetaFileA() const;
	HBITMAP SetBitmap(HBITMAP hBitmap);
	HBITMAP GetBitmap() const;
	HCURSOR SetCursor(HCURSOR hCursor);
	HCURSOR GetCursor();
#line 2673 "C:\\MSDEV\\MFC\\include\\afxwin.h"


public:
	virtual ~CStatic();
};

class CButton : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCButton; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CButton();
	BOOL Create(LPCTSTR lpszCaption, DWORD dwStyle,
				const RECT& rect, CWnd* pParentWnd, UINT nID);


	UINT GetState() const;
	void SetState(BOOL bHighlight);
	int GetCheck() const;
	void SetCheck(int nCheck);
	UINT GetButtonStyle() const;
	void SetButtonStyle(UINT nStyle, BOOL bRedraw = 1);


	HICON SetIcon(HICON hIcon);
	HICON GetIcon() const;
	HBITMAP SetBitmap(HBITMAP hBitmap);
	HBITMAP GetBitmap() const;
	HCURSOR SetCursor(HCURSOR hCursor);
	HCURSOR GetCursor();
#line 2705 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);


public:
	virtual ~CButton();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};

class CListBox : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCListBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CListBox();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);



	
	int GetCount() const;
	int GetHorizontalExtent() const;
	void SetHorizontalExtent(int cxExtent);
	int GetTopIndex() const;
	int SetTopIndex(int nIndex);
	LCID GetLocale() const;
	LCID SetLocale(LCID nNewLocale);

	int InitStorage(int nItems, UINT nBytes);
	UINT ItemFromPoint(CPoint pt, BOOL& bOutside) const;
#line 2739 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	
	int GetCurSel() const;
	int SetCurSel(int nSelect);

	
	int GetSel(int nIndex) const;           
	int SetSel(int nIndex, BOOL bSelect = 1);
	int GetSelCount() const;
	int GetSelItems(int nMaxItems, LPINT rgIndex) const;
	void SetAnchorIndex(int nIndex);
	int GetAnchorIndex() const;

	
	DWORD GetItemData(int nIndex) const;
	int SetItemData(int nIndex, DWORD dwItemData);
	void* GetItemDataPtr(int nIndex) const;
	int SetItemDataPtr(int nIndex, void* pData);
	int GetItemRect(int nIndex, LPRECT lpRect) const;
	int GetText(int nIndex, LPTSTR lpszBuffer) const;
	void GetText(int nIndex, CString& rString) const;
	int GetTextLen(int nIndex) const;

	
	void SetColumnWidth(int cxWidth);
	BOOL SetTabStops(int nTabStops, LPINT rgTabStops);
	void SetTabStops();
	BOOL SetTabStops(const int& cxEachStop);    

	int SetItemHeight(int nIndex, UINT cyItemHeight);
	int GetItemHeight(int nIndex) const;
	int FindStringExact(int nIndexStart, LPCTSTR lpszFind) const;
	int GetCaretIndex() const;
	int SetCaretIndex(int nIndex, BOOL bScroll = 1);


	
	int AddString(LPCTSTR lpszItem);
	int DeleteString(UINT nIndex);
	int InsertString(int nIndex, LPCTSTR lpszItem);
	void ResetContent();
	int Dir(UINT attr, LPCTSTR lpszWildCard);

	
	int FindString(int nStartAfter, LPCTSTR lpszItem) const;
	int SelectString(int nStartAfter, LPCTSTR lpszItem);
	int SelItemRange(BOOL bSelect, int nFirstItem, int nLastItem);


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	virtual int CompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	virtual void DeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);
	virtual int VKeyToItem(UINT nKey, UINT nIndex);
	virtual int CharToItem(UINT nKey, UINT nIndex);


public:
	virtual ~CListBox();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};

class CCheckListBox : public CListBox
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCCheckListBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CCheckListBox();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	void SetCheckStyle(UINT nStyle);
	UINT GetCheckStyle();
	void SetCheck(int nIndex, int nCheck);
	int GetCheck(int nIndex);
	void Enable(int nIndex, BOOL bEnabled = 1);
	BOOL IsEnabled(int nIndex);

	virtual CRect OnGetCheckPosition(CRect rectItem, CRect rectCheckBox);


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);


protected:
	void PreDrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	void PreMeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	int PreCompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	void PreDeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);

	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);


	virtual void PreSubclassWindow();
#line 2836 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	int CalcMinimumItemHeight();
	void InvalidateCheck(int nIndex);
	void InvalidateItem(int nIndex);
	int CheckFromPoint(CPoint point, BOOL& bInCheck);

	int m_cyText;
	UINT m_nStyle;

	
protected:
	
	 void OnLButtonDown(UINT nFlags, CPoint point);
	 void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnLButtonDblClk(UINT nFlags, CPoint point);
	 LRESULT OnSetFont(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBAddString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBFindString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBFindStringExact(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBGetItemData(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBGetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBInsertString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBSelectString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBSetItemData(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBSetItemHeight(WPARAM wParam, LPARAM lParam);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};

class CComboBox : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCComboBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CComboBox();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	
	int GetCount() const;
	int GetCurSel() const;
	int SetCurSel(int nSelect);
	LCID GetLocale() const;
	LCID SetLocale(LCID nNewLocale);

	int GetTopIndex() const;
	int SetTopIndex(int nIndex);
	int InitStorage(int nItems, UINT nBytes);
	void SetHorizontalExtent(UINT nExtent);
	UINT GetHorizontalExtent() const;
	int SetDroppedWidth(UINT nWidth);
	int GetDroppedWidth() const;

	
	DWORD GetEditSel() const;
	BOOL LimitText(int nMaxChars);
	BOOL SetEditSel(int nStartChar, int nEndChar);

	
	DWORD GetItemData(int nIndex) const;
	int SetItemData(int nIndex, DWORD dwItemData);
	void* GetItemDataPtr(int nIndex) const;
	int SetItemDataPtr(int nIndex, void* pData);
	int GetLBText(int nIndex, LPTSTR lpszText) const;
	void GetLBText(int nIndex, CString& rString) const;
	int GetLBTextLen(int nIndex) const;

	int SetItemHeight(int nIndex, UINT cyItemHeight);
	int GetItemHeight(int nIndex) const;
	int FindStringExact(int nIndexStart, LPCTSTR lpszFind) const;
	int SetExtendedUI(BOOL bExtended = 1);
	BOOL GetExtendedUI() const;
	void GetDroppedControlRect(LPRECT lprect) const;
	BOOL GetDroppedState() const;


	
	void ShowDropDown(BOOL bShowIt = 1);

	
	int AddString(LPCTSTR lpszString);
	int DeleteString(UINT nIndex);
	int InsertString(int nIndex, LPCTSTR lpszString);
	void ResetContent();
	int Dir(UINT attr, LPCTSTR lpszWildCard);

	
	int FindString(int nStartAfter, LPCTSTR lpszString) const;
	int SelectString(int nStartAfter, LPCTSTR lpszString);

	
	void Clear();
	void Copy();
	void Cut();
	void Paste();


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	virtual int CompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	virtual void DeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);


public:
	virtual ~CComboBox();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};

class CEdit : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCEdit; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CEdit();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL CanUndo() const;
	int GetLineCount() const;
	BOOL GetModify() const;
	void SetModify(BOOL bModified = 1);
	void GetRect(LPRECT lpRect) const;
	DWORD GetSel() const;
	void GetSel(int& nStartChar, int& nEndChar) const;
	HLOCAL GetHandle() const;
	void SetHandle(HLOCAL hBuffer);

	void SetMargins(UINT nLeft, UINT nRight);
	DWORD GetMargins() const;
	void SetLimitText(UINT nMax);
	UINT GetLimitText() const;
	CPoint PosFromChar(UINT nChar) const;
	int CharFromPos(CPoint pt) const;
#line 2974 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	int GetLine(int nIndex, LPTSTR lpszBuffer) const;
	int GetLine(int nIndex, LPTSTR lpszBuffer, int nMaxLength) const;


	void EmptyUndoBuffer();
	BOOL FmtLines(BOOL bAddEOL);

	void LimitText(int nChars = 0);
	int LineFromChar(int nIndex = -1) const;
	int LineIndex(int nLine = -1) const;
	int LineLength(int nLine = -1) const;
	void LineScroll(int nLines, int nChars = 0);
	void ReplaceSel(LPCTSTR lpszNewText, BOOL bCanUndo = 0);
	void SetPasswordChar(TCHAR ch);
	void SetRect(LPCRECT lpRect);
	void SetRectNP(LPCRECT lpRect);
	void SetSel(DWORD dwSelection, BOOL bNoScroll = 0);
	void SetSel(int nStartChar, int nEndChar, BOOL bNoScroll = 0);

	BOOL SetTabStops(int nTabStops, LPINT rgTabStops);
	void SetTabStops();
	BOOL SetTabStops(const int& cxEachStop);    
#line 2999 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	BOOL Undo();
	void Clear();
	void Copy();
	void Cut();
	void Paste();

	BOOL SetReadOnly(BOOL bReadOnly = 1);
	int GetFirstVisibleLine() const;
	TCHAR GetPasswordChar() const;


public:
	virtual ~CEdit();
};

class CScrollBar : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCScrollBar; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CScrollBar();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	int GetScrollPos() const;
	int SetScrollPos(int nPos, BOOL bRedraw = 1);
	void GetScrollRange(LPINT lpMinPos, LPINT lpMaxPos) const;
	void SetScrollRange(int nMinPos, int nMaxPos, BOOL bRedraw = 1);
	void ShowScrollBar(BOOL bShow = 1);

	BOOL EnableScrollBar(UINT nArrowFlags = 0x0000);

	BOOL SetScrollInfo(LPSCROLLINFO lpScrollInfo, BOOL bRedraw = 1);
	BOOL GetScrollInfo(LPSCROLLINFO lpScrollInfo, UINT nMask = (0x0001 | 0x0002 | 0x0004 | 0x0010));
	int GetScrollLimit();


public:
	virtual ~CScrollBar();
};









struct CPrintPreviewState;  
class CControlBar;          

class CDockBar;             
class CMiniDockFrameWnd;    
class CDockState;           

class COleFrameHook;        

class CFrameWnd : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFrameWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	static __declspec(dllimport) const CRect rectDefault;
	CFrameWnd();

	BOOL LoadAccelTable(LPCTSTR lpszResourceName);
	BOOL Create(LPCTSTR lpszClassName,
				LPCTSTR lpszWindowName,
				DWORD dwStyle = (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L),
				const RECT& rect = rectDefault,
				CWnd* pParentWnd = 0,        
				LPCTSTR lpszMenuName = 0,
				DWORD dwExStyle = 0,
				CCreateContext* pContext = 0);

	
	virtual BOOL LoadFrame(UINT nIDResource,
				DWORD dwDefaultStyle = (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L) | 0x00008000L,
				CWnd* pParentWnd = 0,
				CCreateContext* pContext = 0);

	
	CWnd* CreateView(CCreateContext* pContext, UINT nID = 0xE900);


	virtual CDocument* GetActiveDocument();

	
	CView* GetActiveView() const;           
	void SetActiveView(CView* pViewNew, BOOL bNotify = 1);
		

	
	virtual CFrameWnd* GetActiveFrame();

	
	virtual void GetMessageString(UINT nID, CString& rMessage) const;

	BOOL m_bAutoMenuEnable;
		

	BOOL IsTracking() const;


	virtual void RecalcLayout(BOOL bNotify = 1);
	virtual void ActivateFrame(int nCmdShow = -1);
	void InitialUpdateFrame(CDocument* pDoc, BOOL bMakeVisible);

	
	void SetMessageText(LPCTSTR lpszText);
	void SetMessageText(UINT nID);

	
	void EnableDocking(DWORD dwDockStyle);
	void DockControlBar(CControlBar* pBar, UINT nDockBarID = 0,
		LPCRECT lpRect = 0);
	void FloatControlBar(CControlBar* pBar, CPoint point,
		DWORD dwStyle = 0x2000L);
	CControlBar* GetControlBar(UINT nID);

	
	virtual void BeginModalState();
	virtual void EndModalState();
	BOOL InModalState() const;
	void ShowOwnedWindows(BOOL bShow);

	
	void LoadBarState(LPCTSTR lpszProfileName);
	void SaveBarState(LPCTSTR lpszProfileName) const;
	void ShowControlBar(CControlBar* pBar, BOOL bShow, BOOL bDelay);
	void SetDockState(const CDockState& state);
	void GetDockState(CDockState& state) const;


	virtual void OnSetPreviewMode(BOOL bPreview, CPrintPreviewState* pState);
	virtual CWnd* GetMessageBar();

	
	enum BorderCmd
		{ borderGet = 1, borderRequest = 2, borderSet = 3 };
	virtual BOOL NegotiateBorderSpace(UINT nBorderCmd, LPRECT lpRectBorder);

protected:
	virtual BOOL OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext);


public:
	 void OnContextHelp();   
	 void OnUpdateControlBarMenu(CCmdUI* pCmdUI);
	 BOOL OnBarCheck(UINT nID);


public:
	virtual ~CFrameWnd();
	int m_nWindow;  
					
					

	HMENU m_hMenuDefault;       
	HACCEL m_hAccelTable;       
	DWORD m_dwPromptContext;    
	BOOL m_bHelpMode;           
	CFrameWnd* m_pNextFrameWnd; 
	CRect m_rectBorder;         
	COleFrameHook* m_pNotifyHook;

	CPtrList m_listControlBars; 
								
	int m_nShowDelay;           

	CMiniDockFrameWnd* CreateFloatingFrame(DWORD dwStyle);
	DWORD CanDock(CRect rect, DWORD dwDockStyle,
		CDockBar** ppDockBar = 0); 
	void AddControlBar(CControlBar *pBar);
	void RemoveControlBar(CControlBar *pBar);
	void DockControlBar(CControlBar* pBar, CDockBar* pDockBar,
		LPCRECT lpRect = 0);
	void ReDockControlBar(CControlBar* pBar, CDockBar* pDockBar,
		LPCRECT lpRect = 0);
	void NotifyFloatingWindows(DWORD dwFlags);
	void DestroyDockBars();

protected:
	UINT m_nIDHelp;             
	UINT m_nIDTracking;         
	UINT m_nIDLastMessage;      
	CView* m_pViewActive;       
	BOOL (__stdcall* m_lpfnCloseProc)(CFrameWnd* pFrameWnd);
	UINT m_cModalStack;         
	HWND* m_phWndDisable;       
	HMENU m_hMenuAlt;           
	CString m_strTitle;         
	BOOL m_bInRecalcLayout;     
	CRuntimeClass* m_pFloatingFrameClass;
	static const DWORD dwDockBarMap[4][2];

public:

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 3205 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual BOOL IsFrameWnd() const;
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual void OnUpdateFrameTitle(BOOL bAddToTitle);
	virtual void OnUpdateFrameMenu(HMENU hMenuAlt);
	virtual HACCEL GetDefaultAccelerator();
	virtual BOOL PreTranslateMessage(MSG* pMsg);

	
	enum IdleFlags
		{ idleMenu = 1, idleTitle = 2, idleNotify = 4, idleLayout = 8 };
	UINT m_nIdleFlags;          
	virtual void DelayUpdateFrameMenu(HMENU hMenuAlt);
	void DelayUpdateFrameTitle();
	void DelayRecalcLayout(BOOL bNotify = 1);

	
	BOOL CanEnterHelpMode();
	virtual void ExitHelpMode();

protected:
	
	LPCTSTR GetIconWndClass(DWORD dwDefaultStyle, UINT nIDResource);
	void UpdateFrameTitleForDocument(LPCTSTR lpszDocName);
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual void PostNcDestroy();   
	int OnCreateHelper(LPCREATESTRUCT lpcs, CCreateContext* pContext);
	void BringToTop(int nCmdShow);
		

	
	BOOL ProcessHelpMsg(MSG& msg, DWORD* pContext);
	HWND SetHelpCapture(POINT point, BOOL* pbDescendant);

	
	void AddFrameWnd();
	void RemoveFrameWnd();

	friend class CWnd;  

	
	
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnDestroy();
	 void OnClose();
	 void OnInitMenuPopup(CMenu*, UINT, BOOL);
	 void OnMenuSelect(UINT nItemID, UINT nFlags, HMENU hSysMenu);
	 LRESULT OnPopMessageString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnSetMessageString(WPARAM wParam, LPARAM lParam);
	 void OnIdleUpdateCmdUI();
	 void OnEnterIdle(UINT nWhy, CWnd* pWho);
	 void OnSetFocus(CWnd* pOldWnd);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnSize(UINT nType, int cx, int cy);
	 BOOL OnEraseBkgnd(CDC* pDC);
	 void OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized);
	 BOOL OnNcActivate(BOOL bActive);
	 void OnSysCommand(UINT nID, LONG lParam);
	 BOOL OnQueryEndSession();
	 void OnEndSession(BOOL bEnding);
	 void OnDropFiles(HDROP hDropInfo);
	 BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	 LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
	 LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
	 LRESULT OnActivateTopLevel(WPARAM wParam, LPARAM lParam);
	 void OnEnable(BOOL bEnable);
	 void OnPaletteChanged(CWnd* pFocusWnd);
	 BOOL OnQueryNewPalette();
	
	 BOOL OnToolTipText(UINT nID, NMHDR* pNMHDR, LRESULT* pResult);
	 void OnUpdateKeyIndicator(CCmdUI* pCmdUI);
	 void OnHelp();
	 void OnUpdateContextHelp(CCmdUI* pCmdUI);
	
protected:

	 LRESULT OnDDEInitiate(WPARAM wParam, LPARAM lParam);
	 LRESULT OnDDEExecute(WPARAM wParam, LPARAM lParam);
	 LRESULT OnDDETerminate(WPARAM wParam, LPARAM lParam);
#line 3287 "C:\\MSDEV\\MFC\\include\\afxwin.h"




	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CWinApp;
};




class CMDIFrameWnd : public CFrameWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMDIFrameWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();

public:

	CMDIFrameWnd();


	void MDIActivate(CWnd* pWndActivate);
	CMDIChildWnd* MDIGetActive(BOOL* pbMaximized = 0) const;
	void MDIIconArrange();
	void MDIMaximize(CWnd* pWnd);
	void MDINext();
	void MDIRestore(CWnd* pWnd);
	CMenu* MDISetMenu(CMenu* pFrameMenu, CMenu* pWindowMenu);
	void MDITile();
	void MDICascade();
	void MDITile(int nType);
	void MDICascade(int nType);


	
	virtual BOOL CreateClient(LPCREATESTRUCT lpCreateStruct, CMenu* pWindowMenu);
	
	virtual HMENU GetWindowMenuPopup(HMENU hMenuBar);


public:
	HWND m_hWndMDIClient;       


	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 3334 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL LoadFrame(UINT nIDResource,
				DWORD dwDefaultStyle = (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L) | 0x00008000L,
				CWnd* pParentWnd = 0,
				CCreateContext* pContext = 0);
	virtual BOOL OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void OnUpdateFrameTitle(BOOL bAddToTitle);
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual void OnUpdateFrameMenu(HMENU hMenuAlt);
	virtual void DelayUpdateFrameMenu(HMENU hMenuAlt);
	virtual CFrameWnd* GetActiveFrame();

protected:
	virtual LRESULT DefWindowProcA(UINT nMsg, WPARAM wParam, LPARAM lParam);
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);

	
	 void OnDestroy();
	 void OnSize(UINT nType, int cx, int cy);
	 void OnUpdateMDIWindowCmd(CCmdUI* pCmdUI);
	 BOOL OnMDIWindowCmd(UINT nID);
	 void OnWindowNew();
	 LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
	 void OnIdleUpdateCmdUI();
	 LRESULT OnMenuChar(UINT nChar, UINT, CMenu*);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};

class CMDIChildWnd : public CFrameWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMDIChildWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	CMDIChildWnd();

	virtual BOOL Create(LPCTSTR lpszClassName,
				LPCTSTR lpszWindowName,
				DWORD dwStyle = 0x40000000L | 0x10000000L | (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L),
				const RECT& rect = rectDefault,
				CMDIFrameWnd* pParentWnd = 0,
				CCreateContext* pContext = 0);


	CMDIFrameWnd* GetMDIFrame();


	void MDIDestroy();
	void MDIActivate();
	void MDIMaximize();
	void MDIRestore();


protected:
	HMENU m_hMenuShared;        

public:

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 3398 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL LoadFrame(UINT nIDResource, DWORD dwDefaultStyle,
					CWnd* pParentWnd, CCreateContext* pContext = 0);
		
	virtual BOOL DestroyWindow();
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void ActivateFrame(int nCmdShow = -1);
	virtual void OnUpdateFrameMenu(BOOL bActive, CWnd* pActivateWnd,
		HMENU hMenuAlt);

	BOOL m_bPseudoInactive;     
								

protected:
	virtual CWnd* GetMessageBar();
	virtual void OnUpdateFrameTitle(BOOL bAddToTitle);
	virtual LRESULT DefWindowProcA(UINT nMsg, WPARAM wParam, LPARAM lParam);
	BOOL UpdateClientEdge(LPRECT lpRect = 0);

	
	 void OnMDIActivate(BOOL bActivate, CWnd*, CWnd*);
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message);
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 BOOL OnNcCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnSize(UINT nType, int cx, int cy);
	 void OnWindowPosChanging(LPWINDOWPOS lpWndPos);
	 BOOL OnNcActivate(BOOL bActive);
	 void OnDestroy();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};











class CMiniFrameWnd : public CFrameWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMiniFrameWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	CMiniFrameWnd();
	BOOL Create(LPCTSTR lpClassName, LPCTSTR lpWindowName,
		DWORD dwStyle, const RECT& rect,
		CWnd* pParentWnd = 0, UINT nID = 0);
	BOOL CreateEx(DWORD dwExStyle, LPCTSTR lpClassName, LPCTSTR lpWindowName,
		DWORD dwStyle, const RECT& rect,
		CWnd* pParentWnd = 0, UINT nID = 0);


public:
	~CMiniFrameWnd();

	static void __cdecl Initialize();

	
	 BOOL OnNcActivate(BOOL bActive);
	 void OnNcCalcSize(BOOL bCalcValidRects, NCCALCSIZE_PARAMS* lpParams);
	 UINT OnNcHitTest(CPoint point);
	 void OnNcPaint();
	 void OnNcLButtonDown(UINT nHitTest, CPoint pt );
	 void OnLButtonUp(UINT nFlags, CPoint pt );
	 void OnMouseMove(UINT nFlags, CPoint pt );
	 void OnSysCommand(UINT nID, LPARAM lParam);
	 void OnGetMinMaxInfo(MINMAXINFO* pMMI);
	 LRESULT OnGetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnGetTextLength(WPARAM wParam, LPARAM lParam);
	 LRESULT OnSetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnFloatStatus(WPARAM wParam, LPARAM lParam);
	 LRESULT OnQueryCenterWnd(WPARAM wParam, LPARAM lParam);
	 BOOL OnNcCreate(LPCREATESTRUCT lpcs);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

public:
	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);

	static void __stdcall CalcBorders(LPRECT lpClientRect,
		DWORD dwStyle = 0x00040000L | 0x00C00000L, DWORD dwExStyle = 0);

protected:
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);

protected:
	BOOL m_bSysTracking;
	BOOL m_bInSys;
	BOOL m_bActive;
	CString m_strCaption;

	void InvertSysMenu();
};




class CPrintDialog;     
class CPreviewView;     
class CSplitterWnd;     
class COleServerDoc;    

typedef DWORD DROPEFFECT;
class COleDataObject;   

class CView : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCView; virtual CRuntimeClass* GetRuntimeClass() const;


protected:
	CView();


public:
	CDocument* GetDocument() const;


public:
	
	BOOL DoPreparePrinting(CPrintInfo* pInfo);


public:
	virtual BOOL IsSelected(const CObject* pDocItem) const; 

	
	virtual BOOL OnScroll(UINT nScrollCode, UINT nPos, BOOL bDoScroll = 1);
	virtual BOOL OnScrollBy(CSize sizeScroll, BOOL bDoScroll = 1);

	
	virtual DROPEFFECT OnDragEnter(COleDataObject* pDataObject,
		DWORD dwKeyState, CPoint point);
	virtual DROPEFFECT OnDragOver(COleDataObject* pDataObject,
		DWORD dwKeyState, CPoint point);
	virtual void OnDragLeave();
	virtual BOOL OnDrop(COleDataObject* pDataObject,
		DROPEFFECT dropEffect, CPoint point);
	virtual DROPEFFECT OnDropEx(COleDataObject* pDataObject,
		DROPEFFECT dropDefault, DROPEFFECT dropList, CPoint point);
	virtual DROPEFFECT OnDragScroll(DWORD dwKeyState, CPoint point);

	virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo = 0);

	virtual void OnInitialUpdate(); 

protected:
	
	virtual void OnActivateView(BOOL bActivate, CView* pActivateView,
					CView* pDeactiveView);
	virtual void OnActivateFrame(UINT nState, CFrameWnd* pFrameWnd);

	
	virtual void OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint);
	virtual void OnDraw(CDC* pDC) = 0;

	
	virtual BOOL OnPreparePrinting(CPrintInfo* pInfo);
		

	virtual void OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnPrint(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnEndPrinting(CDC* pDC, CPrintInfo* pInfo);

	
	virtual void OnEndPrintPreview(CDC* pDC, CPrintInfo* pInfo, POINT point,
		CPreviewView* pView);


public:
	virtual ~CView();

	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 3580 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	BOOL DoPrintPreview(UINT nIDResource, CView* pPrintView,
			CRuntimeClass* pPreviewViewClass, CPrintPreviewState* pState);

	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);
	virtual CScrollBar* GetScrollBarCtrl(int nBar) const;
	static CSplitterWnd* __stdcall GetParentSplitter(
		const CWnd* pWnd, BOOL bAnyState);

protected:
	CDocument* m_pDocument;

	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual void PostNcDestroy();

	
	friend class CDocument;
	friend class CDocTemplate;
	friend class CPreviewView;
	friend class CFrameWnd;
	friend class CMDIFrameWnd;
	friend class CMDIChildWnd;
	friend class CSplitterWnd;
	friend class COleServerDoc;
	friend class CDocObjectServer;

	
	 int OnCreate(LPCREATESTRUCT lpcs);
	 void OnDestroy();
	 void OnPaint();
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message);
	
	 void OnUpdateSplitCmd(CCmdUI* pCmdUI);
	 BOOL OnSplitCmd(UINT nID);
	 void OnUpdateNextPaneMenu(CCmdUI* pCmdUI);
	 BOOL OnNextPaneCmd(UINT nID);

	
	 void OnFilePrint();
	 void OnFilePrintPreview();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CCtrlView : public CView
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCCtrlView; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();

public:
	CCtrlView(LPCTSTR lpszClass, DWORD dwStyle);


protected:
	CString m_strClass;
	DWORD m_dwDefaultStyle;


	virtual void OnDraw(CDC*);
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);


public:

	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 3653 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:
	 void OnPaint();
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CScrollView : public CView
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCScrollView; virtual CRuntimeClass* GetRuntimeClass() const;


protected:
	CScrollView();

public:
	static __declspec(dllimport) const SIZE sizeDefault;
		

	
	void SetScaleToFitSize(SIZE sizeTotal);
	void SetScrollSizes(int nMapMode, SIZE sizeTotal,
				const SIZE& sizePage = sizeDefault,
				const SIZE& sizeLine = sizeDefault);


public:
	CPoint GetScrollPosition() const;       
	CSize GetTotalSize() const;             

	
	CPoint GetDeviceScrollPosition() const;
	void GetDeviceScrollSizes(int& nMapMode, SIZE& sizeTotal,
			SIZE& sizePage, SIZE& sizeLine) const;


public:
	void ScrollToPosition(POINT pt);    
	void FillOutsideRect(CDC* pDC, CBrush* pBrush);
	void ResizeParentToFit(BOOL bShrinkOnly = 1);


protected:
	int m_nMapMode;
	CSize m_totalLog;           
	CSize m_totalDev;           
	CSize m_pageDev;            
	CSize m_lineDev;            

	BOOL m_bCenter;             
	BOOL m_bInsideUpdate;       
	void CenterOnPoint(CPoint ptCenter);
	void ScrollToDevicePosition(POINT ptDev); 

protected:
	virtual void OnDraw(CDC* pDC) = 0;      

	void UpdateBars();          
	BOOL GetTrueClientSize(CSize& size, CSize& sizeSb);
		
	void GetScrollBarSizes(CSize& sizeSb);
	void GetScrollBarState(CSize sizeClient, CSize& needSb,
		CSize& sizeRange, CPoint& ptMove, BOOL bInsideClient);

public:
	virtual ~CScrollView();

	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 3725 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);
	virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo = 0);

	
	virtual BOOL OnScroll(UINT nScrollCode, UINT nPos, BOOL bDoScroll = 1);
	virtual BOOL OnScrollBy(CSize sizeScroll, BOOL bDoScroll = 1);

	
	 void OnSize(UINT nType, int cx, int cy);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




typedef UINT (__cdecl *AFX_THREADPROC)(LPVOID);

class COleMessageFilter;        

class CWinThread : public CCmdTarget
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCWinThread; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CWinThread();
	BOOL CreateThread(DWORD dwCreateFlags = 0, UINT nStackSize = 0,
		LPSECURITY_ATTRIBUTES lpSecurityAttrs = 0);


	CWnd* m_pMainWnd;       
	CWnd* m_pActiveWnd;     
	BOOL m_bAutoDelete;     

	
	HANDLE m_hThread;       
	operator HANDLE() const;
	DWORD m_nThreadID;      

	int GetThreadPriority();
	BOOL SetThreadPriority(int nPriority);


	DWORD SuspendThread();
	DWORD ResumeThread();
	BOOL PostThreadMessageA(UINT message, WPARAM wParam, LPARAM lParam);


	
	virtual BOOL InitInstance();

	
	virtual int Run();
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual BOOL PumpMessage();     
	virtual BOOL OnIdle(LONG lCount); 
	virtual BOOL IsIdleMessage(MSG* pMsg);  

	
	virtual int ExitInstance(); 

	
	virtual LRESULT ProcessWndProcException(CException* e, const MSG* pMsg);

	
	virtual BOOL ProcessMessageFilter(int code, LPMSG lpMsg);

	
	virtual CWnd* GetMainWnd();


public:
	virtual ~CWinThread();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
	int m_nDisablePumpCount; 
#line 3807 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	void CommonConstruct();
	virtual void Delete();
		

	
	MSG m_msgCur;                   

public:
	
	CWinThread(AFX_THREADPROC pfnThreadProc, LPVOID pParam);

	
	LPVOID m_pThreadParams; 
	AFX_THREADPROC m_pfnThreadProc;

	
	void (__stdcall* m_lpfnOleTermOrFreeLib)(BOOL, BOOL);
	COleMessageFilter* m_pMessageFilter;

protected:
	CPoint m_ptCursorLast;      
	UINT m_nMsgLast;            
	BOOL DispatchThreadMessageEx(MSG* msg);  
	void DispatchThreadMessage(MSG* msg);  
};



CWinThread* __stdcall AfxBeginThread(AFX_THREADPROC pfnThreadProc, LPVOID pParam,
	int nPriority = 0, UINT nStackSize = 0,
	DWORD dwCreateFlags = 0, LPSECURITY_ATTRIBUTES lpSecurityAttrs = 0);
CWinThread* __stdcall AfxBeginThread(CRuntimeClass* pThreadClass,
	int nPriority = 0, UINT nStackSize = 0,
	DWORD dwCreateFlags = 0, LPSECURITY_ATTRIBUTES lpSecurityAttrs = 0);

CWinThread* __stdcall AfxGetThread();
void __stdcall AfxEndThread(UINT nExitCode, BOOL bDelete = 1);

void __stdcall AfxInitThread();
void __stdcall AfxTermThread(HINSTANCE hInstTerm = 0);













#line 3861 "C:\\MSDEV\\MFC\\include\\afxwin.h"


BOOL __stdcall AfxWinInit(HINSTANCE, HINSTANCE, LPTSTR, int);
void __stdcall AfxWinTerm();


CWinApp* __stdcall AfxGetApp();
CWnd* __stdcall AfxGetMainWnd();
HINSTANCE __stdcall AfxGetInstanceHandle();
HINSTANCE __stdcall AfxGetResourceHandle();
void __stdcall AfxSetResourceHandle(HINSTANCE hInstResource);
LPCTSTR __stdcall AfxGetAppName();


void __stdcall AfxPostQuitMessage(int nExitCode);





HINSTANCE __stdcall AfxFindResourceHandle(LPCTSTR lpszName, LPCTSTR lpszType);
#line 3883 "C:\\MSDEV\\MFC\\include\\afxwin.h"

class CRecentFileList;          


COleMessageFilter* __stdcall AfxOleGetMessageFilter();




class CCommandLineInfo : public CObject
{
public:
	
	CCommandLineInfo();

	
	
	virtual void ParseParam(const TCHAR* pszParam, BOOL bFlag, BOOL bLast);




	BOOL m_bShowSplash;
	BOOL m_bRunEmbedded;
	BOOL m_bRunAutomated;
	enum { FileNew, FileOpen, FilePrint, FilePrintTo, FileDDE,
		AppUnregister, FileNothing = -1 } m_nShellCommand;

	
	CString m_strFileName;

	
	CString m_strPrinterName;
	CString m_strDriverName;
	CString m_strPortName;

	~CCommandLineInfo();

protected:
	void ParseParamFlag(const char* pszParam);
	void ParseParamNotFlag(const TCHAR* pszParam);



	void ParseLast(BOOL bLast);
};




class CDocManager : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDocManager; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CDocManager();

	
	virtual void AddDocTemplate(CDocTemplate* pTemplate);
	virtual POSITION GetFirstDocTemplatePosition() const;
	virtual CDocTemplate* GetNextDocTemplate(POSITION& pos) const;
	virtual void RegisterShellFileTypes(BOOL bCompat);
	virtual CDocument* OpenDocumentFile(LPCTSTR lpszFileName); 
	virtual BOOL SaveAllModified(); 
	virtual void CloseAllDocuments(BOOL bEndSession); 
	virtual int GetOpenDocumentCount();

	
	virtual BOOL DoPromptFileName(CString& fileName, UINT nIDSTitle,
			DWORD lFlags, BOOL bOpenFileDialog, CDocTemplate* pTemplate);



	
	virtual BOOL OnDDECommand(LPTSTR lpszCommand);
#line 3960 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual void OnFileNew();
	virtual void OnFileOpen();


protected:
	CPtrList m_templateList;

public:
	static CPtrList* pStaticList;       
	static BOOL bStaticInit;            
	static CDocManager* pStaticDocManager;  

public:
	virtual ~CDocManager();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 3978 "C:\\MSDEV\\MFC\\include\\afxwin.h"
};







class CWinApp : public CWinThread
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCWinApp; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CWinApp(LPCTSTR lpszAppName = 0);     


	
	HINSTANCE m_hInstance;
	HINSTANCE m_hPrevInstance;
	LPTSTR m_lpCmdLine;
	int m_nCmdShow;

	
	LPCTSTR m_pszAppName;  
								
	LPCTSTR m_pszRegistryKey;   
	CDocManager* m_pDocManager;

	
	BOOL m_bHelpMode;           












public:  
	LPCTSTR m_pszExeName;       
	LPCTSTR m_pszHelpFilePath;  
	LPCTSTR m_pszProfileName;   


protected:
	void LoadStdProfileSettings(UINT nMaxMRU = 4); 
	void EnableShellOpen();

	void SetDialogBkColor(COLORREF clrCtlBk = ((COLORREF)(((BYTE)(192)|((WORD)((BYTE)(192))<<8))|(((DWORD)(BYTE)(192))<<16))),
				COLORREF clrCtlText = ((COLORREF)(((BYTE)(0)|((WORD)((BYTE)(0))<<8))|(((DWORD)(BYTE)(0))<<16))));
		

	void SetRegistryKey(LPCTSTR lpszRegistryKey);
	void SetRegistryKey(UINT nIDRegistryKey);
		
		






	BOOL Enable3dControls(); 




	void RegisterShellFileTypes(BOOL bCompat=0);
		
	void RegisterShellFileTypesCompat();
		


public:
	
	HCURSOR LoadCursorA(LPCTSTR lpszResourceName) const;
	HCURSOR LoadCursorA(UINT nIDResource) const;
	HCURSOR LoadStandardCursor(LPCTSTR lpszCursorName) const; 
	HCURSOR LoadOEMCursor(UINT nIDCursor) const;             

	
	HICON LoadIconA(LPCTSTR lpszResourceName) const;
	HICON LoadIconA(UINT nIDResource) const;
	HICON LoadStandardIcon(LPCTSTR lpszIconName) const;       
	HICON LoadOEMIcon(UINT nIDIcon) const;                   

	
	UINT GetProfileIntA(LPCTSTR lpszSection, LPCTSTR lpszEntry, int nDefault);
	BOOL WriteProfileInt(LPCTSTR lpszSection, LPCTSTR lpszEntry, int nValue);
	CString GetProfileStringA(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPCTSTR lpszDefault = 0);
	BOOL WriteProfileStringA(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPCTSTR lpszValue);
	BOOL GetProfileBinary(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPBYTE* ppData, UINT* pBytes);
	BOOL WriteProfileBinary(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPBYTE pData, UINT nBytes);


	BOOL Unregister();
	LONG DelRegTree(HKEY hParentKey, const CString& strKeyName);
#line 4085 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	
	void AddDocTemplate(CDocTemplate* pTemplate);
	POSITION GetFirstDocTemplatePosition() const;
	CDocTemplate* GetNextDocTemplate(POSITION& pos) const;

	
	virtual CDocument* OpenDocumentFile(LPCTSTR lpszFileName); 
	virtual void AddToRecentFileList(LPCTSTR lpszPathName);  

	
	void SelectPrinter(HANDLE hDevNames, HANDLE hDevMode,
		BOOL bFreeOld = 1);
	BOOL CreatePrinterDC(CDC& dc);

	BOOL GetPrinterDeviceDefaults(struct tagPDA* pPrintDlg);


#line 4105 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	BOOL RunEmbedded();
	BOOL RunAutomated();
	void ParseCommandLine(CCommandLineInfo& rCmdInfo);
	BOOL ProcessShellCommand(CCommandLineInfo& rCmdInfo);


	
	virtual BOOL InitApplication();




	
	virtual BOOL SaveAllModified(); 
	void HideApplication();
	void CloseAllDocuments(BOOL bEndSession); 

	
	virtual int DoMessageBox(LPCTSTR lpszPrompt, UINT nType, UINT nIDPrompt);
	virtual void DoWaitCursor(int nCode); 


	
	virtual BOOL OnDDECommand(LPTSTR lpszCommand);
#line 4132 "C:\\MSDEV\\MFC\\include\\afxwin.h"

	
	virtual void WinHelpA(DWORD dwData, UINT nCmd = 0x0001L);


protected:
	
	 void OnFileNew();
	 void OnFileOpen();

	
	 void OnFilePrintSetup();

	
	 void OnContextHelp();   
	 void OnHelp();          
	 void OnHelpIndex();     
	 void OnHelpFinder();    
	 void OnHelpUsing();     


protected:
	HGLOBAL m_hDevMode;             
	HGLOBAL m_hDevNames;            
	DWORD m_dwPromptContext;        

	int m_nWaitCursorCount;         
	HCURSOR m_hcurWaitCursorRestore; 

	CRecentFileList* m_pRecentFileList;

	void UpdatePrinterSelection(BOOL bForceDefaults);
	void SaveStdProfileSettings();  

public: 
	CCommandLineInfo* m_pCmdInfo;

	ATOM m_atomApp, m_atomSystemTopic;   
	UINT m_nNumPreviewPages;        

	size_t  m_nSafetyPoolSize;      

	void (__stdcall* m_lpfnDaoTerm)();

	void DevModeChange(LPTSTR lpDeviceName);
	void SetCurrentHandles();
	int GetOpenDocumentCount();

	
	BOOL DoPromptFileName(CString& fileName, UINT nIDSTitle,
			DWORD lFlags, BOOL bOpenFileDialog, CDocTemplate* pTemplate);
	int DoPrintDialog(CPrintDialog* pPD);

	void EnableModeless(BOOL bEnable); 

	
	virtual BOOL InitInstance();
	virtual int ExitInstance(); 
	virtual int Run();
	virtual BOOL OnIdle(LONG lCount); 
	virtual LRESULT ProcessWndProcException(CException* e, const MSG* pMsg);

public:
	virtual ~CWinApp();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 4200 "C:\\MSDEV\\MFC\\include\\afxwin.h"


	
	HKEY GetSectionKey(LPCTSTR lpszSection);
	HKEY GetAppRegistryKey();
#line 4206 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:
	
	 void OnAppExit();
	 void OnUpdateRecentFileMenu(CCmdUI* pCmdUI);
	 BOOL OnOpenRecentFile(UINT nID);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CWaitCursor
{

public:
	CWaitCursor();
	~CWaitCursor();


public:
	void Restore();
};




class CDocTemplate : public CCmdTarget
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDocTemplate; virtual CRuntimeClass* GetRuntimeClass() const;


protected:
	CDocTemplate(UINT nIDResource, CRuntimeClass* pDocClass,
		CRuntimeClass* pFrameClass, CRuntimeClass* pViewClass);
public:
	virtual void LoadTemplate();


public:
	
	void SetContainerInfo(UINT nIDOleInPlaceContainer);

	
	void SetServerInfo(UINT nIDOleEmbedding, UINT nIDOleInPlaceServer = 0,
		CRuntimeClass* pOleFrameClass = 0, CRuntimeClass* pOleViewClass = 0);

	
	virtual POSITION GetFirstDocPosition() const = 0;
	virtual CDocument* GetNextDoc(POSITION& rPos) const = 0;


public:
	virtual void AddDocument(CDocument* pDoc);      
	virtual void RemoveDocument(CDocument* pDoc);   

	enum DocStringIndex
	{
		windowTitle,        
		docName,            
		fileNewName,        
		

		filterName,         
		filterExt,          



#line 4276 "C:\\MSDEV\\MFC\\include\\afxwin.h"
		
		regFileTypeId,      
		regFileTypeName,    
		




		filterMacExt,       
		filterMacName       
#line 4287 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	};
	virtual BOOL GetDocString(CString& rString,
		enum DocStringIndex index) const; 
	CFrameWnd* CreateOleFrame(CWnd* pParentWnd, CDocument* pDoc,
		BOOL bCreateView);


public:
	enum Confidence
	{
		noAttempt,
		maybeAttemptForeign,
		maybeAttemptNative,
		yesAttemptForeign,
		yesAttemptNative,
		yesAlreadyOpen
	};

	virtual Confidence MatchDocType(LPCTSTR lpszPathName,
					CDocument*& rpDocMatch);



#line 4311 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual CDocument* CreateNewDocument();
	virtual CFrameWnd* CreateNewFrame(CDocument* pDoc, CFrameWnd* pOther);
	virtual void InitialUpdateFrame(CFrameWnd* pFrame, CDocument* pDoc,
		BOOL bMakeVisible = 1);
	virtual BOOL SaveAllModified();     
	virtual void CloseAllDocuments(BOOL bEndSession);
	virtual CDocument* OpenDocumentFile(
		LPCTSTR lpszPathName, BOOL bMakeVisible = 1) = 0;
					
					
	virtual void SetDefaultTitle(CDocument* pDocument) = 0;


public:
	BOOL m_bAutoDelete;
	virtual ~CDocTemplate();

	
	CObject* m_pAttachedFactory;

	
	HMENU m_hMenuInPlace;
	HACCEL m_hAccelInPlace;

	
	HMENU m_hMenuEmbedding;
	HACCEL m_hAccelEmbedding;

	
	HMENU m_hMenuInPlaceServer;
	HACCEL m_hAccelInPlaceServer;


	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 4347 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual void OnIdle();             

protected:
	UINT m_nIDResource;                 
	UINT m_nIDServerResource;           
	UINT m_nIDEmbeddingResource;        
	UINT m_nIDContainerResource;        

	CRuntimeClass* m_pDocClass;         
	CRuntimeClass* m_pFrameClass;       
	CRuntimeClass* m_pViewClass;        
	CRuntimeClass* m_pOleFrameClass;    
	CRuntimeClass* m_pOleViewClass;     

	CString m_strDocStrings;    
		
		
};


class CSingleDocTemplate : public CDocTemplate
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCSingleDocTemplate; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSingleDocTemplate(UINT nIDResource, CRuntimeClass* pDocClass,
		CRuntimeClass* pFrameClass, CRuntimeClass* pViewClass);


public:
	virtual ~CSingleDocTemplate();
	virtual void AddDocument(CDocument* pDoc);
	virtual void RemoveDocument(CDocument* pDoc);
	virtual POSITION GetFirstDocPosition() const;
	virtual CDocument* GetNextDoc(POSITION& rPos) const;
	virtual CDocument* OpenDocumentFile(
		LPCTSTR lpszPathName, BOOL bMakeVisible = 1);
	virtual void SetDefaultTitle(CDocument* pDocument);


	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 4391 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:  
	CDocument* m_pOnlyDoc;
};


class CMultiDocTemplate : public CDocTemplate
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMultiDocTemplate; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CMultiDocTemplate(UINT nIDResource, CRuntimeClass* pDocClass,
		CRuntimeClass* pFrameClass, CRuntimeClass* pViewClass);


public:
	
	HMENU m_hMenuShared;
	HACCEL m_hAccelTable;

	virtual ~CMultiDocTemplate();
	virtual void LoadTemplate();
	virtual void AddDocument(CDocument* pDoc);
	virtual void RemoveDocument(CDocument* pDoc);
	virtual POSITION GetFirstDocPosition() const;
	virtual CDocument* GetNextDoc(POSITION& rPos) const;
	virtual CDocument* OpenDocumentFile(
		LPCTSTR lpszPathName, BOOL bMakeVisible = 1);
	virtual void SetDefaultTitle(CDocument* pDocument);


	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 4426 "C:\\MSDEV\\MFC\\include\\afxwin.h"

protected:  
	CPtrList m_docList;          
	UINT m_nUntitledCount;   
};




class CDocument : public CCmdTarget
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDocument; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CDocument();


public:
	const CString& GetTitle() const;
	virtual void SetTitle(LPCTSTR lpszTitle);
	const CString& GetPathName() const;
	virtual void SetPathName(LPCTSTR lpszPathName, BOOL bAddToMRU = 1);

	CDocTemplate* GetDocTemplate() const;
	virtual BOOL IsModified();
	virtual void SetModifiedFlag(BOOL bModified = 1);


	void AddView(CView* pView);
	void RemoveView(CView* pView);
	virtual POSITION GetFirstViewPosition() const;
	virtual CView* GetNextView(POSITION& rPosition) const;

	
	void UpdateAllViews(CView* pSender, LPARAM lHint = 0L,
		CObject* pHint = 0);


	
	virtual void OnChangedViewList(); 
	virtual void DeleteContents(); 

	
	virtual BOOL OnNewDocument();
	virtual BOOL OnOpenDocument(LPCTSTR lpszPathName);
	virtual BOOL OnSaveDocument(LPCTSTR lpszPathName);



	virtual void OnCloseDocument();
	virtual void ReportSaveLoadException(LPCTSTR lpszPathName,
				CException* e, BOOL bSaving, UINT nIDPDefault);
	virtual CFile* GetFile(LPCTSTR lpszFileName, UINT nOpenFlags,
		CFileException* pError);
	virtual void ReleaseFile(CFile* pFile, BOOL bAbort);

	
	virtual BOOL CanCloseFrame(CFrameWnd* pFrame);
	virtual BOOL SaveModified(); 
	virtual void PreCloseFrame(CFrameWnd* pFrame);


protected:
	
	CString m_strTitle;
	CString m_strPathName;
	CDocTemplate* m_pDocTemplate;
	CPtrList m_viewList;                
	BOOL m_bModified;                   

public:
	BOOL m_bAutoDelete;     
	BOOL m_bEmbedded;       


	virtual void Dump(CDumpContext&) const;
	virtual void AssertValid() const;
#line 4505 "C:\\MSDEV\\MFC\\include\\afxwin.h"
	virtual ~CDocument();

	
	virtual BOOL DoSave(LPCTSTR lpszPathName, BOOL bReplace = 1);
	virtual BOOL DoFileSave();
	virtual void UpdateFrameCounts();
	void DisconnectViews();
	void SendInitialUpdate();

	
	virtual HMENU GetDefaultMenu(); 
	virtual HACCEL GetDefaultAccelerator();
	virtual void OnIdle();
	virtual void OnFinalRelease();

	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	friend class CDocTemplate;

protected:
	
	
	 void OnFileClose();
	 void OnFileSave();
	 void OnFileSaveAs();
	
	
	 void OnFileSendMail();
	 void OnUpdateFileSendMail(CCmdUI* pCmdUI);
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};






extern __declspec(dllimport) UINT afxTraceFlags;
enum AfxTraceFlags
{
	traceMultiApp = 1,      
	traceAppMsg = 2,        
	traceWinMsg = 4,        
	traceCmdRouting = 8,    
	traceOle = 16,          
	traceDatabase = 32,     
	traceInternet = 64      
};

#line 4555 "C:\\MSDEV\\MFC\\include\\afxwin.h"




void __stdcall AfxFormatString1(CString& rString, UINT nIDS, LPCTSTR lpsz1);
void __stdcall AfxFormatString2(CString& rString, UINT nIDS,
				LPCTSTR lpsz1, LPCTSTR lpsz2);
int __stdcall AfxMessageBox(LPCTSTR lpszText, UINT nType = 0x00000000L,
				UINT nIDHelp = 0);
int __stdcall AfxMessageBox(UINT nIDPrompt, UINT nType = 0x00000000L,
				UINT nIDHelp = (UINT)-1);


void __stdcall AfxFormatStrings(CString& rString, UINT nIDS,
				LPCTSTR const* rglpsz, int nString);
void __stdcall AfxFormatStrings(CString& rString, LPCTSTR lpszFormat,
				LPCTSTR const* rglpsz, int nString);
BOOL __stdcall AfxExtractSubString(CString& rString, LPCTSTR lpszFullString,
				int iSubString, TCHAR chSep = '\n');





	#line 1 "C:\\MSDEV\\MFC\\include\\afxdll_.h"






















#pragma pack(push, 4)
#line 25 "C:\\MSDEV\\MFC\\include\\afxdll_.h"








struct AFX_EXTENSION_MODULE
{
	BOOL bInitialized;
	HMODULE hModule;
	HMODULE hResource;
	CRuntimeClass* pFirstSharedClass;
	COleObjectFactory* pFirstSharedFactory;
};




class COleObjectFactory;

class CDynLinkLibrary : public CCmdTarget
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDynLinkLibrary; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CDynLinkLibrary(AFX_EXTENSION_MODULE& state, BOOL bSystem = 0);


	HMODULE m_hModule;
	HMODULE m_hResource;                
	CTypedSimpleList<CRuntimeClass*> m_classList;

	CTypedSimpleList<COleObjectFactory*> m_factoryList;
#line 62 "C:\\MSDEV\\MFC\\include\\afxdll_.h"
	BOOL m_bSystem;                     


public:
	CDynLinkLibrary* m_pNextDLL;        
	virtual ~CDynLinkLibrary();


	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 73 "C:\\MSDEV\\MFC\\include\\afxdll_.h"
};


BOOL __stdcall AfxInitExtensionModule(AFX_EXTENSION_MODULE&, HMODULE hMod);

void __stdcall AfxTermExtensionModule(AFX_EXTENSION_MODULE&, BOOL bAll = 0);


void __stdcall AfxCoreInitModule();

void __stdcall AfxOleInitModule();
void __stdcall AfxNetInitModule();
void __stdcall AfxDbInitModule();




#line 91 "C:\\MSDEV\\MFC\\include\\afxdll_.h"




HINSTANCE __stdcall AfxLoadLibrary(LPCTSTR lpszModuleName);
BOOL __stdcall AfxFreeLibrary(HINSTANCE hInstLib);





#pragma pack(pop)
#line 104 "C:\\MSDEV\\MFC\\include\\afxdll_.h"


#line 4580 "C:\\MSDEV\\MFC\\include\\afxwin.h"
#line 4581 "C:\\MSDEV\\MFC\\include\\afxwin.h"







void __stdcall AfxLockTempMaps();
BOOL __stdcall AfxUnlockTempMaps(BOOL bDeleteTemps = 1);




void __stdcall AfxOleOnReleaseAllObjects();
BOOL __stdcall AfxOleCanExitApp();
void __stdcall AfxOleLockApp();
void __stdcall AfxOleUnlockApp();

void __stdcall AfxOleSetUserCtrl(BOOL bUserCtrl);
BOOL __stdcall AfxOleGetUserCtrl();


BOOL __stdcall AfxOleLockControl(const CLSID & clsid);
BOOL __stdcall AfxOleUnlockControl(const CLSID & clsid);
BOOL __stdcall AfxOleLockControl(LPCTSTR lpszProgID);
BOOL __stdcall AfxOleUnlockControl(LPCTSTR lpszProgID);
void __stdcall AfxOleUnlockAllControls();
#line 4609 "C:\\MSDEV\\MFC\\include\\afxwin.h"










#pragma pack(pop)
#line 4621 "C:\\MSDEV\\MFC\\include\\afxwin.h"











#pragma component(minrebuild, on)
#line 4634 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#pragma component(mintypeinfo, off)
#line 4637 "C:\\MSDEV\\MFC\\include\\afxwin.h"





#line 4643 "C:\\MSDEV\\MFC\\include\\afxwin.h"

#line 4645 "C:\\MSDEV\\MFC\\include\\afxwin.h"


#line 7 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxext.h"

















	#line 1 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


















	#line 1 "C:\\MSDEV\\INCLUDE\\commdlg.h"











#line 1 "C:\\MSDEV\\INCLUDE\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#pragma pack(1)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack1.h"
#line 13 "C:\\MSDEV\\INCLUDE\\commdlg.h"


extern "C" {            
#line 17 "C:\\MSDEV\\INCLUDE\\commdlg.h"






#line 24 "C:\\MSDEV\\INCLUDE\\commdlg.h"
#line 25 "C:\\MSDEV\\INCLUDE\\commdlg.h"

typedef UINT (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagOFNA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} OPENFILENAMEW, *LPOPENFILENAMEW;




typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
#line 79 "C:\\MSDEV\\INCLUDE\\commdlg.h"

BOOL  __stdcall     GetOpenFileNameA(LPOPENFILENAMEA);
BOOL  __stdcall     GetOpenFileNameW(LPOPENFILENAMEW);




#line 87 "C:\\MSDEV\\INCLUDE\\commdlg.h"
BOOL  __stdcall     GetSaveFileNameA(LPOPENFILENAMEA);
BOOL  __stdcall     GetSaveFileNameW(LPOPENFILENAMEW);




#line 94 "C:\\MSDEV\\INCLUDE\\commdlg.h"
short __stdcall     GetFileTitleA(LPCSTR, LPSTR, WORD);
short __stdcall     GetFileTitleW(LPCWSTR, LPWSTR, WORD);




#line 101 "C:\\MSDEV\\INCLUDE\\commdlg.h"
























#line 126 "C:\\MSDEV\\INCLUDE\\commdlg.h"















typedef UINT (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR           pszFile;        
} OFNOTIFYA,  *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR          pszFile;        
} OFNOTIFYW,  *LPOFNOTIFYW;




typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
#line 165 "C:\\MSDEV\\INCLUDE\\commdlg.h"






























#line 196 "C:\\MSDEV\\INCLUDE\\commdlg.h"













#line 210 "C:\\MSDEV\\INCLUDE\\commdlg.h"













#line 224 "C:\\MSDEV\\INCLUDE\\commdlg.h"




























#line 253 "C:\\MSDEV\\INCLUDE\\commdlg.h"

typedef struct tagCHOOSECOLORA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;




typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
#line 283 "C:\\MSDEV\\INCLUDE\\commdlg.h"

BOOL  __stdcall ChooseColorA(LPCHOOSECOLORA);
BOOL  __stdcall ChooseColorW(LPCHOOSECOLORW);




#line 291 "C:\\MSDEV\\INCLUDE\\commdlg.h"











#line 303 "C:\\MSDEV\\INCLUDE\\commdlg.h"

typedef UINT (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPSTR        lpstrFindWhat;      
   LPSTR        lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCSTR       lpTemplateName;     
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPWSTR       lpstrFindWhat;      
   LPWSTR       lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCWSTR      lpTemplateName;     
} FINDREPLACEW, *LPFINDREPLACEW;




typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
#line 341 "C:\\MSDEV\\INCLUDE\\commdlg.h"



















HWND  __stdcall    FindTextA(LPFINDREPLACEA);
HWND  __stdcall    FindTextW(LPFINDREPLACEW);




#line 367 "C:\\MSDEV\\INCLUDE\\commdlg.h"
HWND  __stdcall    ReplaceTextA(LPFINDREPLACEA);
HWND  __stdcall    ReplaceTextW(LPFINDREPLACEW);




#line 374 "C:\\MSDEV\\INCLUDE\\commdlg.h"

typedef UINT (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTA      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCSTR          lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPSTR           lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTA, *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTW      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCWSTR         lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPWSTR          lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTW, *LPCHOOSEFONTW;




typedef CHOOSEFONTA CHOOSEFONT;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
#line 430 "C:\\MSDEV\\INCLUDE\\commdlg.h"

BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);




#line 438 "C:\\MSDEV\\INCLUDE\\commdlg.h"















#line 454 "C:\\MSDEV\\INCLUDE\\commdlg.h"
















#line 471 "C:\\MSDEV\\INCLUDE\\commdlg.h"
















































#line 520 "C:\\MSDEV\\INCLUDE\\commdlg.h"







typedef UINT (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCSTR           lpPrintTemplateName;
   LPCSTR           lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCWSTR          lpPrintTemplateName;
   LPCWSTR          lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;




typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
#line 579 "C:\\MSDEV\\INCLUDE\\commdlg.h"

BOOL  __stdcall     PrintDlgA(LPPRINTDLGA);
BOOL  __stdcall     PrintDlgW(LPPRINTDLGW);




#line 587 "C:\\MSDEV\\INCLUDE\\commdlg.h"


























typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES;

typedef DEVNAMES * LPDEVNAMES;




DWORD __stdcall     CommDlgExtendedError(void);










typedef UINT (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR          lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR         lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;




typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
#line 680 "C:\\MSDEV\\INCLUDE\\commdlg.h"

BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );




#line 688 "C:\\MSDEV\\INCLUDE\\commdlg.h"





















#line 710 "C:\\MSDEV\\INCLUDE\\commdlg.h"



}
#line 715 "C:\\MSDEV\\INCLUDE\\commdlg.h"

#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 717 "C:\\MSDEV\\INCLUDE\\commdlg.h"
#line 718 "C:\\MSDEV\\INCLUDE\\commdlg.h"
#line 20 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
#line 21 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"




inline short __stdcall GetFileTitle(LPCTSTR lpszFile, LPTSTR lpszTitle, WORD cbBuf)



	{ return ::GetFileTitleA(lpszFile, lpszTitle, cbBuf); }
#line 31 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
#line 32 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


	
		#line 1 "C:\\MSDEV\\INCLUDE\\richedit.h"















#line 1 "C:\\MSDEV\\INCLUDE\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#pragma pack(4)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 17 "C:\\MSDEV\\INCLUDE\\richedit.h"


#line 20 "C:\\MSDEV\\INCLUDE\\richedit.h"


extern "C" {
#line 24 "C:\\MSDEV\\INCLUDE\\richedit.h"















#line 40 "C:\\MSDEV\\INCLUDE\\richedit.h"












#line 53 "C:\\MSDEV\\INCLUDE\\richedit.h"







#line 61 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 63 "C:\\MSDEV\\INCLUDE\\richedit.h"
























































#line 120 "C:\\MSDEV\\INCLUDE\\richedit.h"













typedef enum tagTextMode
{
	TM_PLAINTEXT			= 1,
	TM_RICHTEXT				= 2,	
	TM_SINGLELEVELUNDO		= 4,
	TM_MULTILEVELUNDO		= 8,	
	TM_SINGLECODEPAGE		= 16,
	TM_MULTICODEPAGE		= 32	
} TEXTMODE;






















































































#line 229 "C:\\MSDEV\\INCLUDE\\richedit.h"






































































typedef LONG (*EDITWORDBREAKPROCEX)(char *pchText, LONG cchText, BYTE bCharSet, INT action);
#line 301 "C:\\MSDEV\\INCLUDE\\richedit.h"


typedef struct _charformat
{
	UINT		cbSize;
	
	DWORD		dwMask;
	DWORD		dwEffects;
	LONG		yHeight;
	LONG		yOffset;
	COLORREF	crTextColor;
	BYTE		bCharSet;
	BYTE		bPitchAndFamily;
	char		szFaceName[32];
	
} CHARFORMATA;

typedef struct _charformatw
{
	UINT		cbSize;
	
	DWORD		dwMask;
	DWORD		dwEffects;
	LONG		yHeight;
	LONG		yOffset;
	COLORREF	crTextColor;
	BYTE		bCharSet;
	BYTE		bPitchAndFamily;
	WCHAR		szFaceName[32];
	
} CHARFORMATW;







#line 340 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 342 "C:\\MSDEV\\INCLUDE\\richedit.h"






















										








									
									
									
									


typedef struct _charrange
{
	LONG	cpMin;
	LONG	cpMax;
} CHARRANGE;

typedef struct _textrange
{
	CHARRANGE chrg;
	LPSTR lpstrText;	
} TEXTRANGEA;

typedef struct _textrangew
{
	CHARRANGE chrg;
	LPWSTR lpstrText;	
} TEXTRANGEW;







#line 404 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 406 "C:\\MSDEV\\INCLUDE\\richedit.h"


typedef DWORD (__stdcall *EDITSTREAMCALLBACK)(DWORD dwCookie, LPBYTE pbBuff, LONG cb, LONG *pcb);

typedef struct _editstream
{
	DWORD dwCookie;		
	DWORD dwError;		
	EDITSTREAMCALLBACK pfnCallback;
} EDITSTREAM;



















typedef struct _findtext
{
	CHARRANGE chrg;
	LPSTR lpstrText;
} FINDTEXTA;

typedef struct _findtextw
{
	CHARRANGE chrg;
	LPWSTR lpstrText;
} FINDTEXTW;







#line 454 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 456 "C:\\MSDEV\\INCLUDE\\richedit.h"

typedef struct _findtextexa
{
	CHARRANGE chrg;
	LPSTR lpstrText;
	CHARRANGE chrgText;
} FINDTEXTEXA;

typedef struct _findtextexw
{
	CHARRANGE chrg;
	LPWSTR lpstrText;
	CHARRANGE chrgText;
} FINDTEXTEXW;







#line 478 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 480 "C:\\MSDEV\\INCLUDE\\richedit.h"


typedef struct _formatrange
{
	HDC hdc;
	HDC hdcTarget;
	RECT rc;
	RECT rcPage;
	CHARRANGE chrg;
} FORMATRANGE;






typedef struct _paraformat
{
	UINT	cbSize;
	
	DWORD	dwMask;
	WORD	wNumbering;
	WORD	wReserved;
	LONG	dxStartIndent;
	LONG	dxRightIndent;
	LONG	dxOffset;
	WORD	wAlignment;
	SHORT	cTabCount;
	LONG	rgxTabs[32];
} PARAFORMAT;






















struct CHARFORMAT2W : _charformatw
{
	WORD		wWeight;			
	SHORT		sSpacing;			
	COLORREF	crBackColor;		
	LCID		lcid;				
	DWORD		dwReserved;			
	SHORT		sStyle;				
	WORD		wKerning;			
	BYTE		bUnderlineType;		
	BYTE		bAnimation;			
	BYTE		bRevAuthor;			
};

struct CHARFORMAT2A : _charformat
{
	WORD		wWeight;			
	SHORT		sSpacing;			
	COLORREF	crBackColor;		
	LCID		lcid;				
	DWORD		dwReserved;			
	SHORT		sStyle;				
	WORD		wKerning;			
	BYTE		bUnderlineType;		
	BYTE		bAnimation;			
	BYTE		bRevAuthor;			
};






















































#line 614 "C:\\MSDEV\\INCLUDE\\richedit.h"





#line 620 "C:\\MSDEV\\INCLUDE\\richedit.h"













































































struct PARAFORMAT2 : _paraformat
{
	LONG	dySpaceBefore;			
	LONG	dySpaceAfter;				
	LONG	dyLineSpacing;			
	SHORT	sStyle;					
	BYTE	bLineSpacingRule;		
	BYTE	bCRC;					
	WORD	wShadingWeight;			
	WORD	wShadingStyle;			
	WORD	wNumberingStart;		
	WORD	wNumberingStyle;		
	WORD	wNumberingTab;			
	WORD	wBorderSpace;			
	WORD	wBorderWidth;			
	WORD	wBorders;				
									
};

































#line 749 "C:\\MSDEV\\INCLUDE\\richedit.h"

























































































typedef struct _msgfilter
{
	NMHDR	nmhdr;
	UINT	msg;
	
	WPARAM	wParam;
	
	LPARAM	lParam;
} MSGFILTER;

typedef struct _reqresize
{
	NMHDR nmhdr;
	RECT rc;
} REQRESIZE;

typedef struct _selchange
{
	NMHDR nmhdr;
	CHARRANGE chrg;
	WORD seltyp;
} SELCHANGE;














typedef struct _endropfiles
{
	NMHDR nmhdr;
	HANDLE hDrop;
	LONG cp;
	BOOL fProtected;
} ENDROPFILES;

typedef struct _enprotected
{
	NMHDR nmhdr;
	UINT msg;
	
	WPARAM wParam;
	
	LPARAM lParam;
	CHARRANGE chrg;
} ENPROTECTED;

typedef struct _ensaveclipboard
{
	NMHDR nmhdr;
	LONG cObjectCount;
    LONG cch;
} ENSAVECLIPBOARD;


typedef struct _enoleopfailed
{
	NMHDR nmhdr;
	LONG iob;
	LONG lOper;
	HRESULT hr;
} ENOLEOPFAILED;
#line 909 "C:\\MSDEV\\INCLUDE\\richedit.h"



typedef struct _objectpositions
{
    NMHDR nmhdr;
    LONG cObjectCount;
    LONG *pcpPositions;
} OBJECTPOSITIONS;

typedef struct _enlink
{
    NMHDR nmhdr;
    UINT msg;
    
    WPARAM wParam;
    
    LPARAM lParam;
    CHARRANGE chrg;
} ENLINK;


typedef struct _encorrecttext
{
	NMHDR nmhdr;
	CHARRANGE chrg;
	WORD seltyp;
} ENCORRECTTEXT;


typedef struct _punctuation
{
	UINT	iSize;
	LPSTR	szPunctuation;
} PUNCTUATION;


typedef struct _compcolor
{
	COLORREF crText;
	COLORREF crBackground;
	DWORD dwEffects;
}COMPCOLOR;








typedef struct _repastespecial
{
	DWORD	dwAspect;
	DWORD	dwParam;
} REPASTESPECIAL;


typedef enum _undonameid
{
    UID_UNKNOWN     = 0,
	UID_TYPING		= 1,
	UID_DELETE 		= 2,
	UID_DRAGDROP	= 3,
	UID_CUT			= 4,
	UID_PASTE		= 5
} UNDONAMEID;






typedef struct _gettextex
{
	DWORD	cb;				
	DWORD	flags;			
	UINT	codepage;		

	LPCSTR	lpDefaultChar;	
	LPBOOL	lpUsedDefChar;	
} GETTEXTEX;










typedef struct _gettextlengthex
{
	DWORD	flags;			
	UINT	codepage;		

} GETTEXTLENGTHEX;
	
	



#line 1013 "C:\\MSDEV\\INCLUDE\\richedit.h"
		




#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 1019 "C:\\MSDEV\\INCLUDE\\richedit.h"


#line 1022 "C:\\MSDEV\\INCLUDE\\richedit.h"


}
#line 1026 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 1028 "C:\\MSDEV\\INCLUDE\\richedit.h"

#line 36 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
	#line 37 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
#line 38 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


#pragma component(minrebuild, off)
#line 42 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

#pragma component(mintypeinfo, on)
#line 45 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"












#line 58 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
#line 59 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"




#pragma pack(push, 4)
#line 65 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"






	
		class CCommonDialog;  

			
			class CFindReplaceDialog; 

			
			class CFileDialog;    
			class CColorDialog;   
			class CFontDialog;    
			class CPrintDialog;   
			class CPageSetupDialog; 

	
	class CPropertySheet;     

	
		class CPropertyPage;  









class CCommonDialog : public CDialog
{
public:
	CCommonDialog(CWnd* pParentWnd);


protected:
	virtual void OnOK();
	virtual void OnCancel();

	
	 BOOL OnHelpInfo(HELPINFO*);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CFileDialog : public CCommonDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFileDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	OPENFILENAME m_ofn; 


	CFileDialog(BOOL bOpenFileDialog, 
		LPCTSTR lpszDefExt = 0,
		LPCTSTR lpszFileName = 0,
		DWORD dwFlags = 0x00000004 | 0x00000002,
		LPCTSTR lpszFilter = 0,
		CWnd* pParentWnd = 0);


	virtual int DoModal();

	
	
	CString GetPathName() const;  
	CString GetFileName() const;  
	CString GetFileExt() const;   
	CString GetFileTitle() const; 
	BOOL GetReadOnlyPref() const; 

	
	POSITION GetStartPosition() const;
	CString GetNextPathName(POSITION& pos) const;

	
	void SetTemplate(UINT nWin3ID, UINT nWin4ID);
	void SetTemplate(LPCTSTR lpWin3ID, LPCTSTR lpWin4ID);


	
	CString GetFolderPath() const; 
	void SetControlText(int nID, LPCSTR lpsz);
	void HideControl(int nID);
	void SetDefExt(LPCSTR lpsz);
#line 159 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


protected:
	friend UINT __stdcall _AfxCommDlgProc(HWND, UINT, WPARAM, LPARAM);
	virtual UINT OnShareViolation(LPCTSTR lpszPathName);
	virtual BOOL OnFileNameOK();
	virtual void OnLBSelChangedNotify(UINT nIDBox, UINT iCurSel, UINT nCode);

	
	virtual void OnInitDone();
	virtual void OnFileNameChange();
	virtual void OnFolderChange();
	virtual void OnTypeChange();



public:
	virtual void Dump(CDumpContext& dc) const;
#line 178 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

protected:
	BOOL m_bOpenFileDialog;       
	CString m_strFilter;          
						
	TCHAR m_szFileTitle[64];       
	TCHAR m_szFileName[260]; 

	OPENFILENAME*  m_pofnTemp;

	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
};




class CFontDialog : public CCommonDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFontDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	CHOOSEFONT m_cf;


	CFontDialog(LPLOGFONT lplfInitial = 0,
		DWORD dwFlags = 0x00000100L | 0x00000001,
		CDC* pdcPrinter = 0,
		CWnd* pParentWnd = 0);

	CFontDialog(const CHARFORMATA& charformat,
		DWORD dwFlags = 0x00000001,
		CDC* pdcPrinter = 0,
		CWnd* pParentWnd = 0);
#line 214 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

	virtual int DoModal();

	
	void GetCurrentFont(LPLOGFONT lplf);

	
	CString GetFaceName() const;  
	CString GetStyleName() const; 
	int GetSize() const;          
	COLORREF GetColor() const;    
	int GetWeight() const;        
	BOOL IsStrikeOut() const;     
	BOOL IsUnderline() const;     
	BOOL IsBold() const;          
	BOOL IsItalic() const;        

	void GetCharFormat(CHARFORMATA& cf) const;
#line 233 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


	LOGFONT m_lf; 

	DWORD FillInLogFont(const CHARFORMATA& cf);
#line 239 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


public:
	virtual void Dump(CDumpContext& dc) const;
#line 244 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

protected:
	TCHAR m_szStyleName[64]; 
};




class CColorDialog : public CCommonDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCColorDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	CHOOSECOLOR m_cc;


	CColorDialog(COLORREF clrInit = 0, DWORD dwFlags = 0,
			CWnd* pParentWnd = 0);


	virtual int DoModal();

	
	void SetCurrentColor(COLORREF clr);

	
	COLORREF GetColor() const;
	static COLORREF* __stdcall GetSavedCustomColors();


protected:
	friend UINT __stdcall _AfxCommDlgProc(HWND, UINT, WPARAM, LPARAM);
	virtual BOOL OnColorOK();       




public:
	virtual void Dump(CDumpContext& dc) const;
#line 286 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

protected:
	
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};








class CPageSetupDialog : public CCommonDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPageSetupDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	PAGESETUPDLG m_psd;


	CPageSetupDialog(DWORD dwFlags = 0x00000002 | 0x00000000,
		CWnd* pParentWnd = 0);


	LPDEVMODE GetDevMode() const;   
	CString GetDriverName() const;  
	CString GetDeviceName() const;  
	CString GetPortName() const;    
	HDC CreatePrinterDC();
	CSize GetPaperSize() const;
	void GetMargins(LPRECT lpRectMargins, LPRECT lpRectMinMargins) const;


	virtual int DoModal();


	virtual UINT PreDrawPage(WORD wPaper, WORD wFlags, LPPAGESETUPDLG pPSD);
	virtual UINT OnDrawPage(CDC* pDC, UINT nMessage, LPRECT lpRect);


protected:
	static UINT __stdcall PaintHookProc(HWND hWnd, UINT message, WPARAM wParam,
		LPARAM lParam);


public:
	virtual void Dump(CDumpContext& dc) const;
#line 338 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
};
#line 340 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"




class CPrintDialog : public CCommonDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPrintDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	PRINTDLG& m_pd;


	CPrintDialog(BOOL bPrintSetupOnly,
		
		DWORD dwFlags = 0x00000000 | 0x00040000 | 0x00000008
			| 0x00100000 | 0x00000004,
		CWnd* pParentWnd = 0);


	virtual int DoModal();

	
	
	BOOL GetDefaults();

	
	int GetCopies() const;          
	BOOL PrintCollate() const;      
	BOOL PrintSelection() const;    
	BOOL PrintAll() const;          
	BOOL PrintRange() const;        
	int GetFromPage() const;        
	int GetToPage() const;          
	LPDEVMODE GetDevMode() const;   
	CString GetDriverName() const;  
	CString GetDeviceName() const;  
	CString GetPortName() const;    
	HDC GetPrinterDC() const;       

	
	
	
	
	

	HDC CreatePrinterDC();




public:
	virtual void Dump(CDumpContext& dc) const;
#line 395 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

private:
	PRINTDLG m_pdActual; 
protected:
	
	CPrintDialog(PRINTDLG& pdInit);
	virtual CPrintDialog* AttachOnSetup();

	
	 void OnPrintSetup();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CFindReplaceDialog : public CCommonDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFindReplaceDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	FINDREPLACE m_fr;


	CFindReplaceDialog();
	
	

	BOOL Create(BOOL bFindDialogOnly, 
			LPCTSTR lpszFindWhat,
			LPCTSTR lpszReplaceWith = 0,
			DWORD dwFlags = 0x00000001,
			CWnd* pParentWnd = 0);

	
	static CFindReplaceDialog* __stdcall GetNotifier(LPARAM lParam);


	
	CString GetReplaceString() const;
	CString GetFindString() const;   
	BOOL SearchDown() const;         
	BOOL FindNext() const;           
	BOOL MatchCase() const;          
	BOOL MatchWholeWord() const;     
	BOOL ReplaceCurrent() const;     
	BOOL ReplaceAll() const;         
	BOOL IsTerminating() const;      


protected:
	virtual void PostNcDestroy();


public:
	virtual void Dump(CDumpContext& dc) const;
#line 454 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

protected:
	TCHAR m_szFindWhat[128];
	TCHAR m_szReplaceWith[128];
};




class CPropertyPage : public CDialog
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPropertyPage; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPropertyPage(UINT nIDTemplate, UINT nIDCaption = 0);
	CPropertyPage(LPCTSTR lpszTemplateName, UINT nIDCaption = 0);
	CPropertyPage();
	void Construct(UINT nIDTemplate, UINT nIDCaption = 0);
	void Construct(LPCTSTR lpszTemplateName, UINT nIDCaption = 0);


	PROPSHEETPAGEA   m_psp;


	void CancelToClose();
	void SetModified(BOOL bChanged = 1);
	LRESULT QuerySiblings(WPARAM wParam, LPARAM lParam);


public:
	virtual BOOL OnApply();
	virtual void OnReset();
	virtual void OnOK();
	virtual void OnCancel();
	virtual BOOL OnSetActive();
	virtual BOOL OnKillActive();
	virtual BOOL OnQueryCancel();

	virtual LRESULT OnWizardBack();
	virtual LRESULT OnWizardNext();
	virtual BOOL OnWizardFinish();


public:
	virtual ~CPropertyPage();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
	void EndDialog(int nEndID); 
#line 505 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

protected:
	
	CString m_strCaption;
	BOOL m_bFirstSetActive;

	
	void CommonConstruct(LPCTSTR lpszTemplateName, UINT nIDCaption);
	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
	virtual BOOL PreTranslateMessage(MSG*);
	LRESULT MapWizardResult(LRESULT lToMap);


	void PreProcessPageTemplate(PROPSHEETPAGEA& psp, BOOL bWizard);

	void Cleanup();
	const DLGTEMPLATE* InitDialogInfo(const DLGTEMPLATE* pTemplate);
#line 523 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

	
	
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CPropertySheet;
};




class CTabCtrl; 

class CPropertySheet : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCPropertySheet; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPropertySheet();
	CPropertySheet(UINT nIDCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);
	CPropertySheet(LPCTSTR pszCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);
	void Construct(UINT nIDCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);
	void Construct(LPCTSTR pszCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);

	
	BOOL Create(CWnd* pParentWnd = 0, DWORD dwStyle = (DWORD)-1,
		DWORD dwExStyle = 0);
	
	


public:
	PROPSHEETHEADERA m_psh;

	int GetPageCount() const;
	CPropertyPage* GetActivePage() const;
	int GetActiveIndex() const;
	CPropertyPage* GetPage(int nPage) const;
	int GetPageIndex(CPropertyPage* pPage);
	BOOL SetActivePage(int nPage);
	BOOL SetActivePage(CPropertyPage* pPage);
	void SetTitle(LPCTSTR lpszText, UINT nStyle = 0);
	CTabCtrl* GetTabControl() const;

	void SetWizardMode();
	void SetFinishText(LPCTSTR lpszText);
	void SetWizardButtons(DWORD dwFlags);


public:
	virtual int DoModal();
	void AddPage(CPropertyPage* pPage);
	void RemovePage(CPropertyPage* pPage);
	void RemovePage(int nPage);
	void EndDialog(int nEndID); 
	BOOL PressButton(int nButton);


public:
	virtual ~CPropertySheet();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 594 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"
	void CommonConstruct(CWnd* pParentWnd, UINT iSelectPage);
	void EnableStackedTabs(BOOL bStacked);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void BuildPropPageArray();
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL OnInitDialog();
	virtual BOOL ContinueModal();
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);

protected:
	CPtrArray m_pages;      
	CString m_strCaption;   
	CWnd* m_pParentWnd;     
	BOOL m_bStacked;        
	BOOL m_bModeless;       

	
	
	 BOOL OnNcCreate(LPCREATESTRUCT);
	 LRESULT HandleInitDialog(WPARAM, LPARAM);
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	 LRESULT OnCommandHelp(WPARAM, LPARAM);
	 void OnClose();
	 void OnSysCommand(UINT nID, LPARAM);
	 LRESULT OnSetDefID(WPARAM, LPARAM);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CPropertyPage;
};





#pragma pack(pop)
#line 632 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"










#pragma component(minrebuild, on)
#line 644 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

#pragma component(mintypeinfo, off)
#line 647 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"

#line 649 "C:\\MSDEV\\MFC\\include\\afxdlgs.h"


#line 19 "C:\\MSDEV\\MFC\\include\\afxext.h"
#line 20 "C:\\MSDEV\\MFC\\include\\afxext.h"


#pragma component(minrebuild, off)
#line 24 "C:\\MSDEV\\MFC\\include\\afxext.h"

#pragma component(mintypeinfo, on)
#line 27 "C:\\MSDEV\\MFC\\include\\afxext.h"


#pragma pack(push, 4)
#line 31 "C:\\MSDEV\\MFC\\include\\afxext.h"







	
		
			
				class CBitmapButton;    

			class CControlBar;          
				class CStatusBar;       
				class CToolBar;         
				class CDialogBar;       

			class CSplitterWnd;         

			
				
				class CFormView;        
				class CEditView;        

	
		class CMetaFileDC;              

class CRectTracker;                     


struct CPrintInfo;          
struct CPrintPreviewState;  
struct CCreateContext;      








class CBitmapButton : public CButton
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCBitmapButton; virtual CRuntimeClass* GetRuntimeClass() const;
public:

	CBitmapButton();

	BOOL LoadBitmaps(LPCTSTR lpszBitmapResource,
			LPCTSTR lpszBitmapResourceSel = 0,
			LPCTSTR lpszBitmapResourceFocus = 0,
			LPCTSTR lpszBitmapResourceDisabled = 0);
	BOOL LoadBitmaps(UINT nIDBitmapResource,
			UINT nIDBitmapResourceSel = 0,
			UINT nIDBitmapResourceFocus = 0,
			UINT nIDBitmapResourceDisabled = 0);
	BOOL AutoLoad(UINT nID, CWnd* pParent);


	void SizeToContent();


public:

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 98 "C:\\MSDEV\\MFC\\include\\afxext.h"
protected:
	
	CBitmap m_bitmap;           
	CBitmap m_bitmapSel;        
	CBitmap m_bitmapFocus;      
	CBitmap m_bitmapDisabled;   

	virtual void DrawItem(LPDRAWITEMSTRUCT lpDIS);
};





class CDockBar;
class CDockContext;
class CControlBarInfo;
struct AFX_SIZEPARENTPARAMS;



							
							
							







class CControlBar : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCControlBar; virtual CRuntimeClass* GetRuntimeClass() const;

protected:
	CControlBar();


public:
	int GetCount() const;

	
	DWORD GetBarStyle();
	void SetBarStyle(DWORD dwStyle);

	BOOL m_bAutoDelete;

	CFrameWnd* GetDockingFrame() const;
	BOOL IsFloating() const;
	virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz);
	virtual CSize CalcDynamicLayout(int nLength, DWORD nMode);


	void EnableDocking(DWORD dwDockStyle);


	virtual void OnUpdateCmdUI(CFrameWnd* pTarget, BOOL bDisableIfNoHndler) = 0;


public:
	virtual ~CControlBar();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 164 "C:\\MSDEV\\MFC\\include\\afxext.h"
	virtual void DelayShow(BOOL bShow);
	virtual BOOL IsVisible() const;
	virtual DWORD RecalcDelayShow(AFX_SIZEPARENTPARAMS* lpLayout);

	virtual BOOL IsDockBar() const;
	virtual BOOL DestroyWindow();
	virtual void OnBarStyleChange(DWORD dwOldStyle, DWORD dwNewStyle);

	
	int m_cxLeftBorder, m_cxRightBorder;
	int m_cyTopBorder, m_cyBottomBorder;
	int m_cxDefaultGap;         
	UINT m_nMRUWidth;   




	
	int m_nCount;
	void* m_pData;        

	
	enum StateFlags
		{ delayHide = 1, delayShow = 2, tempHide = 4, statusSet = 8 };
	UINT m_nStateFlags;

	
	DWORD m_dwStyle;    
	DWORD m_dwDockStyle;
	CFrameWnd* m_pDockSite; 
	CDockBar* m_pDockBar;   
	CDockContext* m_pDockContext;   

	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual void PostNcDestroy();

	virtual void DoPaint(CDC* pDC);
	void DrawBorders(CDC* pDC, CRect& rect);

	
	virtual LRESULT WindowProc(UINT nMsg, WPARAM wParam, LPARAM lParam);
	void CalcInsideRect(CRect& rect, BOOL bHorz) const; 
	BOOL AllocElements(int nElements, int cbElement);
	virtual BOOL SetStatusText(int nHit);
	void ResetTimer(UINT nEvent, UINT nTime);
	void EraseNonClient();





	void GetBarInfo(CControlBarInfo* pInfo);
	void SetBarInfo(CControlBarInfo* pInfo, CFrameWnd* pFrameWnd);

	
	 void OnTimer(UINT nIDEvent);
	 int OnCreate(LPCREATESTRUCT lpcs);
	 void OnDestroy();
	 void OnPaint();
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	 void OnWindowPosChanging(LPWINDOWPOS lpWndPos);
	 LRESULT OnSizeParent(WPARAM wParam, LPARAM lParam);
	 LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
	 void OnInitialUpdate();
	 LRESULT OnIdleUpdateCmdUI(WPARAM wParam, LPARAM lParam);
	 void OnLButtonDown(UINT nFlags, CPoint pt );
	 void OnLButtonDblClk(UINT nFlags, CPoint pt);
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT nMsg);
	







	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CFrameWnd;
	friend class CDockBar;
};




class CStatusBarCtrl;   
struct AFX_STATUSPANE;  

class CStatusBar : public CControlBar
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCStatusBar; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CStatusBar();
	BOOL Create(CWnd* pParentWnd,
		DWORD dwStyle = 0x40000000L | 0x10000000L | (0x8000L|0x0200L),
		UINT nID = 0xE801);
	BOOL SetIndicators(const UINT* lpIDArray, int nIDCount);


public:
	
	int CommandToIndex(UINT nIDFind) const;
	UINT GetItemID(int nIndex) const;
	void GetItemRect(int nIndex, LPRECT lpRect) const;

	
	void GetPaneText(int nIndex, CString& rString) const;
	CString GetPaneText(int nIndex) const;
	BOOL SetPaneText(int nIndex, LPCTSTR lpszNewText, BOOL bUpdate = 1);
	void GetPaneInfo(int nIndex, UINT& nID, UINT& nStyle, int& cxWidth) const;
	void SetPaneInfo(int nIndex, UINT nID, UINT nStyle, int cxWidth);
	UINT GetPaneStyle(int nIndex) const;
	void SetPaneStyle(int nIndex, UINT nStyle);

	
	CStatusBarCtrl& GetStatusBarCtrl() const;


	virtual void DrawItem(LPDRAWITEMSTRUCT);


public:
	virtual ~CStatusBar();
	virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz);
	BOOL PreCreateWindow(CREATESTRUCT& cs);
	BOOL AllocElements(int nElements, int cbElement);
	void CalcInsideRect(CRect& rect, BOOL bHorz) const;
	virtual void OnBarStyleChange(DWORD dwOldStyle, DWORD dwNewStyle);


	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
	void EnableDocking(DWORD dwDockStyle);
#line 301 "C:\\MSDEV\\MFC\\include\\afxext.h"
	virtual void OnUpdateCmdUI(CFrameWnd* pTarget, BOOL bDisableIfNoHndler);

protected:
	int m_nMinHeight;

	AFX_STATUSPANE* _GetPanePtr(int nIndex) const;
	void UpdateAllPanes(BOOL bUpdateRects, BOOL bUpdateText);
	virtual BOOL OnChildNotify(UINT message, WPARAM, LPARAM, LRESULT*);

	
	 UINT OnNcHitTest(CPoint);
	 void OnNcCalcSize(BOOL, NCCALCSIZE_PARAMS*);
	 void OnNcPaint();
	 void OnPaint();
	 void OnSize(UINT nType, int cx, int cy);
	 void OnWindowPosChanging(LPWINDOWPOS);
	 LRESULT OnSetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnGetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnGetTextLength(WPARAM wParam, LPARAM lParam);
	 LRESULT OnSetMinHeight(WPARAM wParam, LPARAM lParam);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};












HBITMAP __stdcall AfxLoadSysColorBitmap(HINSTANCE hInst, HRSRC hRsrc, BOOL bMono = 0);

class CToolBarCtrl; 

class CToolBar : public CControlBar
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCToolBar; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CToolBar();
	BOOL Create(CWnd* pParentWnd,
		DWORD dwStyle = 0x40000000L | 0x10000000L | (0x2000L|0x0800L),
		UINT nID = 0xE800);

	void SetSizes(SIZE sizeButton, SIZE sizeImage);
		
	void SetHeight(int cyHeight);
		
	BOOL LoadToolBar(LPCTSTR lpszResourceName);
	BOOL LoadToolBar(UINT nIDResource);
	BOOL LoadBitmapA(LPCTSTR lpszResourceName);
	BOOL LoadBitmapA(UINT nIDResource);
	BOOL SetBitmap(HBITMAP hbmImageWell);
	BOOL SetButtons(const UINT* lpIDArray, int nIDCount);
		


public:
	
	int CommandToIndex(UINT nIDFind) const;
	UINT GetItemID(int nIndex) const;
	virtual void GetItemRect(int nIndex, LPRECT lpRect) const;
	UINT GetButtonStyle(int nIndex) const;
	void SetButtonStyle(int nIndex, UINT nStyle);

	
	void GetButtonInfo(int nIndex, UINT& nID, UINT& nStyle, int& iImage) const;
	void SetButtonInfo(int nIndex, UINT nID, UINT nStyle, int iImage);
	BOOL SetButtonText(int nIndex, LPCTSTR lpszText);
	CString GetButtonText(int nIndex) const;
	void GetButtonText(int nIndex, CString& rString) const;

	
	CToolBarCtrl& GetToolBarCtrl() const;


public:
	virtual ~CToolBar();
	virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz);
	virtual CSize CalcDynamicLayout(int nLength, DWORD nMode);
	virtual int OnToolHitTest(CPoint point, TOOLINFOA* pTI) const;
	virtual void OnUpdateCmdUI(CFrameWnd* pTarget, BOOL bDisableIfNoHndler);
	void SetOwner(CWnd* pOwnerWnd);
	BOOL AddReplaceBitmap(HBITMAP hbmImageWell);
	virtual void OnBarStyleChange(DWORD dwOldStyle, DWORD dwNewStyle);






	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 401 "C:\\MSDEV\\MFC\\include\\afxext.h"

protected:
	HRSRC m_hRsrcImageWell; 
	HINSTANCE m_hInstImageWell; 
	HBITMAP m_hbmImageWell; 
	BOOL m_bDelayedButtonLayout; 

	CSize m_sizeImage;  
	CSize m_sizeButton; 

	CMapStringToPtr* m_pStringMap;  

	
	void _GetButton(int nIndex, TBBUTTON* pButton) const;
	void _SetButton(int nIndex, TBBUTTON* pButton);
	CSize CalcLayout(DWORD nMode, int nLength = -1);
	CSize CalcSize(TBBUTTON* pData, int nCount);
	int WrapToolBar(TBBUTTON* pData, int nCount, int nWidth);
	void SizeToolBar(TBBUTTON* pData, int nCount, int nLength, BOOL bVert = 0);

	
	 UINT OnNcHitTest(CPoint);
	 void OnNcPaint();
	 void OnPaint();
	 void OnNcCalcSize(BOOL, NCCALCSIZE_PARAMS*);
	 void OnWindowPosChanging(LPWINDOWPOS);
	 void OnSysColorChange();
	 LRESULT OnSetButtonSize(WPARAM, LPARAM);
	 LRESULT OnSetBitmapSize(WPARAM, LPARAM);
	 BOOL OnNcCreate(LPCREATESTRUCT);
	 BOOL OnEraseBkgnd(CDC* pDC);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};






















class CDialogBar : public CControlBar
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDialogBar; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CDialogBar();
	BOOL Create(CWnd* pParentWnd, LPCTSTR lpszTemplateName,
			UINT nStyle, UINT nID);
	BOOL Create(CWnd* pParentWnd, UINT nIDTemplate,
			UINT nStyle, UINT nID);


public:
	virtual ~CDialogBar();
	virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz);
	CSize m_sizeDefault;
	virtual void OnUpdateCmdUI(CFrameWnd* pTarget, BOOL bDisableIfNoHndler);

protected:

	
	_AFX_OCC_DIALOG_INFO* m_pOccDialogInfo;
	LPCTSTR m_lpszTemplateName;
	virtual BOOL SetOccDialogInfo(_AFX_OCC_DIALOG_INFO* pOccDialogInfo);
	 LRESULT HandleInitDialog(WPARAM, LPARAM);
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
#line 485 "C:\\MSDEV\\MFC\\include\\afxext.h"
};







class CSplitterWnd : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCSplitterWnd; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSplitterWnd();
	
	BOOL Create(CWnd* pParentWnd,
				int nMaxRows, int nMaxCols, SIZE sizeMin,
				CCreateContext* pContext,
				DWORD dwStyle = 0x40000000L | 0x10000000L |
					0x00100000L | 0x00200000L | 0x0001,
				UINT nID = 0xE900);

	
	BOOL CreateStatic(CWnd* pParentWnd,
				int nRows, int nCols,
				DWORD dwStyle = 0x40000000L | 0x10000000L,
				UINT nID = 0xE900);

	virtual BOOL CreateView(int row, int col, CRuntimeClass* pViewClass,
			SIZE sizeInit, CCreateContext* pContext);


public:
	int GetRowCount() const;
	int GetColumnCount() const;

	
	void GetRowInfo(int row, int& cyCur, int& cyMin) const;
	void SetRowInfo(int row, int cyIdeal, int cyMin);
	void GetColumnInfo(int col, int& cxCur, int& cxMin) const;
	void SetColumnInfo(int col, int cxIdeal, int cxMin);

	
	DWORD GetScrollStyle() const;
	void SetScrollStyle(DWORD dwStyle);

	
	CWnd* GetPane(int row, int col) const;
	BOOL IsChildPane(CWnd* pWnd, int* pRow, int* pCol);
	BOOL IsChildPane(CWnd* pWnd, int& row, int& col); 
	int IdFromRowCol(int row, int col) const;

	BOOL IsTracking();  


public:
	virtual void RecalcLayout();    


protected:
	
	enum ESplitType { splitBox, splitBar, splitIntersection, splitBorder };
	virtual void OnDrawSplitter(CDC* pDC, ESplitType nType, const CRect& rect);
	virtual void OnInvertTracker(const CRect& rect);

public:
	
	virtual BOOL CreateScrollBarCtrl(DWORD dwStyle, UINT nID);

	
	virtual void DeleteView(int row, int col);
	virtual BOOL SplitRow(int cyBefore);
	virtual BOOL SplitColumn(int cxBefore);
	virtual void DeleteRow(int rowDelete);
	virtual void DeleteColumn(int colDelete);

	
	virtual CWnd* GetActivePane(int* pRow = 0, int* pCol = 0);
	virtual void SetActivePane(int row, int col, CWnd* pWnd = 0);
protected:
	CWnd* GetActivePane(int& row, int& col); 

public:
	
	virtual BOOL CanActivateNext(BOOL bPrev = 0);
	virtual void ActivateNext(BOOL bPrev = 0);
	virtual BOOL DoKeyboardSplit();

	
	virtual BOOL DoScroll(CView* pViewFrom, UINT nScrollCode,
		BOOL bDoScroll = 1);
	virtual BOOL DoScrollBy(CView* pViewFrom, CSize sizeScroll,
		BOOL bDoScroll = 1);


public:
	virtual ~CSplitterWnd();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 587 "C:\\MSDEV\\MFC\\include\\afxext.h"

	
	struct CRowColInfo
	{
		int nMinSize;       
		int nIdealSize;     
		
		int nCurSize;       
	};

protected:
	
	CRuntimeClass* m_pDynamicViewClass;
	int m_nMaxRows, m_nMaxCols;

	
	int m_cxSplitter, m_cySplitter;         
	int m_cxBorderShare, m_cyBorderShare;   
	int m_cxSplitterGap, m_cySplitterGap;   
	int m_cxBorder, m_cyBorder;             

	
	int m_nRows, m_nCols;
	BOOL m_bHasHScroll, m_bHasVScroll;
	CRowColInfo* m_pColInfo;
	CRowColInfo* m_pRowInfo;

	
	BOOL m_bTracking, m_bTracking2;
	CPoint m_ptTrackOffset;
	CRect m_rectLimit;
	CRect m_rectTracker, m_rectTracker2;
	int m_htTrack;

	
	BOOL CreateCommon(CWnd* pParentWnd, SIZE sizeMin, DWORD dwStyle, UINT nID);
	virtual int HitTest(CPoint pt) const;
	virtual void GetInsideRect(CRect& rect) const;
	virtual void GetHitRect(int ht, CRect& rect);
	virtual void TrackRowSize(int y, int row);
	virtual void TrackColumnSize(int x, int col);
	virtual void DrawAllSplitBars(CDC* pDC, int cxInside, int cyInside);
	virtual void SetSplitCursor(int ht);
	CWnd* GetSizingParent();

	
	virtual void StartTracking(int ht);
	virtual void StopTracking(BOOL bAccept);

	
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);

	
	 BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	 void OnMouseMove(UINT nFlags, CPoint pt);
	 void OnPaint();
	 void OnLButtonDown(UINT nFlags, CPoint pt);
	 void OnLButtonDblClk(UINT nFlags, CPoint pt);
	 void OnLButtonUp(UINT nFlags, CPoint pt);
	 void OnCancelMode();
	 void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSize(UINT nType, int cx, int cy);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 BOOL OnNcCreate(LPCREATESTRUCT lpcs);
	 void OnSysCommand(UINT nID, LPARAM lParam);
	 void OnDisplayChange();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CFormView : public CScrollView
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCFormView; virtual CRuntimeClass* GetRuntimeClass() const;


protected:      
	CFormView(LPCTSTR lpszTemplateName);
	CFormView(UINT nIDTemplate);


public:

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 677 "C:\\MSDEV\\MFC\\include\\afxext.h"
	virtual void OnInitialUpdate();

protected:
	LPCTSTR m_lpszTemplateName;
	CCreateContext* m_pCreateContext;
	HWND m_hWndFocus;   

	virtual void OnDraw(CDC* pDC);      
	
	virtual BOOL Create(LPCTSTR, LPCTSTR, DWORD,
		const RECT&, CWnd*, UINT, CCreateContext*);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void OnActivateView(BOOL, CView*, CView*);
	virtual void OnActivateFrame(UINT, CFrameWnd*);
	BOOL SaveFocusControl();    


	
	_AFX_OCC_DIALOG_INFO* m_pOccDialogInfo;
	virtual BOOL SetOccDialogInfo(_AFX_OCC_DIALOG_INFO* pOccDialogInfo);
	 LRESULT HandleInitDialog(WPARAM, LPARAM);
#line 699 "C:\\MSDEV\\MFC\\include\\afxext.h"

	
	 int OnCreate(LPCREATESTRUCT lpcs);
	 void OnSetFocus(CWnd* pOldWnd);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CEditView : public CCtrlView
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCEditView; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	CEditView();


public:
	static __declspec(dllimport) const DWORD dwStyleDefault;
	
	CEdit& GetEditCtrl() const;

	
	CFont* GetPrinterFont() const;
	void SetPrinterFont(CFont* pFont);

	void SetTabStops(int nTabStops);
#line 730 "C:\\MSDEV\\MFC\\include\\afxext.h"

	
	void GetSelectedText(CString& strResult) const;

	
	LPCTSTR LockBuffer() const;
	void UnlockBuffer() const;
	UINT GetBufferLength() const;


public:
	BOOL FindTextA(LPCTSTR lpszFind, BOOL bNext = 1, BOOL bCase = 1);
	void SerializeRaw(CArchive& ar);
	UINT PrintInsideRect(CDC* pDC, RECT& rectLayout, UINT nIndexStart,
		UINT nIndexStop);


protected:
	virtual void OnFindNext(LPCTSTR lpszFind, BOOL bNext, BOOL bCase);
	virtual void OnReplaceSel(LPCTSTR lpszFind, BOOL bNext, BOOL bCase,
		LPCTSTR lpszReplace);
	virtual void OnReplaceAll(LPCTSTR lpszFind, LPCTSTR lpszReplace,
		BOOL bCase);
	virtual void OnTextNotFound(LPCTSTR lpszFind);


public:
	virtual ~CEditView();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 762 "C:\\MSDEV\\MFC\\include\\afxext.h"
	virtual void Serialize(CArchive& ar);
	virtual void DeleteContents();
	void ReadFromArchive(CArchive& ar, UINT nLen);
	void WriteToArchive(CArchive& ar);
	virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo);

	static __declspec(dllimport) const UINT nMaxSize;
		

protected:

	int m_nTabStops;            
#line 775 "C:\\MSDEV\\MFC\\include\\afxext.h"
	LPTSTR m_pShadowBuffer;     
	UINT m_nShadowSize;

	CUIntArray m_aPageStart;    
	HFONT m_hPrinterFont;       
	HFONT m_hMirrorFont;        

	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	
	virtual BOOL OnPreparePrinting(CPrintInfo* pInfo);
	virtual void OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnPrint(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnEndPrinting(CDC* pDC, CPrintInfo* pInfo = 0);
	BOOL PaginateTo(CDC* pDC, CPrintInfo* pInfo);

	
	void OnEditFindReplace(BOOL bFindOnly);
	BOOL InitializeReplace();
	BOOL SameAsSelected(LPCTSTR lpszCompare, BOOL bCase);

	
	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);

	
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 LRESULT OnSetFont(WPARAM wParam, LPARAM lParam);
	 void OnUpdateNeedSel(CCmdUI* pCmdUI);
	 void OnUpdateNeedClip(CCmdUI* pCmdUI);
	 void OnUpdateNeedText(CCmdUI* pCmdUI);
	 void OnUpdateNeedFind(CCmdUI* pCmdUI);
	 void OnUpdateEditUndo(CCmdUI* pCmdUI);
	 BOOL OnEditChange();
	 void OnEditCut();
	 void OnEditCopy();
	 void OnEditPaste();
	 void OnEditClear();
	 void OnEditUndo();
	 void OnEditSelectAll();
	 void OnEditFind();
	 void OnEditReplace();
	 void OnEditRepeat();
	 LRESULT OnFindReplaceCmd(WPARAM wParam, LPARAM lParam);
	 void OnDestroy();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CMetaFileDC : public CDC
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCMetaFileDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CMetaFileDC();
	BOOL Create(LPCTSTR lpszFilename = 0);

	BOOL CreateEnhanced(CDC* pDCRef, LPCTSTR lpszFileName,
		LPCRECT lpBounds, LPCTSTR lpszDescription);
#line 838 "C:\\MSDEV\\MFC\\include\\afxext.h"


	HMETAFILE Close();

	HENHMETAFILE CloseEnhanced();
#line 844 "C:\\MSDEV\\MFC\\include\\afxext.h"


public:
	virtual void SetAttribDC(HDC hDC);  

protected:
	virtual void SetOutputDC(HDC hDC);  
	virtual void ReleaseOutputDC();     

public:
	virtual ~CMetaFileDC();


	virtual int GetClipBox(LPRECT lpRect) const;
	virtual BOOL PtVisible(int x, int y) const;
			BOOL PtVisible(POINT point) const;
	virtual BOOL RectVisible(LPCRECT lpRect) const;


	virtual BOOL TextOutA(int x, int y, LPCTSTR lpszString, int nCount);
			BOOL TextOutA(int x, int y, const CString& str);
	virtual BOOL ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
				LPCTSTR lpszString, UINT nCount, LPINT lpDxWidths);
			BOOL ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
				const CString& str, LPINT lpDxWidths);
	virtual CSize TabbedTextOutA(int x, int y, LPCTSTR lpszString, int nCount,
				int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin);
			CSize TabbedTextOutA(int x, int y, const CString& str,
				int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin);
	virtual int DrawTextA(LPCTSTR lpszString, int nCount, LPRECT lpRect,
				UINT nFormat);
			int DrawTextA(const CString& str, LPRECT lpRect, UINT nFormat);


	virtual int Escape(int nEscape, int nCount, LPCSTR lpszInData, LPVOID lpOutData);


	virtual CPoint SetViewportOrg(int x, int y);
			CPoint SetViewportOrg(POINT point);
	virtual CPoint OffsetViewportOrg(int nWidth, int nHeight);
	virtual CSize SetViewportExt(int x, int y);
			CSize SetViewportExt(SIZE size);
	virtual CSize ScaleViewportExt(int xNum, int xDenom, int yNum, int yDenom);

protected:
	void AdjustCP(int cx);
};




class CRectTracker
{
public:

	CRectTracker();
	CRectTracker(LPCRECT lpSrcRect, UINT nStyle);


	enum StyleFlags
	{
		solidLine = 1, dottedLine = 2, hatchedBorder = 4,
		resizeInside = 8, resizeOutside = 16, hatchInside = 32,
	};


	enum TrackerHit
	{
		hitNothing = -1,
		hitTopLeft = 0, hitTopRight = 1, hitBottomRight = 2, hitBottomLeft = 3,
		hitTop = 4, hitRight = 5, hitBottom = 6, hitLeft = 7, hitMiddle = 8
	};


	UINT m_nStyle;      
	CRect m_rect;       
	CSize m_sizeMin;    
	int m_nHandleSize;  


	void Draw(CDC* pDC) const;
	void GetTrueRect(LPRECT lpTrueRect) const;
	BOOL SetCursor(CWnd* pWnd, UINT nHitTest) const;
	BOOL Track(CWnd* pWnd, CPoint point, BOOL bAllowInvert = 0,
		CWnd* pWndClipTo = 0);
	BOOL TrackRubberBand(CWnd* pWnd, CPoint point, BOOL bAllowInvert = 1);
	int HitTest(CPoint point) const;
	int NormalizeHit(int nHandle) const;


	virtual void DrawTrackerRect(LPCRECT lpRect, CWnd* pWndClipTo,
		CDC* pDC, CWnd* pWnd);
	virtual void AdjustRect(int nHandle, LPRECT lpRect);
	virtual void OnChangedRect(const CRect& rectOld);
	virtual UINT GetHandleMask() const;


public:
	virtual ~CRectTracker();

protected:
	BOOL m_bAllowInvert;    
	CRect m_rectLast;
	CSize m_sizeLast;
	BOOL m_bErase;          
	BOOL m_bFinalErase;     

	
	int HitTestHandles(CPoint point) const;
	void GetHandleRect(int nHandle, CRect* pHandleRect) const;
	void GetModifyPointers(int nHandle, int**ppx, int**ppy, int* px, int*py);
	virtual int GetHandleSize(LPCRECT lpRect = 0) const;
	BOOL TrackHandle(int nHandle, CWnd* pWnd, CPoint point, CWnd* pWndClipTo);
	void Construct();
};




struct CPrintInfo 
{
	CPrintInfo();
	~CPrintInfo();

	CPrintDialog* m_pPD;     

	BOOL m_bDocObject;       
	BOOL m_bPreview;         
	BOOL m_bDirect;          
	BOOL m_bContinuePrinting;
	UINT m_nCurPage;         
	UINT m_nNumPreviewPages; 
	CString m_strPageDesc;   
	LPVOID m_lpUserData;     
	CRect m_rectDraw;        

	
	UINT m_nOffsetPage;      
	DWORD m_dwFlags;         

	void SetMinPage(UINT nMinPage);
	void SetMaxPage(UINT nMaxPage);
	UINT GetMinPage() const;
	UINT GetMaxPage() const;
	UINT GetFromPage() const;
	UINT GetToPage() const;
	UINT GetOffsetPage() const;
};

struct CPrintPreviewState   
{
	UINT nIDMainPane;          
	HMENU hMenu;               
	DWORD dwStates;            
	CView* pViewActiveOld;     
	BOOL (__stdcall* lpfnCloseProc)(CFrameWnd* pFrameWnd);
	HACCEL hAccelTable;       


	CPrintPreviewState();
};

struct CCreateContext   
	
{
	
	CRuntimeClass* m_pNewViewClass; 
	CDocument* m_pCurrentDoc;

	
	CDocTemplate* m_pNewDocTemplate;

	
	CView* m_pLastView;
	CFrameWnd* m_pCurrentFrame;


	CCreateContext();
};





#pragma pack(pop)
#line 1030 "C:\\MSDEV\\MFC\\include\\afxext.h"










#pragma component(minrebuild, on)
#line 1042 "C:\\MSDEV\\MFC\\include\\afxext.h"

#pragma component(mintypeinfo, off)
#line 1045 "C:\\MSDEV\\MFC\\include\\afxext.h"

#line 1047 "C:\\MSDEV\\MFC\\include\\afxext.h"


#line 8 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxdisp.h"























	#line 1 "C:\\MSDEV\\INCLUDE\\objbase.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"





extern "C" {
#line 25 "C:\\MSDEV\\INCLUDE\\rpc.h"








#line 34 "C:\\MSDEV\\INCLUDE\\rpc.h"

typedef void * I_RPC_HANDLE;
typedef long RPC_STATUS;














#line 52 "C:\\MSDEV\\INCLUDE\\rpc.h"





#line 58 "C:\\MSDEV\\INCLUDE\\rpc.h"

#line 1 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


















extern "C" {
#line 21 "C:\\MSDEV\\INCLUDE\\rpcdce.h"









typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;















typedef GUID UUID;


#line 51 "C:\\MSDEV\\INCLUDE\\rpcdce.h"
#line 52 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;


#line 61 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

typedef struct _UUID_VECTOR
{
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;


#line 70 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

typedef void  * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 82 "C:\\MSDEV\\INCLUDE\\rpcdce.h"
















typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;





#line 115 "C:\\MSDEV\\INCLUDE\\rpcdce.h"









#line 125 "C:\\MSDEV\\INCLUDE\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
     UUID  * ObjectUuid,
     UUID  * TypeUuid,
     RPC_STATUS  * Status
    );

typedef RPC_STATUS
RPC_IF_CALLBACK_FN (
     RPC_IF_HANDLE  InterfaceUuid,
     void *Context
    ) ;



typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;


RPC_STATUS __stdcall
RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );


RPC_STATUS __stdcall
RpcBindingFree (
      RPC_BINDING_HANDLE  * Binding
    );





RPC_STATUS __stdcall
RpcBindingFromStringBindingA (
     unsigned char  * StringBinding,
     RPC_BINDING_HANDLE  * Binding
    );

RPC_STATUS __stdcall
RpcBindingFromStringBindingW (
     unsigned short  * StringBinding,
     RPC_BINDING_HANDLE  * Binding
    );





#line 197 "C:\\MSDEV\\INCLUDE\\rpcdce.h"









#line 207 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcBindingInqObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


RPC_STATUS __stdcall
RpcBindingReset (
     RPC_BINDING_HANDLE Binding
    );





RPC_STATUS __stdcall
RpcBindingSetObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


RPC_STATUS __stdcall
RpcMgmtInqDefaultProtectLevel(
      unsigned long AuthnSvc,
     unsigned long  *AuthnLevel
    );





RPC_STATUS __stdcall
RpcBindingToStringBindingA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * StringBinding
    );

RPC_STATUS __stdcall
RpcBindingToStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * StringBinding
    );





#line 259 "C:\\MSDEV\\INCLUDE\\rpcdce.h"









#line 269 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcBindingVectorFree (
      RPC_BINDING_VECTOR  *  * BindingVector
    );





RPC_STATUS __stdcall
RpcStringBindingComposeA (
     unsigned char  * ObjUuid ,
     unsigned char  * Protseq ,
     unsigned char  * NetworkAddr ,
     unsigned char  * Endpoint ,
     unsigned char  * Options ,
     unsigned char  *  * StringBinding 
    );

RPC_STATUS __stdcall
RpcStringBindingComposeW (
     unsigned short  * ObjUuid ,
     unsigned short  * Protseq ,
     unsigned short  * NetworkAddr ,
     unsigned short  * Endpoint ,
     unsigned short  * Options ,
     unsigned short  *  * StringBinding 
    );





#line 305 "C:\\MSDEV\\INCLUDE\\rpcdce.h"













#line 319 "C:\\MSDEV\\INCLUDE\\rpcdce.h"





RPC_STATUS __stdcall
RpcStringBindingParseA (
     unsigned char  * StringBinding,
     unsigned char  *  * ObjUuid ,
     unsigned char  *  * Protseq ,
     unsigned char  *  * NetworkAddr ,
     unsigned char  *  * Endpoint ,
     unsigned char  *  * NetworkOptions 
    );

RPC_STATUS __stdcall
RpcStringBindingParseW (
     unsigned short  * StringBinding,
     unsigned short  *  * ObjUuid ,
     unsigned short  *  * Protseq ,
     unsigned short  *  * NetworkAddr ,
     unsigned short  *  * Endpoint ,
     unsigned short  *  * NetworkOptions 
    );





#line 349 "C:\\MSDEV\\INCLUDE\\rpcdce.h"













#line 363 "C:\\MSDEV\\INCLUDE\\rpcdce.h"





RPC_STATUS __stdcall
RpcStringFreeA (
      unsigned char  *  * String
    );

RPC_STATUS __stdcall
RpcStringFreeW (
      unsigned short  *  * String
    );





#line 383 "C:\\MSDEV\\INCLUDE\\rpcdce.h"








#line 392 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcIfInqId (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_IF_ID  * RpcIfId
    );





RPC_STATUS __stdcall
RpcNetworkIsProtseqValidA (
     unsigned char  * Protseq
    );

RPC_STATUS __stdcall
RpcNetworkIsProtseqValidW (
     unsigned short  * Protseq
    );





#line 419 "C:\\MSDEV\\INCLUDE\\rpcdce.h"








#line 428 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcMgmtInqComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Timeout
    );


RPC_STATUS __stdcall
RpcMgmtSetComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int Timeout
    );


RPC_STATUS __stdcall
RpcMgmtSetCancelTimeout(
    long Timeout
    );






RPC_STATUS __stdcall
RpcNetworkInqProtseqsA (
     RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

RPC_STATUS __stdcall
RpcNetworkInqProtseqsW (
     RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 469 "C:\\MSDEV\\INCLUDE\\rpcdce.h"








#line 478 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcObjectInqType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );


RPC_STATUS __stdcall
RpcObjectSetInqFn (
     RPC_OBJECT_INQ_FN  * InquiryFn
    );


RPC_STATUS __stdcall
RpcObjectSetType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );





RPC_STATUS __stdcall
RpcProtseqVectorFreeA (
      RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

RPC_STATUS __stdcall
RpcProtseqVectorFreeW (
      RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 518 "C:\\MSDEV\\INCLUDE\\rpcdce.h"








#line 527 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcServerInqBindings (
     RPC_BINDING_VECTOR  *  * BindingVector
    );


RPC_STATUS __stdcall
RpcServerInqIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     void  *  * MgrEpv
    );


RPC_STATUS __stdcall
RpcServerListen (
     unsigned int MinimumCallThreads,
     unsigned int MaxCalls,
     unsigned int DontWait
    );


RPC_STATUS __stdcall
RpcServerRegisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid ,
     void  * MgrEpv 
    );


RPC_STATUS __stdcall
RpcServerRegisterIfEx (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid,
     void  * MgrEpv,
     unsigned int Flags,
     unsigned int MaxCalls,
     RPC_IF_CALLBACK_FN  *IfCallback
    );


RPC_STATUS __stdcall
RpcServerUnregisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     unsigned int WaitForCallsToComplete
    );


RPC_STATUS __stdcall
RpcServerUseAllProtseqs (
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );


RPC_STATUS __stdcall
RpcServerUseAllProtseqsEx (
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );


RPC_STATUS __stdcall
RpcServerUseAllProtseqsIf (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );


RPC_STATUS __stdcall
RpcServerUseAllProtseqsIfEx (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );






RPC_STATUS __stdcall
RpcServerUseProtseqA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );

RPC_STATUS __stdcall
RpcServerUseProtseqExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

RPC_STATUS __stdcall
RpcServerUseProtseqW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );

RPC_STATUS __stdcall
RpcServerUseProtseqExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 651 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


















#line 670 "C:\\MSDEV\\INCLUDE\\rpcdce.h"





RPC_STATUS __stdcall
RpcServerUseProtseqEpA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor 
    );

RPC_STATUS __stdcall
RpcServerUseProtseqEpExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

RPC_STATUS __stdcall
RpcServerUseProtseqEpW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor 
    );

RPC_STATUS __stdcall
RpcServerUseProtseqEpExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 716 "C:\\MSDEV\\INCLUDE\\rpcdce.h"




















#line 737 "C:\\MSDEV\\INCLUDE\\rpcdce.h"





RPC_STATUS __stdcall
RpcServerUseProtseqIfA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );

RPC_STATUS __stdcall
RpcServerUseProtseqIfExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

RPC_STATUS __stdcall
RpcServerUseProtseqIfW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );

RPC_STATUS __stdcall
RpcServerUseProtseqIfExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 783 "C:\\MSDEV\\INCLUDE\\rpcdce.h"




















#line 804 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcMgmtStatsVectorFree (
     RPC_STATS_VECTOR ** StatsVector
    );


RPC_STATUS __stdcall
RpcMgmtInqStats (
     RPC_BINDING_HANDLE Binding,
     RPC_STATS_VECTOR ** Statistics
    );


RPC_STATUS __stdcall
RpcMgmtIsServerListening (
     RPC_BINDING_HANDLE Binding
    );


RPC_STATUS __stdcall
RpcMgmtStopServerListening (
     RPC_BINDING_HANDLE Binding
    );


RPC_STATUS __stdcall
RpcMgmtWaitServerListen (
    void
    );


RPC_STATUS __stdcall
RpcMgmtSetServerStackSize (
     unsigned long ThreadStackSize
    );


void __stdcall
RpcSsDontSerializeContext (
    void
    );


RPC_STATUS __stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

RPC_STATUS __stdcall
RpcMgmtInqIfIds (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_ID_VECTOR  *  * IfIdVector
    );

RPC_STATUS __stdcall
RpcIfIdVectorFree (
      RPC_IF_ID_VECTOR  *  * IfIdVector
    );



RPC_STATUS __stdcall
RpcMgmtInqServerPrincNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long AuthnSvc,
     unsigned char  *  * ServerPrincName
    );

RPC_STATUS __stdcall
RpcMgmtInqServerPrincNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long AuthnSvc,
     unsigned short  *  * ServerPrincName
    );





#line 886 "C:\\MSDEV\\INCLUDE\\rpcdce.h"










#line 897 "C:\\MSDEV\\INCLUDE\\rpcdce.h"



RPC_STATUS __stdcall
RpcServerInqDefaultPrincNameA (
     unsigned long AuthnSvc,
     unsigned char  *  * PrincName
    );

RPC_STATUS __stdcall
RpcServerInqDefaultPrincNameW (
     unsigned long AuthnSvc,
     unsigned short  *  * PrincName
    );





#line 917 "C:\\MSDEV\\INCLUDE\\rpcdce.h"









#line 927 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcEpResolveBinding (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_HANDLE IfSpec
    );





RPC_STATUS __stdcall
RpcNsBindingInqEntryNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned char  *  * EntryName
    );

RPC_STATUS __stdcall
RpcNsBindingInqEntryNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned short  *  * EntryName
    );





#line 958 "C:\\MSDEV\\INCLUDE\\rpcdce.h"










#line 969 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;





































typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;








#line 1024 "C:\\MSDEV\\INCLUDE\\rpcdce.h"





typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
  unsigned short  *User;
  unsigned long UserLength;
  unsigned short  *Domain;
  unsigned long DomainLength;
  unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
  unsigned char  *User;
  unsigned long UserLength;
  unsigned char  *Domain;
  unsigned long DomainLength;
  unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;










#line 1059 "C:\\MSDEV\\INCLUDE\\rpcdce.h"
#line 1060 "C:\\MSDEV\\INCLUDE\\rpcdce.h"







RPC_STATUS __stdcall
RpcBindingInqAuthClientA (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc 
    );

RPC_STATUS __stdcall
RpcBindingInqAuthClientW (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc 
    );

RPC_STATUS __stdcall
RpcBindingInqAuthInfoA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc 
    );

RPC_STATUS __stdcall
RpcBindingInqAuthInfoW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc 
    );

RPC_STATUS __stdcall
RpcBindingSetAuthInfoA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc
    );

RPC_STATUS __stdcall
RpcBindingSetAuthInfoExA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc,
     RPC_SECURITY_QOS *SecurityQos 
    );

RPC_STATUS __stdcall
RpcBindingSetAuthInfoW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc
    );

RPC_STATUS __stdcall
RpcBindingSetAuthInfoExW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc, 
     RPC_SECURITY_QOS *SecurityQOS
    );

RPC_STATUS __stdcall
RpcBindingInqAuthInfoExA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc, 
      unsigned long RpcQosVersion,
     RPC_SECURITY_QOS *SecurityQOS
    );

RPC_STATUS __stdcall
RpcBindingInqAuthInfoExW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc ,
      unsigned long RpcQosVersion,
     RPC_SECURITY_QOS *SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
     void  * Arg,
     unsigned short  * ServerPrincName,
     unsigned long KeyVer,
     void  *  * Key,
     RPC_STATUS  * Status
    );

RPC_STATUS __stdcall
RpcServerRegisterAuthInfoA (
     unsigned char  * ServerPrincName,
     unsigned long AuthnSvc,
     RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
     void  * Arg 
    );

RPC_STATUS __stdcall
RpcServerRegisterAuthInfoW (
     unsigned short  * ServerPrincName,
     unsigned long AuthnSvc,
     RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
     void  * Arg 
    );















#line 1213 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


















































#line 1264 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

typedef struct {
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;

RPC_STATUS __stdcall
RpcBindingServerFromClient (
     RPC_BINDING_HANDLE ClientBinding,
     RPC_BINDING_HANDLE  * ServerBinding
    );

void __stdcall
RpcRaiseException (
     RPC_STATUS exception
    );

RPC_STATUS __stdcall
RpcTestCancel(
    );

RPC_STATUS __stdcall
RpcCancelThread(
     void * Thread
    );


RPC_STATUS __stdcall
UuidCreate (
     UUID  * Uuid
    );




RPC_STATUS __stdcall
UuidToStringA (
     UUID  * Uuid,
     unsigned char  *  * StringUuid
    );


RPC_STATUS __stdcall
UuidFromStringA (
     unsigned char  * StringUuid,
     UUID  * Uuid
    );


RPC_STATUS __stdcall
UuidToStringW (
     UUID  * Uuid,
     unsigned short  *  * StringUuid
    );


RPC_STATUS __stdcall
UuidFromStringW (
     unsigned short  * StringUuid,
     UUID  * Uuid
    );







#line 1335 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

















#line 1353 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

signed int __stdcall
UuidCompare (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

RPC_STATUS __stdcall
UuidCreateNil (
     UUID  * NilUuid
    );

int __stdcall
UuidEqual (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

unsigned short __stdcall
UuidHash (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );

int __stdcall
UuidIsNil (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );



RPC_STATUS __stdcall
RpcEpRegisterNoReplaceA (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned char * Annotation
    );

RPC_STATUS __stdcall
RpcEpRegisterNoReplaceW (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned short  * Annotation
    );

RPC_STATUS __stdcall
RpcEpRegisterA (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned char * Annotation
    );

RPC_STATUS __stdcall
RpcEpRegisterW (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned short * Annotation
    );







#line 1426 "C:\\MSDEV\\INCLUDE\\rpcdce.h"



















#line 1446 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


RPC_STATUS __stdcall
RpcEpUnregister(
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector
    );



RPC_STATUS __stdcall
DceErrorInqTextA (
     RPC_STATUS RpcStatus,
     unsigned char  * ErrorText
    );

RPC_STATUS __stdcall
DceErrorInqTextW (
     RPC_STATUS RpcStatus,
     unsigned short  * ErrorText
    );





#line 1474 "C:\\MSDEV\\INCLUDE\\rpcdce.h"









#line 1484 "C:\\MSDEV\\INCLUDE\\rpcdce.h"



typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;












RPC_STATUS __stdcall
RpcMgmtEpEltInqBegin (
     RPC_BINDING_HANDLE EpBinding ,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption ,
     UUID  * ObjectUuid ,
     RPC_EP_INQ_HANDLE  * InquiryContext
    );

RPC_STATUS __stdcall
RpcMgmtEpEltInqDone (
      RPC_EP_INQ_HANDLE  * InquiryContext
    );



RPC_STATUS __stdcall
RpcMgmtEpEltInqNextA (
     RPC_EP_INQ_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE  * Binding ,
     UUID  * ObjectUuid ,
     unsigned char  *  * Annotation 
    );

RPC_STATUS __stdcall
RpcMgmtEpEltInqNextW (
     RPC_EP_INQ_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE  * Binding ,
     UUID  * ObjectUuid ,
     unsigned short  *  * Annotation 
    );





#line 1540 "C:\\MSDEV\\INCLUDE\\rpcdce.h"











#line 1552 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

RPC_STATUS __stdcall
RpcMgmtEpUnregister (
     RPC_BINDING_HANDLE EpBinding ,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid 
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
     RPC_BINDING_HANDLE ClientBinding,
     unsigned long RequestedMgmtOperation,
     RPC_STATUS  * Status
    );







RPC_STATUS __stdcall
RpcMgmtSetAuthorizationFn (
     RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );





RPC_STATUS __stdcall
RpcMgmtInqParameter (
     unsigned Parameter,
     unsigned long  * Value
    );

RPC_STATUS __stdcall
RpcMgmtSetParameter (
     unsigned Parameter,
     unsigned long Value
    );

RPC_STATUS __stdcall
RpcMgmtBindingInqParameter (
     RPC_BINDING_HANDLE Handle,
     unsigned Parameter,
     unsigned long  * Value
    );

RPC_STATUS __stdcall
RpcMgmtBindingSetParameter (
     RPC_BINDING_HANDLE Handle,
     unsigned Parameter,
     unsigned long Value
    );




#line 1 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"























#line 25 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"


extern "C" {
#line 29 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"

typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER,  * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;


typedef RPC_STATUS __stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);





















#line 84 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"



#line 88 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"

typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
      PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    int Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;








typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    unsigned long Reserved;
    void const  * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;

RPC_STATUS __stdcall
I_RpcGetBuffer (
      RPC_MESSAGE  * Message
    );

RPC_STATUS __stdcall
I_RpcSendReceive (
      RPC_MESSAGE  * Message
    );

RPC_STATUS __stdcall
I_RpcFreeBuffer (
      RPC_MESSAGE  * Message
    );

RPC_STATUS __stdcall
I_RpcSend (
      PRPC_MESSAGE Message
    ) ;

RPC_STATUS __stdcall
I_RpcReceive (
      PRPC_MESSAGE Message,
     unsigned int Size
    ) ;

RPC_STATUS __stdcall
I_RpcFreePipeBuffer (
      RPC_MESSAGE  * Message
    ) ;

RPC_STATUS __stdcall
I_RpcReallocPipeBuffer (
     PRPC_MESSAGE Message,
     unsigned int NewSize
    ) ;

typedef void * I_RPC_MUTEX;

void __stdcall
I_RpcRequestMutex (
      I_RPC_MUTEX * Mutex
    );

void __stdcall
I_RpcClearMutex (
     I_RPC_MUTEX Mutex
    );

void __stdcall
I_RpcDeleteMutex (
     I_RPC_MUTEX Mutex
    );

void  * __stdcall
I_RpcAllocate (
     unsigned int Size
    );

void __stdcall
I_RpcFree (
     void  * Object
    );

void __stdcall
I_RpcPauseExecution (
     unsigned long Milliseconds
    );

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
    void  * AssociationContext
    );

RPC_STATUS __stdcall
I_RpcMonitorAssociation (
     RPC_BINDING_HANDLE Handle,
     PRPC_RUNDOWN RundownRoutine,
     void * Context
    );

RPC_STATUS __stdcall
I_RpcStopMonitorAssociation (
     RPC_BINDING_HANDLE Handle
    );

RPC_BINDING_HANDLE __stdcall
I_RpcGetCurrentCallHandle(
    void
    );

RPC_STATUS __stdcall
I_RpcGetAssociationContext (
     void  *  * AssociationContext
    );

RPC_STATUS __stdcall
I_RpcSetAssociationContext (
     void  * AssociationContext
    );



RPC_STATUS __stdcall
I_RpcNsBindingSetEntryName (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned short  * EntryName
    );










#line 261 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"



RPC_STATUS __stdcall
I_RpcBindingInqDynamicEndpoint (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * DynamicEndpoint
    );









#line 279 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"






RPC_STATUS __stdcall
I_RpcBindingInqTransportType (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

RPC_STATUS __stdcall
I_RpcIfInqTransferSyntaxes (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_TRANSFER_SYNTAX  * TransferSyntaxes,
     unsigned int TransferSyntaxSize,
     unsigned int  * TransferSyntaxCount
    );

RPC_STATUS __stdcall
I_UuidCreate (
     UUID  * Uuid
    );

RPC_STATUS __stdcall
I_RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );

RPC_STATUS __stdcall
I_RpcBindingIsClientLocal (
     RPC_BINDING_HANDLE BindingHandle ,
     unsigned int  * ClientLocalFlag
    );

void __stdcall
I_RpcSsDontSerializeContext (
    void
    );

RPC_STATUS __stdcall
I_RpcLaunchDatagramReceiveThread(
    void  * pAddress
    );

RPC_STATUS __stdcall
I_RpcServerRegisterForwardFunction (
     RPC_FORWARD_FUNCTION  * pForwardFunction
    );


RPC_STATUS __stdcall
I_RpcConnectionInqSockBuffSize(
   unsigned long  * RecvBuffSize,
   unsigned long  * SendBuffSize
  );

RPC_STATUS __stdcall
I_RpcConnectionSetSockBuffSize(
    unsigned long RecvBuffSize,
    unsigned long SendBuffSize
   );


















































RPC_STATUS __stdcall
I_RpcServerInqTransportType(
     unsigned int  * Type
    ) ;


}
#line 408 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"





#line 414 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"

#line 416 "C:\\MSDEV\\INCLUDE\\rpcdcep.h"
#line 1613 "C:\\MSDEV\\INCLUDE\\rpcdce.h"


}
#line 1617 "C:\\MSDEV\\INCLUDE\\rpcdce.h"

#line 1619 "C:\\MSDEV\\INCLUDE\\rpcdce.h"
#line 60 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"


















typedef void  * RPC_NS_HANDLE;














RPC_STATUS __stdcall
RpcNsBindingExportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     RPC_BINDING_VECTOR  * BindingVec ,
     UUID_VECTOR  * ObjectUuidVec 
    );


RPC_STATUS __stdcall
RpcNsBindingUnexportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR  * ObjectUuidVec 
    );



RPC_STATUS __stdcall
RpcNsBindingExportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     RPC_BINDING_VECTOR  * BindingVec ,
     UUID_VECTOR  * ObjectUuidVec 
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR  * ObjectUuidVec 
    );

#line 72 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"



RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     unsigned long BindingMaxCount ,
     RPC_NS_HANDLE  * LookupContext
    );



RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     unsigned long BindingMaxCount ,
     RPC_NS_HANDLE  * LookupContext
    );
#line 97 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"

RPC_STATUS __stdcall
RpcNsBindingLookupNext(
      RPC_NS_HANDLE LookupContext,
     RPC_BINDING_VECTOR  *  * BindingVec
    );

RPC_STATUS __stdcall
RpcNsBindingLookupDone(
      RPC_NS_HANDLE  * LookupContext
    );



RPC_STATUS __stdcall
RpcNsGroupDeleteA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName
    );

RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     RPC_NS_HANDLE  * InquiryContext
    );

RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
      RPC_NS_HANDLE InquiryContext,
     unsigned char  *  * MemberName
    );



RPC_STATUS __stdcall
RpcNsGroupDeleteW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName
    );

RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     RPC_NS_HANDLE  * InquiryContext
    );

RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
      RPC_NS_HANDLE InquiryContext,
     unsigned short  *  * MemberName
    );

#line 186 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"

RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



RPC_STATUS __stdcall
RpcNsProfileDeleteA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName
    );

RPC_STATUS __stdcall
RpcNsProfileEltAddA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName,
     unsigned long Priority,
     unsigned char  * Annotation 
    );

RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName ,
     RPC_NS_HANDLE  * InquiryContext
    );

RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
     RPC_NS_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     unsigned char  *  * MemberName,
     unsigned long  * Priority,
     unsigned char  *  * Annotation
    );



RPC_STATUS __stdcall
RpcNsProfileDeleteW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName
    );

RPC_STATUS __stdcall
RpcNsProfileEltAddW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName,
     unsigned long Priority,
     unsigned short  * Annotation 
    );

RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName ,
     RPC_NS_HANDLE  * InquiryContext
    );

RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
     RPC_NS_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     unsigned short  *  * MemberName,
     unsigned long  * Priority,
     unsigned short  *  * Annotation
    );

#line 291 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"

RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_NS_HANDLE  * InquiryContext
    );



RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_NS_HANDLE  * InquiryContext
    );

#line 316 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"

RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
      RPC_NS_HANDLE InquiryContext,
     UUID  * ObjUuid
    );

RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     unsigned char  *  * ExpandedName
    );

RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     UUID_VECTOR  * ObjectUuidVec 
    );

RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName
    );

RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName
    );

RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_ID_VECTOR  *  * IfIdVec
    );

RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
     RPC_NS_HANDLE NsHandle,
     unsigned long ExpirationAge
    );

RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
     unsigned long  * ExpirationAge
    );

RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
     unsigned long ExpirationAge
    );



RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     unsigned short  *  * ExpandedName
    );

RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     UUID_VECTOR  * ObjectUuidVec 
    );

RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName
    );

RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName
    );

RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_ID_VECTOR  *  * IfIdVec
    );

#line 419 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"



RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     RPC_NS_HANDLE  * ImportContext
    );



RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     RPC_NS_HANDLE  * ImportContext
    );

#line 443 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"

RPC_STATUS __stdcall
RpcNsBindingImportNext(
     RPC_NS_HANDLE ImportContext,
     RPC_BINDING_HANDLE   * Binding
    );

RPC_STATUS __stdcall
RpcNsBindingImportDone(
      RPC_NS_HANDLE  * ImportContext
    );

RPC_STATUS __stdcall
RpcNsBindingSelect(
      RPC_BINDING_VECTOR  * BindingVec,
     RPC_BINDING_HANDLE   * Binding
    );















































#line 508 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"

#line 510 "C:\\MSDEV\\INCLUDE\\rpcnsi.h"
#line 61 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcnterr.h"
































#line 34 "C:\\MSDEV\\INCLUDE\\rpcnterr.h"
#line 62 "C:\\MSDEV\\INCLUDE\\rpc.h"


#line 1 "C:\\MSDEV\\INCLUDE\\excpt.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\excpt.h"




































































































































































#line 65 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 1 "C:\\MSDEV\\INCLUDE\\winerror.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 66 "C:\\MSDEV\\INCLUDE\\rpc.h"




































RPC_STATUS __stdcall
RpcImpersonateClient (
     RPC_BINDING_HANDLE BindingHandle 
    );

RPC_STATUS __stdcall
RpcRevertToSelfEx (
     RPC_BINDING_HANDLE BindingHandle 
    );

RPC_STATUS __stdcall
RpcRevertToSelf (
    );

long __stdcall
I_RpcMapWin32Status (
     RPC_STATUS Status
    );


}
#line 124 "C:\\MSDEV\\INCLUDE\\rpc.h"

#line 126 "C:\\MSDEV\\INCLUDE\\rpc.h"

#line 13 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"




















































#line 54 "C:\\MSDEV\\INCLUDE\\rpcndr.h"



#line 58 "C:\\MSDEV\\INCLUDE\\rpcndr.h"

#line 1 "C:\\MSDEV\\INCLUDE\\rpcnsip.h"



















extern "C" {
#line 22 "C:\\MSDEV\\INCLUDE\\rpcnsip.h"

typedef struct
{
   RPC_NS_HANDLE        LookupContext;
   RPC_BINDING_HANDLE   ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




RPC_STATUS __stdcall
I_RpcNsGetBuffer(
     PRPC_MESSAGE Message
    );

RPC_STATUS __stdcall
I_RpcNsSendReceive(
     PRPC_MESSAGE Message,
     RPC_BINDING_HANDLE  * Handle
    );

void __stdcall
I_RpcNsRaiseException(
     PRPC_MESSAGE Message,
     RPC_STATUS Status
    );

RPC_STATUS __stdcall
I_RpcReBindBuffer(
     PRPC_MESSAGE Message
    );

RPC_STATUS __stdcall
I_NsServerBindSearch(
    );

RPC_STATUS __stdcall
I_NsClientBindSearch(
    );

void __stdcall
I_NsClientBindDone(
    );


}
#line 71 "C:\\MSDEV\\INCLUDE\\rpcnsip.h"

#line 73 "C:\\MSDEV\\INCLUDE\\rpcnsip.h"
#line 60 "C:\\MSDEV\\INCLUDE\\rpcndr.h"


extern "C" {
#line 64 "C:\\MSDEV\\INCLUDE\\rpcndr.h"



























































#line 124 "C:\\MSDEV\\INCLUDE\\rpcndr.h"


#line 127 "C:\\MSDEV\\INCLUDE\\rpcndr.h"








#line 136 "C:\\MSDEV\\INCLUDE\\rpcndr.h"

#line 138 "C:\\MSDEV\\INCLUDE\\rpcndr.h"





#line 144 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






typedef unsigned char byte;
typedef unsigned char boolean;










#line 163 "C:\\MSDEV\\INCLUDE\\rpcndr.h"

#line 165 "C:\\MSDEV\\INCLUDE\\rpcndr.h"
























#line 190 "C:\\MSDEV\\INCLUDE\\rpcndr.h"
#line 191 "C:\\MSDEV\\INCLUDE\\rpcndr.h"











void  * __stdcall MIDL_user_allocate(size_t);
void             __stdcall MIDL_user_free( void  * );





#line 210 "C:\\MSDEV\\INCLUDE\\rpcndr.h"









#line 220 "C:\\MSDEV\\INCLUDE\\rpcndr.h"











typedef void  * NDR_CCONTEXT;

typedef struct
    {
    void  * pad[2];
    void  * userContext;
    }  * NDR_SCONTEXT;





typedef void (__stdcall  * NDR_RUNDOWN)(void  * context);

typedef struct _SCONTEXT_QUEUE {
    unsigned long   NumberOfObjects;
    NDR_SCONTEXT  * ArrayOfObjects;
    } SCONTEXT_QUEUE,  * PSCONTEXT_QUEUE;

RPC_BINDING_HANDLE __stdcall
NDRCContextBinding (
     NDR_CCONTEXT CContext
    );

void __stdcall
NDRCContextMarshall (
          NDR_CCONTEXT CContext,
         void  *pBuff
        );

void __stdcall
NDRCContextUnmarshall (
         NDR_CCONTEXT  *pCContext,
          RPC_BINDING_HANDLE hBinding,
          void  *pBuff,
          unsigned long DataRepresentation
        );

void __stdcall
NDRSContextMarshall (
          NDR_SCONTEXT CContext,
         void  *pBuff,
          NDR_RUNDOWN userRunDownIn
        );

NDR_SCONTEXT __stdcall
NDRSContextUnmarshall (
      void  *pBuff,
      unsigned long DataRepresentation
    );

void __stdcall
RpcSsDestroyClientContext (
     void  *  * ContextHandle
    );


















































































#line 369 "C:\\MSDEV\\INCLUDE\\rpcndr.h"





void __stdcall
NDRcopy (
     void  *pTarget,
     void  *pSource,
     unsigned int size
    );

size_t __stdcall
MIDL_wchar_strlen (
     wchar_t  *   s
    );

void __stdcall
MIDL_wchar_strcpy (
     void  *     t,
     wchar_t  *   s
    );

void __stdcall
char_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned char  *                 Target
    );

void __stdcall
char_array_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     unsigned char  *                 Target
    );

void __stdcall
short_from_ndr (
      PRPC_MESSAGE                           source,
     unsigned short  *                target
    );

void __stdcall
short_array_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     unsigned short  *                Target
    );

void __stdcall
short_from_ndr_temp (
      unsigned char  *  *  source,
     unsigned short  *                target,
     unsigned long                              format
    );

void __stdcall
long_from_ndr (
      PRPC_MESSAGE                           source,
     unsigned long  *                 target
    );

void __stdcall
long_array_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     unsigned long  *                 Target
    );

void __stdcall
long_from_ndr_temp (
      unsigned char  *  *  source,
     unsigned long  *                 target,
     unsigned long                              format
    );

void __stdcall
enum_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned int  *                  Target
    );

void __stdcall
float_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     void  *                          Target
    );

void __stdcall
float_array_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     void  *                          Target
    );

void __stdcall
double_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     void  *                          Target
    );

void __stdcall
double_array_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     void  *                          Target
    );

void __stdcall
hyper_from_ndr (
      PRPC_MESSAGE                           source,
        __int64  *                      target
    );

void __stdcall
hyper_array_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
              __int64  *                Target
    );

void __stdcall
hyper_from_ndr_temp (
      unsigned char  *  *  source,
                 __int64  *             target,
       unsigned   long                          format
    );

void __stdcall
data_from_ndr (
    PRPC_MESSAGE                                  source,
    void  *                              target,
    char  *                              format,
    unsigned char                                 MscPak
    );

void __stdcall
data_into_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

void __stdcall
tree_into_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

void __stdcall
data_size_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

void __stdcall
tree_size_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

void __stdcall
tree_peek_ndr (
    PRPC_MESSAGE                                  source,
    unsigned char  *  *         buffer,
    char  *                              format,
    unsigned char                                 MscPak
    );

void  * __stdcall
midl_allocate (
    size_t      size
    );





typedef unsigned long error_status_t;

























































#line 619 "C:\\MSDEV\\INCLUDE\\rpcndr.h"



#line 623 "C:\\MSDEV\\INCLUDE\\rpcndr.h"



















struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char  * RPC_BUFPTR;
typedef unsigned long             RPC_LENGTH;


typedef void (__stdcall  * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE  * );

typedef const unsigned char  * PFORMAT_STRING;




typedef struct
    {
    long                            Dimension;

    
    unsigned long  *       BufferConformanceMark;
    unsigned long  *       BufferVarianceMark;

    
    unsigned long  *       MaxCountArray;
    unsigned long  *       OffsetArray;
    unsigned long  *       ActualCountArray;
    } ARRAY_INFO,  *PARRAY_INFO;





typedef void
( __stdcall * NDR_PIPE_PULL_RTN)(
        char           *  state,
        void           *  buf,
        unsigned long              esize,
        unsigned long  *  ecount );

typedef void
( __stdcall * NDR_PIPE_PUSH_RTN)(
        char           *  state,
        void           *  buf,
        unsigned long              ecount );

typedef void
( __stdcall * NDR_PIPE_ALLOC_RTN)(
        char              *  state,
        unsigned long                 bsize,
        void  *  *  buf,
        unsigned long     *  bcount );


typedef struct  _GENERIC_PIPE_TYPE
    {
    NDR_PIPE_PULL_RTN       pfnPull;
    NDR_PIPE_PUSH_RTN       pfnPush;
    NDR_PIPE_ALLOC_RTN      pfnAlloc;
    char   *       pState;
    } GENERIC_PIPE_TYPE;


typedef struct {
    int                         CurrentState;
    int                         ElemsInChunk;
    int                         ElemAlign;          
    int                         ElemWireSize;         
    int                         ElemMemSize;
    int                         PartialBufferSize;
    unsigned char  *   PartialElem;
    int                         PartialElemSize;
    int                         PartialOffset;
    int                         EndOfPipe;
    } NDR_PIPE_STATE;

typedef struct  _PIPE_MESSAGE
    {
    unsigned short                  Signature;
    unsigned short                  PipeId;
    GENERIC_PIPE_TYPE   *  pPipeType;
    PFORMAT_STRING                  pTypeFormat;
    unsigned short                  PipeStatus;
    unsigned short                  PipeFlags;
    struct _MIDL_STUB_MESSAGE   *  pStubMsg;
    } NDR_PIPE_MESSAGE,  * PNDR_PIPE_MESSAGE;

typedef struct  _NDR_PIPE_DESC
    {
    NDR_PIPE_MESSAGE   *   pPipeMsg;
    short                           CurrentPipe;
    short                           InPipes;
    short                           OutPipes;
    short                           TotalPipes;
    short                           PipeVersion;
    short                           Flags;
    unsigned char   *      DispatchBuffer;
    unsigned char   *      LastPartialBuffer;
    unsigned long                   LastPartialSize;
    unsigned char   *      BufferSave;
    unsigned long                   LengthSave;
    NDR_PIPE_STATE                  RuntimeState;
    } NDR_PIPE_DESC,  * PNDR_PIPE_DESC;






#line 1 "C:\\MSDEV\\INCLUDE\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#pragma pack(4)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack4.h"
#line 752 "C:\\MSDEV\\INCLUDE\\rpcndr.h"
#line 753 "C:\\MSDEV\\INCLUDE\\rpcndr.h"

typedef struct _MIDL_STUB_MESSAGE
    {
    
    PRPC_MESSAGE                RpcMsg;

    
    unsigned char  *   Buffer;

    



    unsigned char  *   BufferStart;
    unsigned char  *   BufferEnd;

    






    unsigned char  *   BufferMark;

    
    unsigned long               BufferLength;

    
    unsigned long               MemorySize;

    
    unsigned char  *   Memory;

    
    int                         IsClient;

    
    int                         ReuseBuffer;

    
    unsigned char  *   AllocAllNodesMemory;

    
    unsigned char  *   AllocAllNodesMemoryEnd;

    



    
    int                         IgnoreEmbeddedPointers;

    



    unsigned char  *   PointerBufferMark;

    


    unsigned char               fBufferValid;

    


    unsigned char               Unused;

    



    unsigned long               MaxCount;

    



    unsigned long               Offset;

    



    unsigned long               ActualCount;

    
    void  *    ( __stdcall * pfnAllocate)(size_t);
    void                ( __stdcall * pfnFree)(void  *);

    





    unsigned char  *       StackTop;

    



    unsigned char  *       pPresentedType;
    unsigned char  *       pTransmitType;

    







    handle_t                        SavedHandle;

    


    const struct _MIDL_STUB_DESC  *    StubDesc;

    


    struct _FULL_PTR_XLAT_TABLES  *    FullPtrXlatTables;

    unsigned long                   FullPtrRefId;

    



    int                             fCheckBounds;

    int                             fInDontFree       :1;
    int                             fDontCallFreeInst :1;
    int                             fInOnlyParam      :1;
    int                             fHasReturn        :1;

    unsigned long                   dwDestContext;
    void  *                pvDestContext;

    NDR_SCONTEXT *                  SavedContextHandles;

    long                            ParamNumber;

    struct IRpcChannelBuffer  *    pRpcChannelBuffer;

    PARRAY_INFO                     pArrayInfo;

    



    unsigned long  *       SizePtrCountArray;
    unsigned long  *       SizePtrOffsetArray;
    unsigned long  *       SizePtrLengthArray;

    


    void  *                pArgQueue;

    unsigned long                   dwStubPhase;

    



    NDR_PIPE_DESC    *     pPipeDesc;

    unsigned long                   Reserved[4];

    



    } MIDL_STUB_MESSAGE,  *PMIDL_STUB_MESSAGE;


#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 934 "C:\\MSDEV\\INCLUDE\\rpcndr.h"
#line 935 "C:\\MSDEV\\INCLUDE\\rpcndr.h"




typedef void  *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void  *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void  *, unsigned char  *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR,  *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void  *            pObj;
    unsigned int                Size;
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_INFO,  *PGENERIC_BINDING_INFO;









#line 969 "C:\\MSDEV\\INCLUDE\\rpcndr.h"


typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE     pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE     pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE     pfnFreeXmit;
    XMIT_HELPER_ROUTINE     pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE,  *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long  *,
     unsigned long,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char   * ,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char   * ,
     void  * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long  *,
     void  * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE          pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE     pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE   pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE         pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long       Flags;
    PMIDL_STUB_MESSAGE  pStubMsg;
    PFORMAT_STRING      pReserve;
} USER_MARSHAL_CB;





typedef struct _MALLOC_FREE_STRUCT
    {
    void  *	( __stdcall * pfnAllocate)(size_t);
    void                ( __stdcall * pfnFree)(void  *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short       CommOffset;
    short       FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef struct _MIDL_STUB_DESC
    {

    void  *    RpcInterfaceInformation;

    void  *    ( __stdcall * pfnAllocate)(size_t);
    void                ( __stdcall * pfnFree)(void  *);

    union
        {
        handle_t  *            pAutoHandle;
        handle_t  *            pPrimitiveHandle;
        PGENERIC_BINDING_INFO           pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN  *                   apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR  *  aGenericBindingRoutinePairs;

    const EXPR_EVAL  *                     apfnExprEval;

    const XMIT_ROUTINE_QUINTUPLE  *        aXmitQuintuple;

    const unsigned char  *                 pFormatTypes;

    int                                             fCheckBounds;

    
    unsigned long                                   Version;

    



    MALLOC_FREE_STRUCT  *                  pMallocFreeStruct;

    long                                MIDLVersion;

    const COMM_FAULT_OFFSETS  *    CommFaultOffsets;

    

    const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;

    long                                    Reserved1;
    long                                    Reserved2;
    long                                    Reserved3;
    long                                    Reserved4;
    long                                    Reserved5;

    } MIDL_STUB_DESC;

typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;

typedef void  * PMIDL_XMIT_TYPE;





#pragma warning( disable:4200 )
#line 1100 "C:\\MSDEV\\INCLUDE\\rpcndr.h"
typedef struct _MIDL_FORMAT_STRING
    {
    short               Pad;
    unsigned char       Format[];
    } MIDL_FORMAT_STRING;

#pragma warning( default:4200 )
#line 1108 "C:\\MSDEV\\INCLUDE\\rpcndr.h"




typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );

typedef long ( __stdcall * SERVER_ROUTINE)();




typedef struct  _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC             pStubDesc;
    const SERVER_ROUTINE *      DispatchTable;
    PFORMAT_STRING              ProcString;
    const unsigned short *      FmtStringOffset;
    const STUB_THUNK *          ThunkTable;
    PFORMAT_STRING              LocalFormatTypes;
    PFORMAT_STRING              LocalProcString;
    const unsigned short *      LocalFmtStringOffset;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;




typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC                     pStubDesc;
    PFORMAT_STRING                      ProcFormatString;
    const unsigned short  *    FormatStringOffset;
    PFORMAT_STRING                      LocalFormatTypes;
    PFORMAT_STRING                      LocalProcString;
    const unsigned short  *    LocalFmtStringOffset;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO  * PMIDL_STUBLESS_PROXY_INFO;




typedef union _CLIENT_CALL_RETURN
    {
    void  *        Pointer;
    long                    Simple;
    } CLIENT_CALL_RETURN;





typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;





typedef struct _FULL_PTR_TO_REFID_ELEMENT
    {
    struct _FULL_PTR_TO_REFID_ELEMENT  *  Next;

    void  *            Pointer;
    unsigned long       RefId;
    unsigned char       State;
    } FULL_PTR_TO_REFID_ELEMENT,  *PFULL_PTR_TO_REFID_ELEMENT;




typedef struct _FULL_PTR_XLAT_TABLES
    {
    


    struct
        {
        void  * *             XlatTable;
        unsigned char  *     StateTable;
        unsigned long       NumberOfEntries;
        } RefIdToPointer;

    


    struct
        {
        PFULL_PTR_TO_REFID_ELEMENT  *  XlatTable;
        unsigned long                   NumberOfBuckets;
        unsigned long                   HashMask;
        } PointerToRefId;

    


    unsigned long           NextRefId;

    






    XLAT_SIDE               XlatSide;
    } FULL_PTR_XLAT_TABLES,  *PFULL_PTR_XLAT_TABLES;









void __stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *                       pMemory,
    unsigned char                       FormatChar
    );

unsigned char  * __stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrHardStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

unsigned char  * __stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



unsigned char  * __stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE    pStubMsg,
    NDR_CCONTEXT          ContextHandle,
    int                   fCheck
    );

void __stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE    pStubMsg,
    NDR_SCONTEXT          ContextHandle,
    NDR_RUNDOWN           RundownRoutine
    );





void __stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    unsigned char                       FormatChar
    );

unsigned char  * __stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrHardStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

unsigned char  * __stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



unsigned char  * __stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



void __stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    NDR_CCONTEXT  *    pContextHandle,
    RPC_BINDING_HANDLE          BindHandle
    );

NDR_SCONTEXT __stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg
    );





void __stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrHardStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );





unsigned long __stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrHardStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

unsigned long __stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



unsigned long __stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );





void __stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrHardStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

void __stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



void __stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );





void __stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat,
    long                                NumberParams
    );

void __stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );














unsigned char  * __stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char   FormatChar
    );





void __stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    unsigned int                        ProcNum
    );

unsigned char  * __stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor
    );

void __stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    unsigned long                       RequestedBufferSize
    );

void __stdcall
NdrClientInitialize(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    unsigned int                        ProcNum
    );

unsigned char  * __stdcall
NdrServerInitialize(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor
    );

unsigned char  * __stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    PRPC_MESSAGE                        pRpcMsg
    );

void __stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg
    );

unsigned char  * __stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long                       BufferLength,
    RPC_BINDING_HANDLE                  Handle
    );

unsigned char  * __stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long                       BufferLength,
    RPC_BINDING_HANDLE                  Handle
    );

unsigned char  * __stdcall
NdrGetPipeBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long                       BufferLength,
    RPC_BINDING_HANDLE                  Handle );

void __stdcall
NdrGetPartialBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg );

unsigned char  * __stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char *            pBufferEnd
    );

unsigned char  * __stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pBufferEnd,
    RPC_BINDING_HANDLE  *      pAutoHandle
    );

void  __stdcall
NdrPipeSendReceive(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    NDR_PIPE_DESC  *                    pPipeDesc
    );

void __stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg
    );






void __stdcall
NdrPipesInitialize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pParamDesc,
    NDR_PIPE_DESC     *        pPipeDesc,
    NDR_PIPE_MESSAGE  *        pPipeMsg,
    char              *        pStackTop,
    unsigned long                       NumberParams );

void
NdrMarkNextActivePipe( 
    NDR_PIPE_DESC   *          pPipeDesc,
    unsigned int                        DirectionMask );

void __stdcall
NdrPipePull(
    char           *           pState,
    void           *           buf,
    unsigned long                       esize,
    unsigned long  *           ecount );

void  __stdcall
NdrPipePush(
    char           *           pState,
    void           *           buf,
    unsigned long                       ecount );

void __stdcall
NdrIsAppDoneWithPipes( 
    NDR_PIPE_DESC  *                    pPipeDesc
    );

void __stdcall
NdrPipesDone( 
    PMIDL_STUB_MESSAGE                  pStubMsg
    );








CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC                     pStubDescriptor,
    PFORMAT_STRING                      pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC                     pStubDescriptor,
    PFORMAT_STRING                      pFormat,
    ...
    );


typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

long __stdcall
NdrStubCall2(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                         pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

void __stdcall
NdrServerCall2(
    PRPC_MESSAGE                         pRpcMsg
    );

long __stdcall
NdrStubCall (
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                         pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

void __stdcall
NdrServerCall(
    PRPC_MESSAGE                        pRpcMsg
    );

int __stdcall
NdrServerUnmarshall(
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                         pRpcMsg,
    PMIDL_STUB_MESSAGE                   pStubMsg,
    PMIDL_STUB_DESC                      pStubDescriptor,
    PFORMAT_STRING                       pFormat,
    void  *                     pParamList
    );

void __stdcall
NdrServerMarshall(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PMIDL_STUB_MESSAGE                   pStubMsg,
    PFORMAT_STRING                       pFormat
    );



RPC_STATUS __stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long  *                       pCommStatus,
    unsigned long  *                       pFaultStatus,
    RPC_STATUS                          Status
    );



int __stdcall
NdrSH_UPDecision(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    RPC_BUFPTR                          pBuffer
    );

int __stdcall
NdrSH_TLUPDecision(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem
    );

int __stdcall
NdrSH_TLUPDecisionBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem
    );

int __stdcall
NdrSH_IfAlloc(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

int __stdcall
NdrSH_IfAllocRef(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

int __stdcall
NdrSH_IfAllocSet(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

RPC_BUFPTR __stdcall
NdrSH_IfCopy(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

RPC_BUFPTR __stdcall
NdrSH_IfAllocCopy(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

unsigned long __stdcall
NdrSH_Copy(
    unsigned char            *         pStubMsg,
    unsigned char            *         pPtrInMem,
    unsigned long                       Count
    );

void __stdcall
NdrSH_IfFree(
    PMIDL_STUB_MESSAGE                  pMessage,
    unsigned char            *         pPtr );


RPC_BUFPTR  __stdcall
NdrSH_StringMarshall(
    PMIDL_STUB_MESSAGE                  pMessage,
    unsigned char            *         pMemory,
    unsigned long                       Count,
    int                                 Size );

RPC_BUFPTR  __stdcall
NdrSH_StringUnMarshall(
    PMIDL_STUB_MESSAGE                  pMessage,
    unsigned char            * *          pMemory,
    int                                 Size );





typedef void  * RPC_SS_THREAD_HANDLE;

typedef void  * __stdcall
RPC_CLIENT_ALLOC (
     size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
     void  * Ptr
    );





void  * __stdcall
RpcSsAllocate (
     size_t Size
    );

void __stdcall
RpcSsDisableAllocate (
    void
    );

void __stdcall
RpcSsEnableAllocate (
    void
    );

void __stdcall
RpcSsFree (
     void  * NodeToFree
    );

RPC_SS_THREAD_HANDLE __stdcall
RpcSsGetThreadHandle (
    void
    );

void __stdcall
RpcSsSetClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree
    );

void __stdcall
RpcSsSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

void __stdcall
RpcSsSwapClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree,
     RPC_CLIENT_ALLOC  *  * OldClientAlloc,
     RPC_CLIENT_FREE  *  * OldClientFree
    );





void  * __stdcall
RpcSmAllocate (
      size_t          Size,
     RPC_STATUS  *    pStatus
    );

RPC_STATUS __stdcall
RpcSmClientFree (
      void  * pNodeToFree
    );

RPC_STATUS  __stdcall
RpcSmDestroyClientContext (
     void  *  * ContextHandle
    );

RPC_STATUS  __stdcall
RpcSmDisableAllocate (
    void
    );

RPC_STATUS  __stdcall
RpcSmEnableAllocate (
    void
    );

RPC_STATUS  __stdcall
RpcSmFree (
     void  * NodeToFree
    );

RPC_SS_THREAD_HANDLE __stdcall
RpcSmGetThreadHandle (
     RPC_STATUS  *    pStatus
    );

RPC_STATUS  __stdcall
RpcSmSetClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree
    );

RPC_STATUS  __stdcall
RpcSmSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

RPC_STATUS  __stdcall
RpcSmSwapClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree,
     RPC_CLIENT_ALLOC  *  * OldClientAlloc,
     RPC_CLIENT_FREE  *  * OldClientFree
    );





void __stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

void __stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

void __stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE      pMessage );

void  *  __stdcall
NdrRpcSmClientAllocate (
     size_t Size
    );

void  __stdcall
NdrRpcSmClientFree (
     void  * NodeToFree
    );

void  *  __stdcall
NdrRpcSsDefaultAllocate (
     size_t Size
    );

void  __stdcall
NdrRpcSsDefaultFree (
     void  * NodeToFree
    );









PFULL_PTR_XLAT_TABLES __stdcall
NdrFullPointerXlatInit(
    unsigned long           NumberOfPointers,
    XLAT_SIDE               XlatSide
    );

void __stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables
    );

int __stdcall
NdrFullPointerQueryPointer(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                    pPointer,
    unsigned char           QueryType,
    unsigned long  *           pRefId
    );

int __stdcall
NdrFullPointerQueryRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    unsigned char           QueryType,
    void  * *                 ppPointer
    );

void __stdcall
NdrFullPointerInsertRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    void  *                    pPointer
    );

int __stdcall
NdrFullPointerFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                    Pointer
    );

void  *  __stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE      pStubMsg,
    size_t                  Len
    );

void __stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    void  *        ArgAddr
    );






void  * __stdcall
NdrOleAllocate (
     size_t Size
    );

void __stdcall
NdrOleFree (
     void  * NodeToFree
    );





#line 2611 "C:\\MSDEV\\INCLUDE\\rpcndr.h"





}
#line 2618 "C:\\MSDEV\\INCLUDE\\rpcndr.h"





#line 2624 "C:\\MSDEV\\INCLUDE\\rpcndr.h"

#line 2626 "C:\\MSDEV\\INCLUDE\\rpcndr.h"





#line 14 "C:\\MSDEV\\INCLUDE\\objbase.h"




#line 1 "C:\\MSDEV\\INCLUDE\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#pragma pack(8)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#line 19 "C:\\MSDEV\\INCLUDE\\objbase.h"









































    


#line 64 "C:\\MSDEV\\INCLUDE\\objbase.h"









#line 74 "C:\\MSDEV\\INCLUDE\\objbase.h"













#line 88 "C:\\MSDEV\\INCLUDE\\objbase.h"
































#line 121 "C:\\MSDEV\\INCLUDE\\objbase.h"

#line 123 "C:\\MSDEV\\INCLUDE\\objbase.h"










































































































#line 232 "C:\\MSDEV\\INCLUDE\\objbase.h"
   
   
#line 235 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 236 "C:\\MSDEV\\INCLUDE\\objbase.h"









































#line 278 "C:\\MSDEV\\INCLUDE\\objbase.h"












#line 291 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 292 "C:\\MSDEV\\INCLUDE\\objbase.h"








#line 301 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 302 "C:\\MSDEV\\INCLUDE\\objbase.h"








#line 1 "C:\\MSDEV\\INCLUDE\\stdlib.h"
















#pragma once
#line 19 "C:\\MSDEV\\INCLUDE\\stdlib.h"


























































































































































































































































































































































































































































































































































































































#line 311 "C:\\MSDEV\\INCLUDE\\objbase.h"




















#line 332 "C:\\MSDEV\\INCLUDE\\objbase.h"





#line 338 "C:\\MSDEV\\INCLUDE\\objbase.h"



typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,       
    REGCLS_MULTIPLEUSE = 1,     
                                
    REGCLS_MULTI_SEPARATE = 2,  
                                
    REGCLS_SUSPENDED      = 4   
                                
} REGCLS;
































#line 384 "C:\\MSDEV\\INCLUDE\\objbase.h"





















typedef struct    IRpcStubBuffer     IRpcStubBuffer;
typedef struct    IRpcChannelBuffer  IRpcChannelBuffer;

#line 1 "C:\\MSDEV\\INCLUDE\\wtypes.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\wtypes.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\wtypes.h"





extern "C"{
#line 21 "C:\\MSDEV\\INCLUDE\\wtypes.h"

 

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 










extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;









 


typedef struct  tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHGLOBAL;

typedef struct  tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHMETAFILEPICT;

typedef struct  tagRemHENHMETAFILE
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHENHMETAFILE;

typedef struct  tagRemHBITMAP
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHBITMAP;

typedef struct  tagRemHPALETTE
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHPALETTE;

typedef struct  tagRemBRUSH
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHBRUSH;

































































































































































































































#line 322 "C:\\MSDEV\\INCLUDE\\wtypes.h"

typedef WCHAR OLECHAR;

typedef  OLECHAR  *LPOLESTR;

typedef  const OLECHAR  *LPCOLESTR;









#line 338 "C:\\MSDEV\\INCLUDE\\wtypes.h"
























typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;








typedef __int64 LONGLONG;

typedef unsigned __int64 ULONGLONG;

typedef LONGLONG  *PLONGLONG;

typedef ULONGLONG  *PULONGLONG;

#line 388 "C:\\MSDEV\\INCLUDE\\wtypes.h"













#line 402 "C:\\MSDEV\\INCLUDE\\wtypes.h"
















































































typedef struct  _COAUTHIDENTITY
    {
     USHORT  *User;
    ULONG UserLength;
     USHORT  *Domain;
    ULONG DomainLength;
     USHORT  *Password;
    ULONG PasswordLength;
    ULONG Flags;
    }	COAUTHIDENTITY;

typedef struct  _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY  *pAuthIdentityData;
    DWORD dwCapabilities;
    }	COAUTHINFO;

typedef struct  _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO  *pAuthInfo;
    DWORD dwReserved2;
    }	COSERVERINFO;

typedef LONG SCODE;



typedef LONG HRESULT;

#line 519 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef SCODE  *PSCODE;














typedef GUID  *LPGUID;

#line 537 "C:\\MSDEV\\INCLUDE\\wtypes.h"












typedef GUID IID;

typedef IID  *LPIID;



typedef GUID CLSID;

typedef CLSID  *LPCLSID;



typedef GUID FMTID;

typedef FMTID  *LPFMTID;












#line 577 "C:\\MSDEV\\INCLUDE\\wtypes.h"




#line 582 "C:\\MSDEV\\INCLUDE\\wtypes.h"



#line 586 "C:\\MSDEV\\INCLUDE\\wtypes.h"



#line 590 "C:\\MSDEV\\INCLUDE\\wtypes.h"



#line 594 "C:\\MSDEV\\INCLUDE\\wtypes.h"

















#line 612 "C:\\MSDEV\\INCLUDE\\wtypes.h"
#line 613 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef 
enum tagMEMCTX
    {	MEMCTX_TASK	= 1,
	MEMCTX_SHARED	= 2,
	MEMCTX_MACSYSTEM	= 3,
	MEMCTX_UNKNOWN	= -1,
	MEMCTX_SAME	= -2
    }	MEMCTX;





#line 627 "C:\\MSDEV\\INCLUDE\\wtypes.h"



#line 631 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef 
enum tagCLSCTX
    {	CLSCTX_INPROC_SERVER	= 0x1,
	CLSCTX_INPROC_HANDLER	= 0x2,
	CLSCTX_LOCAL_SERVER	= 0x4,
	CLSCTX_INPROC_SERVER16	= 0x8,
	CLSCTX_REMOTE_SERVER	= 0x10,
	CLSCTX_INPROC_HANDLER16	= 0x20,
	CLSCTX_INPROC_SERVERX86	= 0x40,
	CLSCTX_INPROC_HANDLERX86	= 0x80
    }	CLSCTX;

typedef 
enum tagMSHLFLAGS
    {	MSHLFLAGS_NORMAL	= 0,
	MSHLFLAGS_TABLESTRONG	= 1,
	MSHLFLAGS_TABLEWEAK	= 2,
	MSHLFLAGS_NOPING	= 4
    }	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {	MSHCTX_LOCAL	= 0,
	MSHCTX_NOSHAREDMEM	= 1,
	MSHCTX_DIFFERENTMACHINE	= 2,
	MSHCTX_INPROC	= 3
    }	MSHCTX;

typedef 
enum tagDVASPECT
    {	DVASPECT_CONTENT	= 1,
	DVASPECT_THUMBNAIL	= 2,
	DVASPECT_ICON	= 4,
	DVASPECT_DOCPRINT	= 8
    }	DVASPECT;

typedef 
enum tagSTGC
    {	STGC_DEFAULT	= 0,
	STGC_OVERWRITE	= 1,
	STGC_ONLYIFCURRENT	= 2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4
    }	STGC;

typedef 
enum tagSTGMOVE
    {	STGMOVE_MOVE	= 0,
	STGMOVE_COPY	= 1,
	STGMOVE_SHALLOWCOPY	= 2
    }	STGMOVE;

typedef 
enum tagSTATFLAG
    {	STATFLAG_DEFAULT	= 0,
	STATFLAG_NONAME	= 1,
	STATFLAG_NOOPEN	= 2
    }	STATFLAG;

typedef  void  *HCONTEXT;



typedef DWORD LCID;

#line 696 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef struct  _BYTE_BLOB
    {
    unsigned long clSize;
     byte abData[ 1 ];
    }	BYTE_BLOB;

typedef  BYTE_BLOB  *UP_BYTE_BLOB;

typedef struct  _WORD_BLOB
    {
    unsigned long clSize;
     unsigned short asData[ 1 ];
    }	WORD_BLOB;

typedef  WORD_BLOB  *UP_WORD_BLOB;

typedef struct  _DWORD_BLOB
    {
    unsigned long clSize;
     unsigned long alData[ 1 ];
    }	DWORD_BLOB;

typedef  DWORD_BLOB  *UP_DWORD_BLOB;

typedef struct  _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     byte abData[ 1 ];
    }	FLAGGED_BYTE_BLOB;

typedef  FLAGGED_BYTE_BLOB  *UP_FLAGGED_BYTE_BLOB;

typedef struct  _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     unsigned short asData[ 1 ];
    }	FLAGGED_WORD_BLOB;

typedef  FLAGGED_WORD_BLOB  *UP_FLAGGED_WORD_BLOB;

typedef struct  _BYTE_SIZEDARR
    {
    unsigned long clSize;
     byte  *pData;
    }	BYTE_SIZEDARR;

typedef struct  _SHORT_SIZEDARR
    {
    unsigned long clSize;
     unsigned short  *pData;
    }	WORD_SIZEDARR;

typedef struct  _LONG_SIZEDARR
    {
    unsigned long clSize;
     unsigned long  *pData;
    }	DWORD_SIZEDARR;

typedef struct  _HYPER_SIZEDARR
    {
    unsigned long clSize;
     __int64  *pData;
    }	HYPER_SIZEDARR;





typedef struct  _userCLIPFORMAT
    {
    long fContext;
      union __MIDL_IWinTypes_0001
        {
         DWORD dwValue;
         wchar_t  *pwszName;
        }	u;
    }	userCLIPFORMAT;

typedef  userCLIPFORMAT  *wireCLIPFORMAT;

typedef  WORD CLIPFORMAT;

typedef struct  _GDI_NONREMOTE
    {
    long fContext;
      union __MIDL_IWinTypes_0002
        {
         long hInproc;
         DWORD_BLOB  *hRemote;
        }	u;
    }	GDI_NONREMOTE;

typedef struct  _userHGLOBAL
    {
    long fContext;
      union __MIDL_IWinTypes_0003
        {
         long hInproc;
         FLAGGED_BYTE_BLOB  *hRemote;
         long hGlobal;
        }	u;
    }	userHGLOBAL;

typedef  userHGLOBAL  *wireHGLOBAL;

typedef struct  _userHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0004
        {
         long hInproc;
         BYTE_BLOB  *hRemote;
         long hGlobal;
        }	u;
    }	userHMETAFILE;

typedef struct  _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE  *hMF;
    }	remoteMETAFILEPICT;

typedef struct  _userHMETAFILEPICT
    {
    long fContext;
      union __MIDL_IWinTypes_0005
        {
         long hInproc;
         remoteMETAFILEPICT  *hRemote;
         long hGlobal;
        }	u;
    }	userHMETAFILEPICT;

typedef struct  _userHENHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0006
        {
         long hInproc;
         BYTE_BLOB  *hRemote;
         long hGlobal;
        }	u;
    }	userHENHMETAFILE;

typedef struct  _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
     byte pBuffer[ 1 ];
    }	userBITMAP;

typedef struct  _userHBITMAP
    {
    long fContext;
      union __MIDL_IWinTypes_0007
        {
         long hInproc;
         userBITMAP  *hRemote;
         long hGlobal;
        }	u;
    }	userHBITMAP;

typedef struct  tagrpcLOGPALETTE
    {
    WORD palVersion;
    WORD palNumEntries;
     PALETTEENTRY palPalEntry[ 1 ];
    }	rpcLOGPALETTE;

typedef struct  _userHPALETTE
    {
    long fContext;
      union __MIDL_IWinTypes_0008
        {
         long hInproc;
         rpcLOGPALETTE  *hRemote;
         long hGlobal;
        }	u;
    }	userHPALETTE;

typedef struct  _RemotableHandle
    {
    long fContext;
      union __MIDL_IWinTypes_0009
        {
         long hInproc;
         long hRemote;
        }	u;
    }	RemotableHandle;

typedef  RemotableHandle  *wireHWND;

typedef  RemotableHandle  *wireHMENU;

typedef  RemotableHandle  *wireHACCEL;

typedef  RemotableHandle  *wireHBRUSH;

typedef  RemotableHandle  *wireHFONT;

typedef  RemotableHandle  *wireHDC;

typedef  RemotableHandle  *wireHICON;














































#line 955 "C:\\MSDEV\\INCLUDE\\wtypes.h"




















typedef  userHBITMAP  *wireHBITMAP;

typedef  userHPALETTE  *wireHPALETTE;

typedef  userHENHMETAFILE  *wireHENHMETAFILE;

typedef  userHMETAFILE  *wireHMETAFILE;

typedef  userHMETAFILEPICT  *wireHMETAFILEPICT;














#line 999 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef  void  *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#line 1006 "C:\\MSDEV\\INCLUDE\\wtypes.h"






 


typedef double DATE;












#line 1029 "C:\\MSDEV\\INCLUDE\\wtypes.h"

typedef union tagCY {
    struct {




        unsigned long Lo;
        long      Hi;
#line 1039 "C:\\MSDEV\\INCLUDE\\wtypes.h"
    };
    LONGLONG int64;
} CY;
#line 1043 "C:\\MSDEV\\INCLUDE\\wtypes.h"
#line 1044 "C:\\MSDEV\\INCLUDE\\wtypes.h"












#line 1057 "C:\\MSDEV\\INCLUDE\\wtypes.h"

typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union {
        struct {




            ULONG Lo32;
            ULONG Mid32;
#line 1077 "C:\\MSDEV\\INCLUDE\\wtypes.h"
        };
        ULONGLONG Lo64;
    };
} DECIMAL;



#line 1085 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef  FLAGGED_WORD_BLOB  *wireBSTR;

typedef  OLECHAR  *BSTR;

typedef BSTR  *LPBSTR;


typedef short VARIANT_BOOL;





#line 1099 "C:\\MSDEV\\INCLUDE\\wtypes.h"


#line 1102 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef boolean BOOLEAN;







typedef struct  tagBLOB
    {
    ULONG cbSize;
     BYTE  *pBlobData;
    }	BLOB;

typedef struct tagBLOB  *LPBLOB;

#line 1119 "C:\\MSDEV\\INCLUDE\\wtypes.h"
typedef struct  tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
     BYTE  *pClipData;
    }	CLIPDATA;



typedef unsigned short VARTYPE;























































enum VARENUM
    {	VT_EMPTY	= 0,
	VT_NULL	= 1,
	VT_I2	= 2,
	VT_I4	= 3,
	VT_R4	= 4,
	VT_R8	= 5,
	VT_CY	= 6,
	VT_DATE	= 7,
	VT_BSTR	= 8,
	VT_DISPATCH	= 9,
	VT_ERROR	= 10,
	VT_BOOL	= 11,
	VT_VARIANT	= 12,
	VT_UNKNOWN	= 13,
	VT_DECIMAL	= 14,
	VT_I1	= 16,
	VT_UI1	= 17,
	VT_UI2	= 18,
	VT_UI4	= 19,
	VT_I8	= 20,
	VT_UI8	= 21,
	VT_INT	= 22,
	VT_UINT	= 23,
	VT_VOID	= 24,
	VT_HRESULT	= 25,
	VT_PTR	= 26,
	VT_SAFEARRAY	= 27,
	VT_CARRAY	= 28,
	VT_USERDEFINED	= 29,
	VT_LPSTR	= 30,
	VT_LPWSTR	= 31,
	VT_FILETIME	= 64,
	VT_BLOB	= 65,
	VT_STREAM	= 66,
	VT_STORAGE	= 67,
	VT_STREAMED_OBJECT	= 68,
	VT_STORED_OBJECT	= 69,
	VT_BLOB_OBJECT	= 70,
	VT_CF	= 71,
	VT_CLSID	= 72,
	VT_VECTOR	= 0x1000,
	VT_ARRAY	= 0x2000,
	VT_BYREF	= 0x4000,
	VT_RESERVED	= 0x8000,
	VT_ILLEGAL	= 0xffff,
	VT_ILLEGALMASKED	= 0xfff,
	VT_TYPEMASK	= 0xfff
    };
typedef ULONG PROPID;



extern RPC_IF_HANDLE __MIDL__intf_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0001_v0_0_s_ifspec;






}
#line 1247 "C:\\MSDEV\\INCLUDE\\wtypes.h"

#line 1249 "C:\\MSDEV\\INCLUDE\\wtypes.h"
#line 409 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 1 "C:\\MSDEV\\INCLUDE\\unknwn.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\unknwn.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"














#line 1 "C:\\MSDEV\\INCLUDE\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#pragma pack(8)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#line 16 "C:\\MSDEV\\INCLUDE\\ole2.h"










#line 1 "C:\\MSDEV\\INCLUDE\\winerror.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 27 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 1 "C:\\MSDEV\\INCLUDE\\objbase.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\objbase.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































#line 858 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 29 "C:\\MSDEV\\INCLUDE\\ole2.h"
#line 1 "C:\\MSDEV\\INCLUDE\\oleauto.h"
















#line 1 "C:\\MSDEV\\INCLUDE\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#pragma pack(8)


#line 32 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#line 33 "C:\\MSDEV\\INCLUDE\\pshpack8.h"
#line 18 "C:\\MSDEV\\INCLUDE\\oleauto.h"
#line 19 "C:\\MSDEV\\INCLUDE\\oleauto.h"









#line 29 "C:\\MSDEV\\INCLUDE\\oleauto.h"

extern "C" const IID IID_StdOle;






















#line 1 "C:\\MSDEV\\INCLUDE\\oaidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\oaidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\oaidl.h"





extern "C"{
#line 25 "C:\\MSDEV\\INCLUDE\\oaidl.h"

 



typedef struct ICreateTypeInfo ICreateTypeInfo;
#line 32 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
#line 38 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ICreateTypeLib ICreateTypeLib;
#line 44 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ICreateTypeLib2 ICreateTypeLib2;
#line 50 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct IDispatch IDispatch;
#line 56 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct IEnumVARIANT IEnumVARIANT;
#line 62 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ITypeComp ITypeComp;
#line 68 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ITypeInfo ITypeInfo;
#line 74 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ITypeInfo2 ITypeInfo2;
#line 80 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ITypeLib ITypeLib;
#line 86 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ITypeLib2 ITypeLib2;
#line 92 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ITypeChangeEvents ITypeChangeEvents;
#line 98 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct IErrorInfo IErrorInfo;
#line 104 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ICreateErrorInfo ICreateErrorInfo;
#line 110 "C:\\MSDEV\\INCLUDE\\oaidl.h"




typedef struct ISupportErrorInfo ISupportErrorInfo;
#line 116 "C:\\MSDEV\\INCLUDE\\oaidl.h"



#line 1 "C:\\MSDEV\\INCLUDE\\objidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\objidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\objidl.h"





extern "C"{
#line 25 "C:\\MSDEV\\INCLUDE\\objidl.h"

 



typedef struct IMarshal IMarshal;
#line 32 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IMalloc IMalloc;
#line 38 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IMallocSpy IMallocSpy;
#line 44 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IStdMarshalInfo IStdMarshalInfo;
#line 50 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IExternalConnection IExternalConnection;
#line 56 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IMultiQI IMultiQI;
#line 62 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumUnknown IEnumUnknown;
#line 68 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IBindCtx IBindCtx;
#line 74 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumMoniker IEnumMoniker;
#line 80 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IRunnableObject IRunnableObject;
#line 86 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IRunningObjectTable IRunningObjectTable;
#line 92 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPersist IPersist;
#line 98 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPersistStream IPersistStream;
#line 104 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IMoniker IMoniker;
#line 110 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IROTData IROTData;
#line 116 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumString IEnumString;
#line 122 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct ISequentialStream ISequentialStream;
#line 128 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IStream IStream;
#line 134 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumSTATSTG IEnumSTATSTG;
#line 140 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IStorage IStorage;
#line 146 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPersistFile IPersistFile;
#line 152 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPersistStorage IPersistStorage;
#line 158 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct ILockBytes ILockBytes;
#line 164 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumFORMATETC IEnumFORMATETC;
#line 170 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumSTATDATA IEnumSTATDATA;
#line 176 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IRootStorage IRootStorage;
#line 182 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IAdviseSink IAdviseSink;
#line 188 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IAdviseSink2 IAdviseSink2;
#line 194 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IDataObject IDataObject;
#line 200 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IDataAdviseHolder IDataAdviseHolder;
#line 206 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IMessageFilter IMessageFilter;
#line 212 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IRpcChannelBuffer IRpcChannelBuffer;
#line 218 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IRpcProxyBuffer IRpcProxyBuffer;
#line 224 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IRpcStubBuffer IRpcStubBuffer;
#line 230 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPSFactoryBuffer IPSFactoryBuffer;
#line 236 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IChannelHook IChannelHook;
#line 242 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPropertyStorage IPropertyStorage;
#line 248 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IPropertySetStorage IPropertySetStorage;
#line 254 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
#line 260 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
#line 266 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IClientSecurity IClientSecurity;
#line 272 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IServerSecurity IServerSecurity;
#line 278 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IClassActivator IClassActivator;
#line 284 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IFillLockBytes IFillLockBytes;
#line 290 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct IProgressNotify IProgressNotify;
#line 296 "C:\\MSDEV\\INCLUDE\\objidl.h"




typedef struct ILayoutStorage ILayoutStorage;
#line 302 "C:\\MSDEV\\INCLUDE\\objidl.h"



#line 1 "C:\\MSDEV\\INCLUDE\\unknwn.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\unknwn.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 18 "C:\\MSDEV\\INCLUDE\\unknwn.h"





extern "C"{
#line 25 "C:\\MSDEV\\INCLUDE\\unknwn.h"

 



typedef struct IUnknown IUnknown;
#line 32 "C:\\MSDEV\\INCLUDE\\unknwn.h"




typedef struct IClassFactory IClassFactory;
#line 38 "C:\\MSDEV\\INCLUDE\\unknwn.h"



#line 1 "C:\\MSDEV\\INCLUDE\\wtypes.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\wtypes.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\wtypes.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\MSDEV\\INCLUDE\\unknwn.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 










extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;









 


typedef  IUnknown  *LPUNKNOWN;






extern "C" const IID IID_IUnknown;


    
    struct IUnknown
    {
    public:
        
        virtual HRESULT __stdcall QueryInterface( 
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual ULONG __stdcall AddRef( void) = 0;
        
        virtual ULONG __stdcall Release( void) = 0;
        
        
    };
    










































#line 145 "C:\\MSDEV\\INCLUDE\\unknwn.h"



HRESULT __stdcall IUnknown_QueryInterface_Proxy( 
    IUnknown  * This,
     const IID & riid,
     void  * *ppvObject);


void __stdcall IUnknown_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_AddRef_Proxy( 
    IUnknown  * This);


void __stdcall IUnknown_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_Release_Proxy( 
    IUnknown  * This);


void __stdcall IUnknown_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 185 "C:\\MSDEV\\INCLUDE\\unknwn.h"










 


typedef  IClassFactory  *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;


    
    struct IClassFactory : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown  *pUnkOuter,
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual  HRESULT __stdcall LockServer( 
             BOOL fLock) = 0;
        
    };
    



























































#line 278 "C:\\MSDEV\\INCLUDE\\unknwn.h"



 HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy( 
    IClassFactory  * This,
     const IID & riid,
     IUnknown  * *ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy( 
    IClassFactory  * This,
     BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 308 "C:\\MSDEV\\INCLUDE\\unknwn.h"




 HRESULT __stdcall IClassFactory_CreateInstance_Proxy( 
    IClassFactory  * This,
     IUnknown  *pUnkOuter,
     const IID & riid,
     void  * *ppvObject);


 HRESULT __stdcall IClassFactory_CreateInstance_Stub( 
    IClassFactory  * This,
     const IID & riid,
     IUnknown  * *ppvObject);

 HRESULT __stdcall IClassFactory_LockServer_Proxy( 
    IClassFactory  * This,
     BOOL fLock);


 HRESULT __stdcall IClassFactory_LockServer_Stub( 
    IClassFactory  * This,
     BOOL fLock);






}
#line 340 "C:\\MSDEV\\INCLUDE\\unknwn.h"

#line 342 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 306 "C:\\MSDEV\\INCLUDE\\objidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 




















extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;









 


typedef  IMarshal  *LPMARSHAL;


extern "C" const IID IID_IMarshal;


    
    struct IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass( 
             const IID & riid,
             void  *pv,
             DWORD dwDestContext,
             void  *pvDestContext,
             DWORD mshlflags,
             CLSID  *pCid) = 0;
        
        virtual HRESULT __stdcall GetMarshalSizeMax( 
             const IID & riid,
             void  *pv,
             DWORD dwDestContext,
             void  *pvDestContext,
             DWORD mshlflags,
             DWORD  *pSize) = 0;
        
        virtual HRESULT __stdcall MarshalInterface( 
             IStream  *pStm,
             const IID & riid,
             void  *pv,
             DWORD dwDestContext,
             void  *pvDestContext,
             DWORD mshlflags) = 0;
        
        virtual HRESULT __stdcall UnmarshalInterface( 
             IStream  *pStm,
             const IID & riid,
             void  * *ppv) = 0;
        
        virtual HRESULT __stdcall ReleaseMarshalData( 
             IStream  *pStm) = 0;
        
        virtual HRESULT __stdcall DisconnectObject( 
             DWORD dwReserved) = 0;
        
    };
    






































































































#line 500 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IMarshal_GetUnmarshalClass_Proxy( 
    IMarshal  * This,
     const IID & riid,
     void  *pv,
     DWORD dwDestContext,
     void  *pvDestContext,
     DWORD mshlflags,
     CLSID  *pCid);


void __stdcall IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_GetMarshalSizeMax_Proxy( 
    IMarshal  * This,
     const IID & riid,
     void  *pv,
     DWORD dwDestContext,
     void  *pvDestContext,
     DWORD mshlflags,
     DWORD  *pSize);


void __stdcall IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_MarshalInterface_Proxy( 
    IMarshal  * This,
     IStream  *pStm,
     const IID & riid,
     void  *pv,
     DWORD dwDestContext,
     void  *pvDestContext,
     DWORD mshlflags);


void __stdcall IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_UnmarshalInterface_Proxy( 
    IMarshal  * This,
     IStream  *pStm,
     const IID & riid,
     void  * *ppv);


void __stdcall IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_ReleaseMarshalData_Proxy( 
    IMarshal  * This,
     IStream  *pStm);


void __stdcall IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_DisconnectObject_Proxy( 
    IMarshal  * This,
     DWORD dwReserved);


void __stdcall IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 594 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IMalloc  *LPMALLOC;


extern "C" const IID IID_IMalloc;


    
    struct IMalloc : public IUnknown
    {
    public:
        virtual void  *__stdcall Alloc( 
             ULONG cb) = 0;
        
        virtual void  *__stdcall Realloc( 
             void  *pv,
             ULONG cb) = 0;
        
        virtual void __stdcall Free( 
             void  *pv) = 0;
        
        virtual ULONG __stdcall GetSize( 
             void  *pv) = 0;
        
        virtual int __stdcall DidAlloc( 
            void  *pv) = 0;
        
        virtual void __stdcall HeapMinimize( void) = 0;
        
    };
    





















































































#line 723 "C:\\MSDEV\\INCLUDE\\objidl.h"



void  *__stdcall IMalloc_Alloc_Proxy( 
    IMalloc  * This,
     ULONG cb);


void __stdcall IMalloc_Alloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMalloc_Realloc_Proxy( 
    IMalloc  * This,
     void  *pv,
     ULONG cb);


void __stdcall IMalloc_Realloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_Free_Proxy( 
    IMalloc  * This,
     void  *pv);


void __stdcall IMalloc_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IMalloc_GetSize_Proxy( 
    IMalloc  * This,
     void  *pv);


void __stdcall IMalloc_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMalloc_DidAlloc_Proxy( 
    IMalloc  * This,
    void  *pv);


void __stdcall IMalloc_DidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_HeapMinimize_Proxy( 
    IMalloc  * This);


void __stdcall IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 800 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IMallocSpy  *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;


    
    struct IMallocSpy : public IUnknown
    {
    public:
        virtual ULONG __stdcall PreAlloc( 
             ULONG cbRequest) = 0;
        
        virtual void  *__stdcall PostAlloc( 
             void  *pActual) = 0;
        
        virtual void  *__stdcall PreFree( 
             void  *pRequest,
             BOOL fSpyed) = 0;
        
        virtual void __stdcall PostFree( 
             BOOL fSpyed) = 0;
        
        virtual ULONG __stdcall PreRealloc( 
             void  *pRequest,
             ULONG cbRequest,
             void  * *ppNewRequest,
             BOOL fSpyed) = 0;
        
        virtual void  *__stdcall PostRealloc( 
             void  *pActual,
             BOOL fSpyed) = 0;
        
        virtual void  *__stdcall PreGetSize( 
             void  *pRequest,
             BOOL fSpyed) = 0;
        
        virtual ULONG __stdcall PostGetSize( 
             ULONG cbActual,
             BOOL fSpyed) = 0;
        
        virtual void  *__stdcall PreDidAlloc( 
             void  *pRequest,
             BOOL fSpyed) = 0;
        
        virtual int __stdcall PostDidAlloc( 
             void  *pRequest,
             BOOL fSpyed,
             int fActual) = 0;
        
        virtual void __stdcall PreHeapMinimize( void) = 0;
        
        virtual void __stdcall PostHeapMinimize( void) = 0;
        
    };
    







































































































































#line 1005 "C:\\MSDEV\\INCLUDE\\objidl.h"



ULONG __stdcall IMallocSpy_PreAlloc_Proxy( 
    IMallocSpy  * This,
     ULONG cbRequest);


void __stdcall IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PostAlloc_Proxy( 
    IMallocSpy  * This,
     void  *pActual);


void __stdcall IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PreFree_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostFree_Proxy( 
    IMallocSpy  * This,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IMallocSpy_PreRealloc_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     ULONG cbRequest,
     void  * *ppNewRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PostRealloc_Proxy( 
    IMallocSpy  * This,
     void  *pActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PreGetSize_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IMallocSpy_PostGetSize_Proxy( 
    IMallocSpy  * This,
     ULONG cbActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PreDidAlloc_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMallocSpy_PostDidAlloc_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed,
     int fActual);


void __stdcall IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PreHeapMinimize_Proxy( 
    IMallocSpy  * This);


void __stdcall IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostHeapMinimize_Proxy( 
    IMallocSpy  * This);


void __stdcall IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1162 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IStdMarshalInfo  *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;


    
    struct IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler( 
             DWORD dwDestContext,
             void  *pvDestContext,
             CLSID  *pClsid) = 0;
        
    };
    




















































#line 1245 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IStdMarshalInfo_GetClassForHandler_Proxy( 
    IStdMarshalInfo  * This,
     DWORD dwDestContext,
     void  *pvDestContext,
     CLSID  *pClsid);


void __stdcall IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1264 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IExternalConnection  *LPEXTERNALCONNECTION;

typedef 
enum tagEXTCONN
    {	EXTCONN_STRONG	= 0x1,
	EXTCONN_WEAK	= 0x2,
	EXTCONN_CALLABLE	= 0x4
    }	EXTCONN;


extern "C" const IID IID_IExternalConnection;


    
    struct IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection( 
             DWORD extconn,
             DWORD reserved) = 0;
        
        virtual DWORD __stdcall ReleaseConnection( 
             DWORD extconn,
             DWORD reserved,
             BOOL fLastReleaseCloses) = 0;
        
    };
    




























































#line 1366 "C:\\MSDEV\\INCLUDE\\objidl.h"



DWORD __stdcall IExternalConnection_AddConnection_Proxy( 
    IExternalConnection  * This,
     DWORD extconn,
     DWORD reserved);


void __stdcall IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IExternalConnection_ReleaseConnection_Proxy( 
    IExternalConnection  * This,
     DWORD extconn,
     DWORD reserved,
     BOOL fLastReleaseCloses);


void __stdcall IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1398 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IMultiQI  *LPMULTIQI;

typedef struct  tagMULTI_QI
    {
    const IID  *pIID;
    IUnknown  *pItf;
    HRESULT hr;
    }	MULTI_QI;


extern "C" const IID IID_IMultiQI;


    
    struct IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces( 
             ULONG cMQIs,
             MULTI_QI  *pMQIs) = 0;
        
    };
    



















































#line 1486 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IMultiQI_QueryMultipleInterfaces_Proxy( 
    IMultiQI  * This,
     ULONG cMQIs,
     MULTI_QI  *pMQIs);


void __stdcall IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1504 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumUnknown  *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;


    
    struct IEnumUnknown : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             IUnknown  * *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumUnknown  * *ppenum) = 0;
        
    };
    








































































#line 1615 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy( 
    IEnumUnknown  * This,
     ULONG celt,
     IUnknown  * *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Skip_Proxy( 
    IEnumUnknown  * This,
     ULONG celt);


void __stdcall IEnumUnknown_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Reset_Proxy( 
    IEnumUnknown  * This);


void __stdcall IEnumUnknown_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Clone_Proxy( 
    IEnumUnknown  * This,
     IEnumUnknown  * *ppenum);


void __stdcall IEnumUnknown_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1669 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IBindCtx  *LPBC;

typedef  IBindCtx  *LPBINDCTX;

typedef struct  tagBIND_OPTS
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    }	BIND_OPTS;

typedef struct tagBIND_OPTS  *LPBIND_OPTS;


    typedef struct tagBIND_OPTS2 : tagBIND_OPTS{
    DWORD           dwTrackFlags;
    DWORD           dwClassContext;
    LCID            locale;
    COSERVERINFO *  pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;















#line 1719 "C:\\MSDEV\\INCLUDE\\objidl.h"
typedef 
enum tagBIND_FLAGS
    {	BIND_MAYBOTHERUSER	= 1,
	BIND_JUSTTESTEXISTENCE	= 2
    }	BIND_FLAGS;


extern "C" const IID IID_IBindCtx;


    
    struct IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound( 
             IUnknown  *punk) = 0;
        
        virtual HRESULT __stdcall RevokeObjectBound( 
             IUnknown  *punk) = 0;
        
        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;
        
        virtual  HRESULT __stdcall SetBindOptions( 
             BIND_OPTS  *pbindopts) = 0;
        
        virtual  HRESULT __stdcall GetBindOptions( 
             BIND_OPTS  *pbindopts) = 0;
        
        virtual HRESULT __stdcall GetRunningObjectTable( 
             IRunningObjectTable  * *pprot) = 0;
        
        virtual HRESULT __stdcall RegisterObjectParam( 
             LPOLESTR pszKey,
             IUnknown  *punk) = 0;
        
        virtual HRESULT __stdcall GetObjectParam( 
             LPOLESTR pszKey,
             IUnknown  * *ppunk) = 0;
        
        virtual HRESULT __stdcall EnumObjectParam( 
             IEnumString  * *ppenum) = 0;
        
        virtual HRESULT __stdcall RevokeObjectParam( 
             LPOLESTR pszKey) = 0;
        
    };
    


















































































































#line 1881 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IBindCtx_RegisterObjectBound_Proxy( 
    IBindCtx  * This,
     IUnknown  *punk);


void __stdcall IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectBound_Proxy( 
    IBindCtx  * This,
     IUnknown  *punk);


void __stdcall IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_ReleaseBoundObjects_Proxy( 
    IBindCtx  * This);


void __stdcall IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetRunningObjectTable_Proxy( 
    IBindCtx  * This,
     IRunningObjectTable  * *pprot);


void __stdcall IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RegisterObjectParam_Proxy( 
    IBindCtx  * This,
     LPOLESTR pszKey,
     IUnknown  *punk);


void __stdcall IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetObjectParam_Proxy( 
    IBindCtx  * This,
     LPOLESTR pszKey,
     IUnknown  * *ppunk);


void __stdcall IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_EnumObjectParam_Proxy( 
    IBindCtx  * This,
     IEnumString  * *ppenum);


void __stdcall IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectParam_Proxy( 
    IBindCtx  * This,
     LPOLESTR pszKey);


void __stdcall IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2007 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumMoniker  *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;


    
    struct IEnumMoniker : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             IMoniker  * *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumMoniker  * *ppenum) = 0;
        
    };
    








































































#line 2118 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy( 
    IEnumMoniker  * This,
     ULONG celt,
     IMoniker  * *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Skip_Proxy( 
    IEnumMoniker  * This,
     ULONG celt);


void __stdcall IEnumMoniker_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Reset_Proxy( 
    IEnumMoniker  * This);


void __stdcall IEnumMoniker_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Clone_Proxy( 
    IEnumMoniker  * This,
     IEnumMoniker  * *ppenum);


void __stdcall IEnumMoniker_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2172 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IRunnableObject  *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;


    
    struct IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass( 
             LPCLSID lpClsid) = 0;
        
        virtual HRESULT __stdcall Run( 
             LPBINDCTX pbc) = 0;
        
        virtual  BOOL __stdcall IsRunning( void) = 0;
        
        virtual HRESULT __stdcall LockRunning( 
             BOOL fLock,
             BOOL fLastUnlockCloses) = 0;
        
        virtual HRESULT __stdcall SetContainedObject( 
             BOOL fContained) = 0;
        
    };
    














































































#line 2291 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IRunnableObject_GetRunningClass_Proxy( 
    IRunnableObject  * This,
     LPCLSID lpClsid);


void __stdcall IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_Run_Proxy( 
    IRunnableObject  * This,
     LPBINDCTX pbc);


void __stdcall IRunnableObject_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy( 
    IRunnableObject  * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_LockRunning_Proxy( 
    IRunnableObject  * This,
     BOOL fLock,
     BOOL fLastUnlockCloses);


void __stdcall IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_SetContainedObject_Proxy( 
    IRunnableObject  * This,
     BOOL fContained);


void __stdcall IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2356 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IRunningObjectTable  *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;


    
    struct IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register( 
             DWORD grfFlags,
             IUnknown  *punkObject,
             IMoniker  *pmkObjectName,
             DWORD  *pdwRegister) = 0;
        
        virtual HRESULT __stdcall Revoke( 
             DWORD dwRegister) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             IMoniker  *pmkObjectName) = 0;
        
        virtual HRESULT __stdcall GetObjectA( 
             IMoniker  *pmkObjectName,
             IUnknown  * *ppunkObject) = 0;
        
        virtual HRESULT __stdcall NoteChangeTime( 
             DWORD dwRegister,
             FILETIME  *pfiletime) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
             IMoniker  *pmkObjectName,
             FILETIME  *pfiletime) = 0;
        
        virtual HRESULT __stdcall EnumRunning( 
             IEnumMoniker  * *ppenumMoniker) = 0;
        
    };
    


































































































#line 2507 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IRunningObjectTable_Register_Proxy( 
    IRunningObjectTable  * This,
     DWORD grfFlags,
     IUnknown  *punkObject,
     IMoniker  *pmkObjectName,
     DWORD  *pdwRegister);


void __stdcall IRunningObjectTable_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_Revoke_Proxy( 
    IRunningObjectTable  * This,
     DWORD dwRegister);


void __stdcall IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_IsRunning_Proxy( 
    IRunningObjectTable  * This,
     IMoniker  *pmkObjectName);


void __stdcall IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetObject_Proxy( 
    IRunningObjectTable  * This,
     IMoniker  *pmkObjectName,
     IUnknown  * *ppunkObject);


void __stdcall IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_NoteChangeTime_Proxy( 
    IRunningObjectTable  * This,
     DWORD dwRegister,
     FILETIME  *pfiletime);


void __stdcall IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetTimeOfLastChange_Proxy( 
    IRunningObjectTable  * This,
     IMoniker  *pmkObjectName,
     FILETIME  *pfiletime);


void __stdcall IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_EnumRunning_Proxy( 
    IRunningObjectTable  * This,
     IEnumMoniker  * *ppenumMoniker);


void __stdcall IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2602 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IPersist  *LPPERSIST;


extern "C" const IID IID_IPersist;


    
    struct IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
             CLSID  *pClassID) = 0;
        
    };
    


















































#line 2681 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPersist_GetClassID_Proxy( 
    IPersist  * This,
     CLSID  *pClassID);


void __stdcall IPersist_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2698 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IPersistStream  *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;


    
    struct IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             IStream  *pStm) = 0;
        
        virtual HRESULT __stdcall Save( 
             IStream  *pStm,
             BOOL fClearDirty) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULARGE_INTEGER  *pcbSize) = 0;
        
    };
    















































































#line 2815 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPersistStream_IsDirty_Proxy( 
    IPersistStream  * This);


void __stdcall IPersistStream_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Load_Proxy( 
    IPersistStream  * This,
     IStream  *pStm);


void __stdcall IPersistStream_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Save_Proxy( 
    IPersistStream  * This,
     IStream  *pStm,
     BOOL fClearDirty);


void __stdcall IPersistStream_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_GetSizeMax_Proxy( 
    IPersistStream  * This,
     ULARGE_INTEGER  *pcbSize);


void __stdcall IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2868 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IMoniker  *LPMONIKER;

typedef 
enum tagMKSYS
    {	MKSYS_NONE	= 0,
	MKSYS_GENERICCOMPOSITE	= 1,
	MKSYS_FILEMONIKER	= 2,
	MKSYS_ANTIMONIKER	= 3,
	MKSYS_ITEMMONIKER	= 4,
	MKSYS_POINTERMONIKER	= 5,
	MKSYS_CLASSMONIKER	= 7
    }	MKSYS;

typedef  
enum tagMKREDUCE
    {	MKRREDUCE_ONE	= 3 << 16,
	MKRREDUCE_TOUSER	= 2 << 16,
	MKRREDUCE_THROUGHUSER	= 1 << 16,
	MKRREDUCE_ALL	= 0
    }	MKRREDUCE;


extern "C" const IID IID_IMoniker;


    
    struct IMoniker : public IPersistStream
    {
    public:
        virtual  HRESULT __stdcall BindToObject( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             const IID & riidResult,
             void  * *ppvResult) = 0;
        
        virtual  HRESULT __stdcall BindToStorage( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             const IID & riid,
             void  * *ppvObj) = 0;
        
        virtual HRESULT __stdcall Reduce( 
             IBindCtx  *pbc,
             DWORD dwReduceHowFar,
             IMoniker  * *ppmkToLeft,
             IMoniker  * *ppmkReduced) = 0;
        
        virtual HRESULT __stdcall ComposeWith( 
             IMoniker  *pmkRight,
             BOOL fOnlyIfNotGeneric,
             IMoniker  * *ppmkComposite) = 0;
        
        virtual HRESULT __stdcall Enum( 
             BOOL fForward,
             IEnumMoniker  * *ppenumMoniker) = 0;
        
        virtual HRESULT __stdcall IsEqual( 
             IMoniker  *pmkOtherMoniker) = 0;
        
        virtual HRESULT __stdcall Hash( 
             DWORD  *pdwHash) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             IMoniker  *pmkNewlyRunning) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             FILETIME  *pFileTime) = 0;
        
        virtual HRESULT __stdcall Inverse( 
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall CommonPrefixWith( 
             IMoniker  *pmkOther,
             IMoniker  * *ppmkPrefix) = 0;
        
        virtual HRESULT __stdcall RelativePathTo( 
             IMoniker  *pmkOther,
             IMoniker  * *ppmkRelPath) = 0;
        
        virtual HRESULT __stdcall GetDisplayName( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             LPOLESTR  *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall ParseDisplayName( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             LPOLESTR pszDisplayName,
             ULONG  *pchEaten,
             IMoniker  * *ppmkOut) = 0;
        
        virtual HRESULT __stdcall IsSystemMoniker( 
             DWORD  *pdwMksys) = 0;
        
    };
    

















































































































































































































#line 3191 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riidResult,
     IUnknown  * *ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riid,
     IUnknown  * *ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Reduce_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     DWORD dwReduceHowFar,
     IMoniker  * *ppmkToLeft,
     IMoniker  * *ppmkReduced);


void __stdcall IMoniker_Reduce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ComposeWith_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkRight,
     BOOL fOnlyIfNotGeneric,
     IMoniker  * *ppmkComposite);


void __stdcall IMoniker_ComposeWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Enum_Proxy( 
    IMoniker  * This,
     BOOL fForward,
     IEnumMoniker  * *ppenumMoniker);


void __stdcall IMoniker_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsEqual_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkOtherMoniker);


void __stdcall IMoniker_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Hash_Proxy( 
    IMoniker  * This,
     DWORD  *pdwHash);


void __stdcall IMoniker_Hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsRunning_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     IMoniker  *pmkNewlyRunning);


void __stdcall IMoniker_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetTimeOfLastChange_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     FILETIME  *pFileTime);


void __stdcall IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Inverse_Proxy( 
    IMoniker  * This,
     IMoniker  * *ppmk);


void __stdcall IMoniker_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_CommonPrefixWith_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkOther,
     IMoniker  * *ppmkPrefix);


void __stdcall IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_RelativePathTo_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkOther,
     IMoniker  * *ppmkRelPath);


void __stdcall IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetDisplayName_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     LPOLESTR  *ppszDisplayName);


void __stdcall IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ParseDisplayName_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     LPOLESTR pszDisplayName,
     ULONG  *pchEaten,
     IMoniker  * *ppmkOut);


void __stdcall IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsSystemMoniker_Proxy( 
    IMoniker  * This,
     DWORD  *pdwMksys);


void __stdcall IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3400 "C:\\MSDEV\\INCLUDE\\objidl.h"










 



extern "C" const IID IID_IROTData;


    
    struct IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData( 
             byte  *pbData,
             ULONG cbMax,
             ULONG  *pcbData) = 0;
        
    };
    




















































#line 3481 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IROTData_GetComparisonData_Proxy( 
    IROTData  * This,
     byte  *pbData,
     ULONG cbMax,
     ULONG  *pcbData);


void __stdcall IROTData_GetComparisonData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3500 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumString  *LPENUMSTRING;


extern "C" const IID IID_IEnumString;


    
    struct IEnumString : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             LPOLESTR  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumString  * *ppenum) = 0;
        
    };
    








































































#line 3611 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumString_RemoteNext_Proxy( 
    IEnumString  * This,
     ULONG celt,
     LPOLESTR  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Skip_Proxy( 
    IEnumString  * This,
     ULONG celt);


void __stdcall IEnumString_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Reset_Proxy( 
    IEnumString  * This);


void __stdcall IEnumString_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Clone_Proxy( 
    IEnumString  * This,
     IEnumString  * *ppenum);


void __stdcall IEnumString_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3665 "C:\\MSDEV\\INCLUDE\\objidl.h"










 



extern "C" const IID IID_ISequentialStream;


    
    struct ISequentialStream : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             void  *pv,
             ULONG cb,
             ULONG  *pcbRead) = 0;
        
        virtual  HRESULT __stdcall Write( 
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
    };
    





























































#line 3760 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall ISequentialStream_RemoteRead_Proxy( 
    ISequentialStream  * This,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy( 
    ISequentialStream  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3793 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IStream  *LPSTREAM;

typedef struct  tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    }	STATSTG;

typedef 
enum tagSTGTY
    {	STGTY_STORAGE	= 1,
	STGTY_STREAM	= 2,
	STGTY_LOCKBYTES	= 3,
	STGTY_PROPERTY	= 4
    }	STGTY;

typedef 
enum tagSTREAM_SEEK
    {	STREAM_SEEK_SET	= 0,
	STREAM_SEEK_CUR	= 1,
	STREAM_SEEK_END	= 2
    }	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {	LOCK_WRITE	= 1,
	LOCK_EXCLUSIVE	= 2,
	LOCK_ONLYONCE	= 4
    }	LOCKTYPE;


extern "C" const IID IID_IStream;


    
    struct IStream : public ISequentialStream
    {
    public:
        virtual  HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER  *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER libNewSize) = 0;
        
        virtual  HRESULT __stdcall CopyTo( 
             IStream  *pstm,
             ULARGE_INTEGER cb,
             ULARGE_INTEGER  *pcbRead,
             ULARGE_INTEGER  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG  *pstatstg,
             DWORD grfStatFlag) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IStream  * *ppstm) = 0;
        
    };
    






































































































































#line 4026 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IStream_RemoteSeek_Proxy( 
    IStream  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_SetSize_Proxy( 
    IStream  * This,
     ULARGE_INTEGER libNewSize);


void __stdcall IStream_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStream_RemoteCopyTo_Proxy( 
    IStream  * This,
     IStream  *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER  *pcbRead,
     ULARGE_INTEGER  *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Commit_Proxy( 
    IStream  * This,
     DWORD grfCommitFlags);


void __stdcall IStream_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Revert_Proxy( 
    IStream  * This);


void __stdcall IStream_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_LockRegion_Proxy( 
    IStream  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_UnlockRegion_Proxy( 
    IStream  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Stat_Proxy( 
    IStream  * This,
     STATSTG  *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStream_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Clone_Proxy( 
    IStream  * This,
     IStream  * *ppstm);


void __stdcall IStream_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4148 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumSTATSTG  *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;


    
    struct IEnumSTATSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATSTG  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATSTG  * *ppenum) = 0;
        
    };
    








































































#line 4259 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy( 
    IEnumSTATSTG  * This,
     ULONG celt,
     STATSTG  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Skip_Proxy( 
    IEnumSTATSTG  * This,
     ULONG celt);


void __stdcall IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Reset_Proxy( 
    IEnumSTATSTG  * This);


void __stdcall IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Clone_Proxy( 
    IEnumSTATSTG  * This,
     IEnumSTATSTG  * *ppenum);


void __stdcall IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4313 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IStorage  *LPSTORAGE;

typedef struct  tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
     OLECHAR rgString[ 1 ];
    }	RemSNB;

typedef  RemSNB  *wireSNB;

typedef  OLECHAR  * *SNB;


extern "C" const IID IID_IStorage;


    
    struct IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream( 
             const OLECHAR  *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStream  * *ppstm) = 0;
        
        virtual  HRESULT __stdcall OpenStream( 
             const OLECHAR  *pwcsName,
             void  *reserved1,
             DWORD grfMode,
             DWORD reserved2,
             IStream  * *ppstm) = 0;
        
        virtual HRESULT __stdcall CreateStorage( 
             const OLECHAR  *pwcsName,
             DWORD grfMode,
             DWORD dwStgFmt,
             DWORD reserved2,
             IStorage  * *ppstg) = 0;
        
        virtual HRESULT __stdcall OpenStorage( 
             const OLECHAR  *pwcsName,
             IStorage  *pstgPriority,
             DWORD grfMode,
             SNB snbExclude,
             DWORD reserved,
             IStorage  * *ppstg) = 0;
        
        virtual HRESULT __stdcall CopyTo( 
             DWORD ciidExclude,
             const IID  *rgiidExclude,
             SNB snbExclude,
             IStorage  *pstgDest) = 0;
        
        virtual HRESULT __stdcall MoveElementTo( 
             const OLECHAR  *pwcsName,
             IStorage  *pstgDest,
             const OLECHAR  *pwcsNewName,
             DWORD grfFlags) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual  HRESULT __stdcall EnumElements( 
             DWORD reserved1,
             void  *reserved2,
             DWORD reserved3,
             IEnumSTATSTG  * *ppenum) = 0;
        
        virtual HRESULT __stdcall DestroyElement( 
             const OLECHAR  *pwcsName) = 0;
        
        virtual HRESULT __stdcall RenameElement( 
             const OLECHAR  *pwcsOldName,
             const OLECHAR  *pwcsNewName) = 0;
        
        virtual HRESULT __stdcall SetElementTimes( 
             const OLECHAR  *pwcsName,
             const FILETIME  *pctime,
             const FILETIME  *patime,
             const FILETIME  *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
             const CLSID & clsid) = 0;
        
        virtual HRESULT __stdcall SetStateBits( 
             DWORD grfStateBits,
             DWORD grfMask) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG  *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    



















































































































































































#line 4605 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IStorage_CreateStream_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStream  * *ppstm);


void __stdcall IStorage_CreateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteOpenStream_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     unsigned long cbReserved1,
     byte  *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream  * *ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CreateStorage_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     DWORD grfMode,
     DWORD dwStgFmt,
     DWORD reserved2,
     IStorage  * *ppstg);


void __stdcall IStorage_CreateStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_OpenStorage_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     IStorage  *pstgPriority,
     DWORD grfMode,
     SNB snbExclude,
     DWORD reserved,
     IStorage  * *ppstg);


void __stdcall IStorage_OpenStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CopyTo_Proxy( 
    IStorage  * This,
     DWORD ciidExclude,
     const IID  *rgiidExclude,
     SNB snbExclude,
     IStorage  *pstgDest);


void __stdcall IStorage_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_MoveElementTo_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     IStorage  *pstgDest,
     const OLECHAR  *pwcsNewName,
     DWORD grfFlags);


void __stdcall IStorage_MoveElementTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Commit_Proxy( 
    IStorage  * This,
     DWORD grfCommitFlags);


void __stdcall IStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Revert_Proxy( 
    IStorage  * This);


void __stdcall IStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteEnumElements_Proxy( 
    IStorage  * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte  *reserved2,
     DWORD reserved3,
     IEnumSTATSTG  * *ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_DestroyElement_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName);


void __stdcall IStorage_DestroyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_RenameElement_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsOldName,
     const OLECHAR  *pwcsNewName);


void __stdcall IStorage_RenameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetElementTimes_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     const FILETIME  *pctime,
     const FILETIME  *patime,
     const FILETIME  *pmtime);


void __stdcall IStorage_SetElementTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetClass_Proxy( 
    IStorage  * This,
     const CLSID & clsid);


void __stdcall IStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetStateBits_Proxy( 
    IStorage  * This,
     DWORD grfStateBits,
     DWORD grfMask);


void __stdcall IStorage_SetStateBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Stat_Proxy( 
    IStorage  * This,
     STATSTG  *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4823 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IPersistFile  *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;


    
    struct IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             LPCOLESTR pszFileName,
             DWORD dwMode) = 0;
        
        virtual HRESULT __stdcall Save( 
             LPCOLESTR pszFileName,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             LPCOLESTR pszFileName) = 0;
        
        virtual HRESULT __stdcall GetCurFile( 
             LPOLESTR  *ppszFileName) = 0;
        
    };
    























































































#line 4952 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPersistFile_IsDirty_Proxy( 
    IPersistFile  * This);


void __stdcall IPersistFile_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Load_Proxy( 
    IPersistFile  * This,
     LPCOLESTR pszFileName,
     DWORD dwMode);


void __stdcall IPersistFile_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Save_Proxy( 
    IPersistFile  * This,
     LPCOLESTR pszFileName,
     BOOL fRemember);


void __stdcall IPersistFile_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_SaveCompleted_Proxy( 
    IPersistFile  * This,
     LPCOLESTR pszFileName);


void __stdcall IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_GetCurFile_Proxy( 
    IPersistFile  * This,
     LPOLESTR  *ppszFileName);


void __stdcall IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5018 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IPersistStorage  *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;


    
    struct IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall InitNew( 
             IStorage  *pStg) = 0;
        
        virtual HRESULT __stdcall Load( 
             IStorage  *pStg) = 0;
        
        virtual HRESULT __stdcall Save( 
             IStorage  *pStgSave,
             BOOL fSameAsLoad) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             IStorage  *pStgNew) = 0;
        
        virtual HRESULT __stdcall HandsOffStorage( void) = 0;
        
    };
    




























































































#line 5153 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPersistStorage_IsDirty_Proxy( 
    IPersistStorage  * This);


void __stdcall IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_InitNew_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStg);


void __stdcall IPersistStorage_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Load_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStg);


void __stdcall IPersistStorage_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Save_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStgSave,
     BOOL fSameAsLoad);


void __stdcall IPersistStorage_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_SaveCompleted_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStgNew);


void __stdcall IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_HandsOffStorage_Proxy( 
    IPersistStorage  * This);


void __stdcall IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5229 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  ILockBytes  *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;


    
    struct ILockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall ReadAt( 
             ULARGE_INTEGER ulOffset,
             void  *pv,
             ULONG cb,
             ULONG  *pcbRead) = 0;
        
        virtual  HRESULT __stdcall WriteAt( 
             ULARGE_INTEGER ulOffset,
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Flush( void) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER cb) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG  *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    






































































































#line 5388 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Flush_Proxy( 
    ILockBytes  * This);


void __stdcall ILockBytes_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_SetSize_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER cb);


void __stdcall ILockBytes_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_LockRegion_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_UnlockRegion_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Stat_Proxy( 
    ILockBytes  * This,
     STATSTG  *pstatstg,
     DWORD grfStatFlag);


void __stdcall ILockBytes_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5487 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumFORMATETC  *LPENUMFORMATETC;

typedef struct  tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
     BYTE tdData[ 1 ];
    }	DVTARGETDEVICE;

typedef CLIPFORMAT  *LPCLIPFORMAT;

typedef struct  tagFORMATETC
    {
    CLIPFORMAT cfFormat;
     DVTARGETDEVICE  *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    }	FORMATETC;

typedef struct tagFORMATETC  *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;


    
    struct IEnumFORMATETC : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             FORMATETC  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumFORMATETC  * *ppenum) = 0;
        
    };
    








































































#line 5621 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy( 
    IEnumFORMATETC  * This,
     ULONG celt,
     FORMATETC  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Skip_Proxy( 
    IEnumFORMATETC  * This,
     ULONG celt);


void __stdcall IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Reset_Proxy( 
    IEnumFORMATETC  * This);


void __stdcall IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Clone_Proxy( 
    IEnumFORMATETC  * This,
     IEnumFORMATETC  * *ppenum);


void __stdcall IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5675 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumSTATDATA  *LPENUMSTATDATA;

typedef 
enum tagADVF
    {	ADVF_NODATA	= 1,
	ADVF_PRIMEFIRST	= 2,
	ADVF_ONLYONCE	= 4,
	ADVF_DATAONSTOP	= 64,
	ADVFCACHE_NOHANDLER	= 8,
	ADVFCACHE_FORCEBUILTIN	= 16,
	ADVFCACHE_ONSAVE	= 32
    }	ADVF;

typedef struct  tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
     IAdviseSink  *pAdvSink;
    DWORD dwConnection;
    }	STATDATA;

typedef STATDATA  *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;


    
    struct IEnumSTATDATA : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATDATA  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATDATA  * *ppenum) = 0;
        
    };
    








































































#line 5807 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy( 
    IEnumSTATDATA  * This,
     ULONG celt,
     STATDATA  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Skip_Proxy( 
    IEnumSTATDATA  * This,
     ULONG celt);


void __stdcall IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Reset_Proxy( 
    IEnumSTATDATA  * This);


void __stdcall IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Clone_Proxy( 
    IEnumSTATDATA  * This,
     IEnumSTATDATA  * *ppenum);


void __stdcall IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5861 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IRootStorage  *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;


    
    struct IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile( 
             LPOLESTR pszFile) = 0;
        
    };
    


















































#line 5940 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IRootStorage_SwitchToFile_Proxy( 
    IRootStorage  * This,
     LPOLESTR pszFile);


void __stdcall IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5957 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef IAdviseSink  *LPADVISESINK;

typedef  
enum tagTYMED
    {	TYMED_HGLOBAL	= 1,
	TYMED_FILE	= 2,
	TYMED_ISTREAM	= 4,
	TYMED_ISTORAGE	= 8,
	TYMED_GDI	= 16,
	TYMED_MFPICT	= 32,
	TYMED_ENHMF	= 64,
	TYMED_NULL	= 0
    }	TYMED;


#pragma warning(disable:4200)
#line 5987 "C:\\MSDEV\\INCLUDE\\objidl.h"
typedef struct  tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
     byte data[ 1 ];
    }	RemSTGMEDIUM;


#pragma warning(default:4200)
#line 6000 "C:\\MSDEV\\INCLUDE\\objidl.h"















typedef struct  tagSTGMEDIUM
    {
    DWORD tymed;
     union 
        {
         HBITMAP hBitmap;
         HMETAFILEPICT hMetaFilePict;
         HENHMETAFILE hEnhMetaFile;
         HGLOBAL hGlobal;
         LPOLESTR lpszFileName;
         IStream  *pstm;
         IStorage  *pstg;
           
        }	;
     IUnknown  *pUnkForRelease;
    }	uSTGMEDIUM;

#line 6033 "C:\\MSDEV\\INCLUDE\\objidl.h"
typedef struct  _GDI_OBJECT
    {
    DWORD ObjectType;
      union __MIDL_IAdviseSink_0002
        {
         wireHBITMAP hBitmap;
         wireHPALETTE hPalette;
         wireHGLOBAL hGeneric;
        }	u;
    }	GDI_OBJECT;

typedef struct  _userSTGMEDIUM
    {
    struct  _STGMEDIUM_UNION
        {
        DWORD tymed;
          union __MIDL_IAdviseSink_0003
            {
               
             wireHMETAFILEPICT hMetaFilePict;
             wireHENHMETAFILE hHEnhMetaFile;
             GDI_OBJECT  *hGdiHandle;
             wireHGLOBAL hGlobal;
             LPOLESTR lpszFileName;
             BYTE_BLOB  *pstm;
             BYTE_BLOB  *pstg;
            }	u;
        }	;
    IUnknown  *pUnkForRelease;
    }	userSTGMEDIUM;

typedef  userSTGMEDIUM  *wireSTGMEDIUM;

typedef  uSTGMEDIUM STGMEDIUM;

typedef  userSTGMEDIUM  *wireASYNC_STGMEDIUM;

typedef  STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM  *LPSTGMEDIUM;

typedef struct  _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    }	userFLAG_STGMEDIUM;

typedef  userFLAG_STGMEDIUM  *wireFLAG_STGMEDIUM;

typedef  struct  _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    }	FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;


    
    struct IAdviseSink : public IUnknown
    {
    public:
        virtual  void __stdcall OnDataChange( 
             FORMATETC  *pFormatetc,
             STGMEDIUM  *pStgmed) = 0;
        
        virtual  void __stdcall OnViewChange( 
             DWORD dwAspect,
             LONG lindex) = 0;
        
        virtual  void __stdcall OnRename( 
             IMoniker  *pmk) = 0;
        
        virtual  void __stdcall OnSave( void) = 0;
        
        virtual  void __stdcall OnClose( void) = 0;
        
    };
    














































































#line 6194 "C:\\MSDEV\\INCLUDE\\objidl.h"



 void __stdcall IAdviseSink_RemoteOnDataChange_Proxy( 
    IAdviseSink  * This,
     FORMATETC  *pFormatetc,
     ASYNC_STGMEDIUM  *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 void __stdcall IAdviseSink_RemoteOnViewChange_Proxy( 
    IAdviseSink  * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 void __stdcall IAdviseSink_RemoteOnRename_Proxy( 
    IAdviseSink  * This,
     IMoniker  *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 void __stdcall IAdviseSink_RemoteOnSave_Proxy( 
    IAdviseSink  * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy( 
    IAdviseSink  * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6259 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IAdviseSink2  *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;


    
    struct IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual  void __stdcall OnLinkSrcChange( 
             IMoniker  *pmk) = 0;
        
    };
    






















































































#line 6374 "C:\\MSDEV\\INCLUDE\\objidl.h"



 void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy( 
    IAdviseSink2  * This,
     IMoniker  *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6391 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IDataObject  *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {	DATADIR_GET	= 1,
	DATADIR_SET	= 2
    }	DATADIR;


extern "C" const IID IID_IDataObject;


    
    struct IDataObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetData( 
             FORMATETC  *pformatetcIn,
             STGMEDIUM  *pmedium) = 0;
        
        virtual  HRESULT __stdcall GetDataHere( 
             FORMATETC  *pformatetc,
             STGMEDIUM  *pmedium) = 0;
        
        virtual HRESULT __stdcall QueryGetData( 
             FORMATETC  *pformatetc) = 0;
        
        virtual HRESULT __stdcall GetCanonicalFormatEtc( 
             FORMATETC  *pformatectIn,
             FORMATETC  *pformatetcOut) = 0;
        
        virtual  HRESULT __stdcall SetData( 
             FORMATETC  *pformatetc,
             STGMEDIUM  *pmedium,
             BOOL fRelease) = 0;
        
        virtual HRESULT __stdcall EnumFormatEtc( 
             DWORD dwDirection,
             IEnumFORMATETC  * *ppenumFormatEtc) = 0;
        
        virtual HRESULT __stdcall DAdvise( 
             FORMATETC  *pformatetc,
             DWORD advf,
             IAdviseSink  *pAdvSink,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall DUnadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumDAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
    };
    



















































































































#line 6574 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IDataObject_RemoteGetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetcIn,
     STGMEDIUM  *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_QueryGetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc);


void __stdcall IDataObject_QueryGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_GetCanonicalFormatEtc_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatectIn,
     FORMATETC  *pformatetcOut);


void __stdcall IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteSetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     FLAG_STGMEDIUM  *pmedium,
     BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumFormatEtc_Proxy( 
    IDataObject  * This,
     DWORD dwDirection,
     IEnumFORMATETC  * *ppenumFormatEtc);


void __stdcall IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DAdvise_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     DWORD advf,
     IAdviseSink  *pAdvSink,
     DWORD  *pdwConnection);


void __stdcall IDataObject_DAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DUnadvise_Proxy( 
    IDataObject  * This,
     DWORD dwConnection);


void __stdcall IDataObject_DUnadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumDAdvise_Proxy( 
    IDataObject  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6696 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IDataAdviseHolder  *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;


    
    struct IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             IDataObject  *pDataObject,
             FORMATETC  *pFetc,
             DWORD advf,
             IAdviseSink  *pAdvise,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnDataChange( 
             IDataObject  *pDataObject,
             DWORD dwReserved,
             DWORD advf) = 0;
        
    };
    













































































#line 6817 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IDataAdviseHolder_Advise_Proxy( 
    IDataAdviseHolder  * This,
     IDataObject  *pDataObject,
     FORMATETC  *pFetc,
     DWORD advf,
     IAdviseSink  *pAdvise,
     DWORD  *pdwConnection);


void __stdcall IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_Unadvise_Proxy( 
    IDataAdviseHolder  * This,
     DWORD dwConnection);


void __stdcall IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_EnumAdvise_Proxy( 
    IDataAdviseHolder  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_SendOnDataChange_Proxy( 
    IDataAdviseHolder  * This,
     IDataObject  *pDataObject,
     DWORD dwReserved,
     DWORD advf);


void __stdcall IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6876 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IMessageFilter  *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {	CALLTYPE_TOPLEVEL	= 1,
	CALLTYPE_NESTED	= 2,
	CALLTYPE_ASYNC	= 3,
	CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
	CALLTYPE_ASYNC_CALLPENDING	= 5
    }	CALLTYPE;

typedef 
enum tagSERVERCALL
    {	SERVERCALL_ISHANDLED	= 0,
	SERVERCALL_REJECTED	= 1,
	SERVERCALL_RETRYLATER	= 2
    }	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {	PENDINGTYPE_TOPLEVEL	= 1,
	PENDINGTYPE_NESTED	= 2
    }	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {	PENDINGMSG_CANCELCALL	= 0,
	PENDINGMSG_WAITNOPROCESS	= 1,
	PENDINGMSG_WAITDEFPROCESS	= 2
    }	PENDINGMSG;

typedef struct  tagINTERFACEINFO
    {
    IUnknown  *pUnk;
    IID iid;
    WORD wMethod;
    }	INTERFACEINFO;

typedef struct tagINTERFACEINFO  *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;


    
    struct IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall( 
             DWORD dwCallType,
             HTASK htaskCaller,
             DWORD dwTickCount,
             LPINTERFACEINFO lpInterfaceInfo) = 0;
        
        virtual DWORD __stdcall RetryRejectedCall( 
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwRejectType) = 0;
        
        virtual DWORD __stdcall MessagePending( 
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwPendingType) = 0;
        
    };
    







































































#line 7027 "C:\\MSDEV\\INCLUDE\\objidl.h"



DWORD __stdcall IMessageFilter_HandleInComingCall_Proxy( 
    IMessageFilter  * This,
     DWORD dwCallType,
     HTASK htaskCaller,
     DWORD dwTickCount,
     LPINTERFACEINFO lpInterfaceInfo);


void __stdcall IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_RetryRejectedCall_Proxy( 
    IMessageFilter  * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwRejectType);


void __stdcall IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_MessagePending_Proxy( 
    IMessageFilter  * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwPendingType);


void __stdcall IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7075 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef unsigned long RPCOLEDATAREP;

typedef struct  tagRPCOLEMESSAGE
    {
    void  *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void  *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void  *reserved2[ 5 ];
    ULONG rpcFlags;
    }	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE  *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;


    
    struct IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer( 
             RPCOLEMESSAGE  *pMessage,
             const IID & riid) = 0;
        
        virtual HRESULT __stdcall SendReceive( 
             RPCOLEMESSAGE  *pMessage,
             ULONG  *pStatus) = 0;
        
        virtual HRESULT __stdcall FreeBuffer( 
             RPCOLEMESSAGE  *pMessage) = 0;
        
        virtual HRESULT __stdcall GetDestCtx( 
             DWORD  *pdwDestContext,
             void  * *ppvDestContext) = 0;
        
        virtual HRESULT __stdcall IsConnected( void) = 0;
        
    };
    
















































































#line 7211 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer_GetBuffer_Proxy( 
    IRpcChannelBuffer  * This,
     RPCOLEMESSAGE  *pMessage,
     const IID & riid);


void __stdcall IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_SendReceive_Proxy( 
    IRpcChannelBuffer  * This,
     RPCOLEMESSAGE  *pMessage,
     ULONG  *pStatus);


void __stdcall IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_FreeBuffer_Proxy( 
    IRpcChannelBuffer  * This,
     RPCOLEMESSAGE  *pMessage);


void __stdcall IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_GetDestCtx_Proxy( 
    IRpcChannelBuffer  * This,
     DWORD  *pdwDestContext,
     void  * *ppvDestContext);


void __stdcall IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_IsConnected_Proxy( 
    IRpcChannelBuffer  * This);


void __stdcall IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7278 "C:\\MSDEV\\INCLUDE\\objidl.h"










 



extern "C" const IID IID_IRpcProxyBuffer;


    
    struct IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             IRpcChannelBuffer  *pRpcChannelBuffer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
    };
    
























































#line 7363 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IRpcProxyBuffer_Connect_Proxy( 
    IRpcProxyBuffer  * This,
     IRpcChannelBuffer  *pRpcChannelBuffer);


void __stdcall IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcProxyBuffer_Disconnect_Proxy( 
    IRpcProxyBuffer  * This);


void __stdcall IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7391 "C:\\MSDEV\\INCLUDE\\objidl.h"










 



extern "C" const IID IID_IRpcStubBuffer;


    
    struct IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             IUnknown  *pUnkServer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
        virtual HRESULT __stdcall Invoke( 
             RPCOLEMESSAGE  *_prpcmsg,
             IRpcChannelBuffer  *_pRpcChannelBuffer) = 0;
        
        virtual IRpcStubBuffer  *__stdcall IsIIDSupported( 
             const IID & riid) = 0;
        
        virtual ULONG __stdcall CountRefs( void) = 0;
        
        virtual HRESULT __stdcall DebugServerQueryInterface( 
            void  * *ppv) = 0;
        
        virtual void __stdcall DebugServerRelease( 
            void  *pv) = 0;
        
    };
    



























































































#line 7526 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IRpcStubBuffer_Connect_Proxy( 
    IRpcStubBuffer  * This,
     IUnknown  *pUnkServer);


void __stdcall IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_Disconnect_Proxy( 
    IRpcStubBuffer  * This);


void __stdcall IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_Invoke_Proxy( 
    IRpcStubBuffer  * This,
     RPCOLEMESSAGE  *_prpcmsg,
     IRpcChannelBuffer  *_pRpcChannelBuffer);


void __stdcall IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


IRpcStubBuffer  *__stdcall IRpcStubBuffer_IsIIDSupported_Proxy( 
    IRpcStubBuffer  * This,
     const IID & riid);


void __stdcall IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IRpcStubBuffer_CountRefs_Proxy( 
    IRpcStubBuffer  * This);


void __stdcall IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_DebugServerQueryInterface_Proxy( 
    IRpcStubBuffer  * This,
    void  * *ppv);


void __stdcall IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_DebugServerRelease_Proxy( 
    IRpcStubBuffer  * This,
    void  *pv);


void __stdcall IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7614 "C:\\MSDEV\\INCLUDE\\objidl.h"










 



extern "C" const IID IID_IPSFactoryBuffer;


    
    struct IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy( 
             IUnknown  *pUnkOuter,
             const IID & riid,
             IRpcProxyBuffer  * *ppProxy,
             void  * *ppv) = 0;
        
        virtual HRESULT __stdcall CreateStub( 
             const IID & riid,
             IUnknown  *pUnkServer,
             IRpcStubBuffer  * *ppStub) = 0;
        
    };
    






























































#line 7711 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPSFactoryBuffer_CreateProxy_Proxy( 
    IPSFactoryBuffer  * This,
     IUnknown  *pUnkOuter,
     const IID & riid,
     IRpcProxyBuffer  * *ppProxy,
     void  * *ppv);


void __stdcall IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPSFactoryBuffer_CreateStub_Proxy( 
    IPSFactoryBuffer  * This,
     const IID & riid,
     IUnknown  *pUnkServer,
     IRpcStubBuffer  * *ppStub);


void __stdcall IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7745 "C:\\MSDEV\\INCLUDE\\objidl.h"







 




























































































































































































































































































#line 8038 "C:\\MSDEV\\INCLUDE\\objidl.h"




extern RPC_IF_HANDLE __MIDL__intf_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0042_v0_0_s_ifspec;









 




extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;









typedef  IPropertyStorage  *LPPROPERTYSTORAGE;

typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct  tagCAUB
    {
    ULONG cElems;
     unsigned char  *pElems;
    }	CAUB;

typedef struct  tagCAI
    {
    ULONG cElems;
     short  *pElems;
    }	CAI;

typedef struct  tagCAUI
    {
    ULONG cElems;
     USHORT  *pElems;
    }	CAUI;

typedef struct  tagCAL
    {
    ULONG cElems;
     long  *pElems;
    }	CAL;

typedef struct  tagCAUL
    {
    ULONG cElems;
     ULONG  *pElems;
    }	CAUL;

typedef struct  tagCAFLT
    {
    ULONG cElems;
     float  *pElems;
    }	CAFLT;

typedef struct  tagCADBL
    {
    ULONG cElems;
     double  *pElems;
    }	CADBL;

typedef struct  tagCACY
    {
    ULONG cElems;
     CY  *pElems;
    }	CACY;

typedef struct  tagCADATE
    {
    ULONG cElems;
     DATE  *pElems;
    }	CADATE;

typedef struct  tagCABSTR
    {
    ULONG cElems;
     BSTR  *pElems;
    }	CABSTR;

typedef struct  tagCABOOL
    {
    ULONG cElems;
     VARIANT_BOOL  *pElems;
    }	CABOOL;

typedef struct  tagCASCODE
    {
    ULONG cElems;
     SCODE  *pElems;
    }	CASCODE;

typedef struct  tagCAPROPVARIANT
    {
    ULONG cElems;
     PROPVARIANT  *pElems;
    }	CAPROPVARIANT;

typedef struct  tagCAH
    {
    ULONG cElems;
     LARGE_INTEGER  *pElems;
    }	CAH;

typedef struct  tagCAUH
    {
    ULONG cElems;
     ULARGE_INTEGER  *pElems;
    }	CAUH;

typedef struct  tagCALPSTR
    {
    ULONG cElems;
     LPSTR  *pElems;
    }	CALPSTR;

typedef struct  tagCALPWSTR
    {
    ULONG cElems;
     LPWSTR  *pElems;
    }	CALPWSTR;

typedef struct  tagCAFILETIME
    {
    ULONG cElems;
     FILETIME  *pElems;
    }	CAFILETIME;

typedef struct  tagCACLIPDATA
    {
    ULONG cElems;
     CLIPDATA  *pElems;
    }	CACLIPDATA;

typedef struct  tagCACLSID
    {
    ULONG cElems;
     CLSID  *pElems;
    }	CACLSID;




#pragma warning(disable:4237)
struct  tagPROPVARIANT
    {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
      union 
        {
           
         UCHAR bVal;
         short iVal;
         USHORT uiVal;
         VARIANT_BOOL boolVal;
         
         long lVal;
         ULONG ulVal;
         float fltVal;
         SCODE scode;
         LARGE_INTEGER hVal;
         ULARGE_INTEGER uhVal;
         double dblVal;
         CY cyVal;
         DATE date;
         FILETIME filetime;
         CLSID  *puuid;
         BLOB blob;
         CLIPDATA  *pclipdata;
         IStream  *pStream;
         IStorage  *pStorage;
         BSTR bstrVal;
         LPSTR pszVal;
         LPWSTR pwszVal;
         CAUB caub;
         CAI cai;
         CAUI caui;
         CABOOL cabool;
         CAL cal;
         CAUL caul;
         CAFLT caflt;
         CASCODE cascode;
         CAH cah;
         CAUH cauh;
         CADBL cadbl;
         CACY cacy;
         CADATE cadate;
         CAFILETIME cafiletime;
         CACLSID cauuid;
         CACLIPDATA caclipdata;
         CABSTR cabstr;
         CALPSTR calpstr;
         CALPWSTR calpwstr;
         CAPROPVARIANT capropvar;
        }	;
    };
typedef struct tagPROPVARIANT  *LPPROPVARIANT;












































typedef struct  tagPROPSPEC
    {
    ULONG ulKind;
      union 
        {
         PROPID propid;
         LPOLESTR lpwstr;
           
        }	;
    }	PROPSPEC;

typedef struct  tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    }	STATPROPSTG;






typedef struct  tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    }	STATPROPSETSTG;


extern "C" const IID IID_IPropertyStorage;


    
    struct IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple( 
             ULONG cpspec,
             const PROPSPEC  rgpspec[  ],
             PROPVARIANT  rgpropvar[  ]) = 0;
        
        virtual HRESULT __stdcall WriteMultiple( 
             ULONG cpspec,
             const PROPSPEC  rgpspec[  ],
             const PROPVARIANT  rgpropvar[  ],
             PROPID propidNameFirst) = 0;
        
        virtual HRESULT __stdcall DeleteMultiple( 
             ULONG cpspec,
             const PROPSPEC  rgpspec[  ]) = 0;
        
        virtual HRESULT __stdcall ReadPropertyNames( 
             ULONG cpropid,
             const PROPID  rgpropid[  ],
             LPOLESTR  rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall WritePropertyNames( 
             ULONG cpropid,
             const PROPID  rgpropid[  ],
             const LPOLESTR  rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall DeletePropertyNames( 
             ULONG cpropid,
             const PROPID  rgpropid[  ]) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall Enum( 
             IEnumSTATPROPSTG  * *ppenum) = 0;
        
        virtual HRESULT __stdcall SetTimes( 
             const FILETIME  *pctime,
             const FILETIME  *patime,
             const FILETIME  *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
             const CLSID & clsid) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATPROPSETSTG  *pstatpsstg) = 0;
        
    };
    











































































































































#line 8531 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPropertyStorage_ReadMultiple_Proxy( 
    IPropertyStorage  * This,
     ULONG cpspec,
     const PROPSPEC  rgpspec[  ],
     PROPVARIANT  rgpropvar[  ]);


void __stdcall IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WriteMultiple_Proxy( 
    IPropertyStorage  * This,
     ULONG cpspec,
     const PROPSPEC  rgpspec[  ],
     const PROPVARIANT  rgpropvar[  ],
     PROPID propidNameFirst);


void __stdcall IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeleteMultiple_Proxy( 
    IPropertyStorage  * This,
     ULONG cpspec,
     const PROPSPEC  rgpspec[  ]);


void __stdcall IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_ReadPropertyNames_Proxy( 
    IPropertyStorage  * This,
     ULONG cpropid,
     const PROPID  rgpropid[  ],
     LPOLESTR  rglpwstrName[  ]);


void __stdcall IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WritePropertyNames_Proxy( 
    IPropertyStorage  * This,
     ULONG cpropid,
     const PROPID  rgpropid[  ],
     const LPOLESTR  rglpwstrName[  ]);


void __stdcall IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeletePropertyNames_Proxy( 
    IPropertyStorage  * This,
     ULONG cpropid,
     const PROPID  rgpropid[  ]);


void __stdcall IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Commit_Proxy( 
    IPropertyStorage  * This,
     DWORD grfCommitFlags);


void __stdcall IPropertyStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Revert_Proxy( 
    IPropertyStorage  * This);


void __stdcall IPropertyStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Enum_Proxy( 
    IPropertyStorage  * This,
     IEnumSTATPROPSTG  * *ppenum);


void __stdcall IPropertyStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetTimes_Proxy( 
    IPropertyStorage  * This,
     const FILETIME  *pctime,
     const FILETIME  *patime,
     const FILETIME  *pmtime);


void __stdcall IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetClass_Proxy( 
    IPropertyStorage  * This,
     const CLSID & clsid);


void __stdcall IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Stat_Proxy( 
    IPropertyStorage  * This,
     STATPROPSETSTG  *pstatpsstg);


void __stdcall IPropertyStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8692 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IPropertySetStorage  *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;


    
    struct IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create( 
             const FMTID & rfmtid,
             const CLSID  *pclsid,
             DWORD grfFlags,
             DWORD grfMode,
             IPropertyStorage  * *ppprstg) = 0;
        
        virtual HRESULT __stdcall Open( 
             const FMTID & rfmtid,
             DWORD grfMode,
             IPropertyStorage  * *ppprstg) = 0;
        
        virtual HRESULT __stdcall Delete( 
             const FMTID & rfmtid) = 0;
        
        virtual HRESULT __stdcall Enum( 
             IEnumSTATPROPSETSTG  * *ppenum) = 0;
        
    };
    













































































#line 8813 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IPropertySetStorage_Create_Proxy( 
    IPropertySetStorage  * This,
     const FMTID & rfmtid,
     const CLSID  *pclsid,
     DWORD grfFlags,
     DWORD grfMode,
     IPropertyStorage  * *ppprstg);


void __stdcall IPropertySetStorage_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Open_Proxy( 
    IPropertySetStorage  * This,
     const FMTID & rfmtid,
     DWORD grfMode,
     IPropertyStorage  * *ppprstg);


void __stdcall IPropertySetStorage_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Delete_Proxy( 
    IPropertySetStorage  * This,
     const FMTID & rfmtid);


void __stdcall IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Enum_Proxy( 
    IPropertySetStorage  * This,
     IEnumSTATPROPSETSTG  * *ppenum);


void __stdcall IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8872 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumSTATPROPSTG  *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;


    
    struct IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATPROPSTG  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATPROPSTG  * *ppenum) = 0;
        
    };
    








































































#line 8983 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSTG  * This,
     ULONG celt,
     STATPROPSTG  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Skip_Proxy( 
    IEnumSTATPROPSTG  * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Reset_Proxy( 
    IEnumSTATPROPSTG  * This);


void __stdcall IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Clone_Proxy( 
    IEnumSTATPROPSTG  * This,
     IEnumSTATPROPSTG  * *ppenum);


void __stdcall IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9037 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef  IEnumSTATPROPSETSTG  *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;


    
    struct IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATPROPSETSTG  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATPROPSETSTG  * *ppenum) = 0;
        
    };
    








































































#line 9148 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt,
     STATPROPSETSTG  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Skip_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Reset_Proxy( 
    IEnumSTATPROPSETSTG  * This);


void __stdcall IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Clone_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     IEnumSTATPROPSETSTG  * *ppenum);


void __stdcall IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9202 "C:\\MSDEV\\INCLUDE\\objidl.h"







 


extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy ( PROPVARIANT * pvarDest, const PROPVARIANT * pvarSrc );
extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear ( PROPVARIANT * pvar );

inline void PropVariantInit ( PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}


#line 9222 "C:\\MSDEV\\INCLUDE\\objidl.h"
extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray ( ULONG cVariants, PROPVARIANT * rgvars );











































































































































































































































































































































































































































































































#line 9715 "C:\\MSDEV\\INCLUDE\\objidl.h"


extern RPC_IF_HANDLE __MIDL__intf_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0049_v0_0_s_ifspec;









 



extern "C" const IID IID_IFillLockBytes;


    
    struct IFillLockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall FillAppend( 
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
        virtual  HRESULT __stdcall FillAt( 
             ULARGE_INTEGER ulOffset,
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall SetFillSize( 
             ULARGE_INTEGER ulSize) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             BOOL bCanceled) = 0;
        
    };
    












































































#line 9835 "C:\\MSDEV\\INCLUDE\\objidl.h"



 HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy( 
    IFillLockBytes  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_SetFillSize_Proxy( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulSize);


void __stdcall IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_Terminate_Proxy( 
    IFillLockBytes  * This,
     BOOL bCanceled);


void __stdcall IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9893 "C:\\MSDEV\\INCLUDE\\objidl.h"










 



extern "C" const IID IID_IProgressNotify;


    
    struct IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress( 
             DWORD dwProgressCurrent,
             DWORD dwProgressMaximum,
             BOOL fAccurate,
             BOOL fOwner) = 0;
        
    };
    





















































#line 9976 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall IProgressNotify_OnProgress_Proxy( 
    IProgressNotify  * This,
     DWORD dwProgressCurrent,
     DWORD dwProgressMaximum,
     BOOL fAccurate,
     BOOL fOwner);


void __stdcall IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9996 "C:\\MSDEV\\INCLUDE\\objidl.h"










 


typedef struct  tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR  *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    }	StorageLayout;


extern "C" const IID IID_ILayoutStorage;


    
    struct ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript( 
             StorageLayout  *pStorageLayout,
             DWORD nEntries,
             DWORD glfInterleavedFlag) = 0;
        
        virtual HRESULT __stdcall BeginMonitor( void) = 0;
        
        virtual HRESULT __stdcall EndMonitor( void) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfile( 
             OLECHAR  *pwcsNewDfName) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes( 
             ILockBytes  *pILockBytes) = 0;
        
    };
    














































































#line 10121 "C:\\MSDEV\\INCLUDE\\objidl.h"



HRESULT __stdcall ILayoutStorage_LayoutScript_Proxy( 
    ILayoutStorage  * This,
     StorageLayout  *pStorageLayout,
     DWORD nEntries,
     DWORD glfInterleavedFlag);


void __stdcall ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_BeginMonitor_Proxy( 
    ILayoutStorage  * This);


void __stdcall ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_EndMonitor_Proxy( 
    ILayoutStorage  * This);


void __stdcall ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfile_Proxy( 
    ILayoutStorage  * This,
     OLECHAR  *pwcsNewDfName);


void __stdcall ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy( 
    ILayoutStorage  * This,
     ILockBytes  *pILockBytes);


void __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10186 "C:\\MSDEV\\INCLUDE\\objidl.h"




unsigned long             __stdcall  ASYNC_STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , ASYNC_STGMEDIUM  * ); 
unsigned char  * __stdcall  ASYNC_STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, ASYNC_STGMEDIUM  * ); 
unsigned char  * __stdcall  ASYNC_STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, ASYNC_STGMEDIUM  * ); 
void                      __stdcall  ASYNC_STGMEDIUM_UserFree(     unsigned long  *, ASYNC_STGMEDIUM  * ); 

unsigned long             __stdcall  BSTR_UserSize(     unsigned long  *, unsigned long            , BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserMarshal(  unsigned long  *, unsigned char  *, BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserUnmarshal(unsigned long  *, unsigned char  *, BSTR  * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long  *, BSTR  * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long  *, unsigned long            , CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long  *, CLIPFORMAT  * ); 

unsigned long             __stdcall  FLAG_STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , FLAG_STGMEDIUM  * ); 
unsigned char  * __stdcall  FLAG_STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, FLAG_STGMEDIUM  * ); 
unsigned char  * __stdcall  FLAG_STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, FLAG_STGMEDIUM  * ); 
void                      __stdcall  FLAG_STGMEDIUM_UserFree(     unsigned long  *, FLAG_STGMEDIUM  * ); 

unsigned long             __stdcall  SNB_UserSize(     unsigned long  *, unsigned long            , SNB  * ); 
unsigned char  * __stdcall  SNB_UserMarshal(  unsigned long  *, unsigned char  *, SNB  * ); 
unsigned char  * __stdcall  SNB_UserUnmarshal(unsigned long  *, unsigned char  *, SNB  * ); 
void                      __stdcall  SNB_UserFree(     unsigned long  *, SNB  * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long  *, STGMEDIUM  * ); 

 HRESULT __stdcall IEnumUnknown_Next_Proxy( 
    IEnumUnknown  * This,
     ULONG celt,
     IUnknown  * *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumUnknown_Next_Stub( 
    IEnumUnknown  * This,
     ULONG celt,
     IUnknown  * *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IBindCtx_SetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS  *pbindopts);


 HRESULT __stdcall IBindCtx_SetBindOptions_Stub( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);

 HRESULT __stdcall IBindCtx_GetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS  *pbindopts);


 HRESULT __stdcall IBindCtx_GetBindOptions_Stub( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);

 HRESULT __stdcall IEnumMoniker_Next_Proxy( 
    IEnumMoniker  * This,
     ULONG celt,
     IMoniker  * *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumMoniker_Next_Stub( 
    IEnumMoniker  * This,
     ULONG celt,
     IMoniker  * *rgelt,
     ULONG  *pceltFetched);

 BOOL __stdcall IRunnableObject_IsRunning_Proxy( 
    IRunnableObject  * This);


 HRESULT __stdcall IRunnableObject_IsRunning_Stub( 
    IRunnableObject  * This);

 HRESULT __stdcall IMoniker_BindToObject_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riidResult,
     void  * *ppvResult);


 HRESULT __stdcall IMoniker_BindToObject_Stub( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riidResult,
     IUnknown  * *ppvResult);

 HRESULT __stdcall IMoniker_BindToStorage_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riid,
     void  * *ppvObj);


 HRESULT __stdcall IMoniker_BindToStorage_Stub( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riid,
     IUnknown  * *ppvObj);

 HRESULT __stdcall IEnumString_Next_Proxy( 
    IEnumString  * This,
     ULONG celt,
     LPOLESTR  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumString_Next_Stub( 
    IEnumString  * This,
     ULONG celt,
     LPOLESTR  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall ISequentialStream_Read_Proxy( 
    ISequentialStream  * This,
     void  *pv,
     ULONG cb,
     ULONG  *pcbRead);


 HRESULT __stdcall ISequentialStream_Read_Stub( 
    ISequentialStream  * This,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);

 HRESULT __stdcall ISequentialStream_Write_Proxy( 
    ISequentialStream  * This,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall ISequentialStream_Write_Stub( 
    ISequentialStream  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);

 HRESULT __stdcall IStream_Seek_Proxy( 
    IStream  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);


 HRESULT __stdcall IStream_Seek_Stub( 
    IStream  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);

 HRESULT __stdcall IStream_CopyTo_Proxy( 
    IStream  * This,
     IStream  *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER  *pcbRead,
     ULARGE_INTEGER  *pcbWritten);


 HRESULT __stdcall IStream_CopyTo_Stub( 
    IStream  * This,
     IStream  *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER  *pcbRead,
     ULARGE_INTEGER  *pcbWritten);

 HRESULT __stdcall IEnumSTATSTG_Next_Proxy( 
    IEnumSTATSTG  * This,
     ULONG celt,
     STATSTG  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATSTG_Next_Stub( 
    IEnumSTATSTG  * This,
     ULONG celt,
     STATSTG  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IStorage_OpenStream_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     void  *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream  * *ppstm);


 HRESULT __stdcall IStorage_OpenStream_Stub( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     unsigned long cbReserved1,
     byte  *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream  * *ppstm);

 HRESULT __stdcall IStorage_EnumElements_Proxy( 
    IStorage  * This,
     DWORD reserved1,
     void  *reserved2,
     DWORD reserved3,
     IEnumSTATSTG  * *ppenum);


 HRESULT __stdcall IStorage_EnumElements_Stub( 
    IStorage  * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte  *reserved2,
     DWORD reserved3,
     IEnumSTATSTG  * *ppenum);

 HRESULT __stdcall ILockBytes_ReadAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     void  *pv,
     ULONG cb,
     ULONG  *pcbRead);


 HRESULT __stdcall ILockBytes_ReadAt_Stub( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);

 HRESULT __stdcall ILockBytes_WriteAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall ILockBytes_WriteAt_Stub( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);

 HRESULT __stdcall IEnumFORMATETC_Next_Proxy( 
    IEnumFORMATETC  * This,
     ULONG celt,
     FORMATETC  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumFORMATETC_Next_Stub( 
    IEnumFORMATETC  * This,
     ULONG celt,
     FORMATETC  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IEnumSTATDATA_Next_Proxy( 
    IEnumSTATDATA  * This,
     ULONG celt,
     STATDATA  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATDATA_Next_Stub( 
    IEnumSTATDATA  * This,
     ULONG celt,
     STATDATA  *rgelt,
     ULONG  *pceltFetched);

 void __stdcall IAdviseSink_OnDataChange_Proxy( 
    IAdviseSink  * This,
     FORMATETC  *pFormatetc,
     STGMEDIUM  *pStgmed);


 void __stdcall IAdviseSink_OnDataChange_Stub( 
    IAdviseSink  * This,
     FORMATETC  *pFormatetc,
     ASYNC_STGMEDIUM  *pStgmed);

 void __stdcall IAdviseSink_OnViewChange_Proxy( 
    IAdviseSink  * This,
     DWORD dwAspect,
     LONG lindex);


 void __stdcall IAdviseSink_OnViewChange_Stub( 
    IAdviseSink  * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall IAdviseSink_OnRename_Proxy( 
    IAdviseSink  * This,
     IMoniker  *pmk);


 void __stdcall IAdviseSink_OnRename_Stub( 
    IAdviseSink  * This,
     IMoniker  *pmk);

 void __stdcall IAdviseSink_OnSave_Proxy( 
    IAdviseSink  * This);


 void __stdcall IAdviseSink_OnSave_Stub( 
    IAdviseSink  * This);

 void __stdcall IAdviseSink_OnClose_Proxy( 
    IAdviseSink  * This);


 HRESULT __stdcall IAdviseSink_OnClose_Stub( 
    IAdviseSink  * This);

 void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy( 
    IAdviseSink2  * This,
     IMoniker  *pmk);


 void __stdcall IAdviseSink2_OnLinkSrcChange_Stub( 
    IAdviseSink2  * This,
     IMoniker  *pmk);

 HRESULT __stdcall IDataObject_GetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetcIn,
     STGMEDIUM  *pmedium);


 HRESULT __stdcall IDataObject_GetData_Stub( 
    IDataObject  * This,
     FORMATETC  *pformatetcIn,
     STGMEDIUM  *pRemoteMedium);

 HRESULT __stdcall IDataObject_GetDataHere_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pmedium);


 HRESULT __stdcall IDataObject_GetDataHere_Stub( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pRemoteMedium);

 HRESULT __stdcall IDataObject_SetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pmedium,
     BOOL fRelease);


 HRESULT __stdcall IDataObject_SetData_Stub( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     FLAG_STGMEDIUM  *pmedium,
     BOOL fRelease);

 HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy( 
    IEnumSTATPROPSTG  * This,
     ULONG celt,
     STATPROPSTG  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub( 
    IEnumSTATPROPSTG  * This,
     ULONG celt,
     STATPROPSTG  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt,
     STATPROPSETSTG  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt,
     STATPROPSETSTG  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IFillLockBytes_FillAppend_Proxy( 
    IFillLockBytes  * This,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAppend_Stub( 
    IFillLockBytes  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);

 HRESULT __stdcall IFillLockBytes_FillAt_Proxy( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAt_Stub( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);






}
#line 10621 "C:\\MSDEV\\INCLUDE\\objidl.h"

#line 10623 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 120 "C:\\MSDEV\\INCLUDE\\oaidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 

























extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;









 


typedef CY CURRENCY;

typedef struct  tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    }	SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND  *LPSAFEARRAYBOUND;







































































#line 250 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef struct  tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    }	SAFEARRAY;

typedef  SAFEARRAY  *LPSAFEARRAY;







































































#line 333 "C:\\MSDEV\\INCLUDE\\oaidl.h"




#line 338 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef  struct tagVARIANT VARIANT;

struct  tagVARIANT
    {
    union 
        {
        struct  
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union 
                {
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown  *punkVal;
                IDispatch  *pdispVal;
                SAFEARRAY  *parray;
                BYTE  *pbVal;
                SHORT  *piVal;
                LONG  *plVal;
                FLOAT  *pfltVal;
                DOUBLE  *pdblVal;
                VARIANT_BOOL  *pboolVal;
                
                SCODE  *pscode;
                CY  *pcyVal;
                DATE  *pdate;
                BSTR  *pbstrVal;
                IUnknown  * *ppunkVal;
                IDispatch  * *ppdispVal;
                SAFEARRAY  * *pparray;
                VARIANT  *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                DECIMAL  *pdecVal;
                CHAR  *pcVal;
                USHORT  *puiVal;
                ULONG  *pulVal;
                INT  *pintVal;
                UINT  *puintVal;
                }	;
            }	;
        DECIMAL decVal;
        }	;
    };
typedef VARIANT  *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT  *LPVARIANTARG;
























































#line 460 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef  
enum tagTYPEKIND
    {	TKIND_ENUM	= 0,
	TKIND_RECORD	= TKIND_ENUM + 1,
	TKIND_MODULE	= TKIND_RECORD + 1,
	TKIND_INTERFACE	= TKIND_MODULE + 1,
	TKIND_DISPATCH	= TKIND_INTERFACE + 1,
	TKIND_COCLASS	= TKIND_DISPATCH + 1,
	TKIND_ALIAS	= TKIND_COCLASS + 1,
	TKIND_UNION	= TKIND_ALIAS + 1,
	TKIND_MAX	= TKIND_UNION + 1
    }	TYPEKIND;

typedef struct  tagTYPEDESC
    {
     union 
        {
         struct tagTYPEDESC  *lptdesc;
         struct tagARRAYDESC  *lpadesc;
         HREFTYPE hreftype;
           
        }	;
    VARTYPE vt;
    }	TYPEDESC;

typedef struct  tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
     SAFEARRAYBOUND rgbounds[ 1 ];
    }	ARRAYDESC;

typedef struct  tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    }	PARAMDESCEX;

typedef struct tagPARAMDESCEX  *LPPARAMDESCEX;

typedef struct  tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    }	PARAMDESC;

typedef struct tagPARAMDESC  *LPPARAMDESC;















typedef struct  tagIDLDESC
    {
    ULONG dwReserved;
    USHORT wIDLFlags;
    }	IDLDESC;

typedef struct tagIDLDESC  *LPIDLDESC;



















#line 555 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef struct tagELEMDESC {
    TYPEDESC tdesc;             
    union {
        IDLDESC idldesc;        
        PARAMDESC paramdesc;    
    };
} ELEMDESC, * LPELEMDESC;
#line 563 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef struct  tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    }	TYPEATTR;

typedef struct tagTYPEATTR  *LPTYPEATTR;

typedef struct  tagDISPPARAMS
    {
     VARIANTARG  *rgvarg;
     DISPID  *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    }	DISPPARAMS;
















#line 611 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef struct tagEXCEPINFO {
    WORD  wCode;
    WORD  wReserved;
    BSTR  bstrSource;
    BSTR  bstrDescription;
    BSTR  bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;
#line 623 "C:\\MSDEV\\INCLUDE\\oaidl.h"
typedef  
enum tagCALLCONV
    {	CC_FASTCALL	= 0,
	CC_CDECL	= 1,
	CC_MSCPASCAL	= CC_CDECL + 1,
	CC_PASCAL	= CC_MSCPASCAL,
	CC_MACPASCAL	= CC_PASCAL + 1,
	CC_STDCALL	= CC_MACPASCAL + 1,
	CC_FPFASTCALL	= CC_STDCALL + 1,
	CC_SYSCALL	= CC_FPFASTCALL + 1,
	CC_MPWCDECL	= CC_SYSCALL + 1,
	CC_MPWPASCAL	= CC_MPWCDECL + 1,
	CC_MAX	= CC_MPWPASCAL + 1
    }	CALLCONV;

typedef  
enum tagFUNCKIND
    {	FUNC_VIRTUAL	= 0,
	FUNC_PUREVIRTUAL	= FUNC_VIRTUAL + 1,
	FUNC_NONVIRTUAL	= FUNC_PUREVIRTUAL + 1,
	FUNC_STATIC	= FUNC_NONVIRTUAL + 1,
	FUNC_DISPATCH	= FUNC_STATIC + 1
    }	FUNCKIND;

typedef  
enum tagINVOKEKIND
    {	INVOKE_FUNC	= 1,
	INVOKE_PROPERTYGET	= 2,
	INVOKE_PROPERTYPUT	= 4,
	INVOKE_PROPERTYPUTREF	= 8
    }	INVOKEKIND;

typedef struct  tagFUNCDESC
    {
    MEMBERID memid;
     SCODE  *lprgscode;
     ELEMDESC  *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    }	FUNCDESC;

typedef struct tagFUNCDESC  *LPFUNCDESC;

typedef  
enum tagVARKIND
    {	VAR_PERINSTANCE	= 0,
	VAR_STATIC	= VAR_PERINSTANCE + 1,
	VAR_CONST	= VAR_STATIC + 1,
	VAR_DISPATCH	= VAR_CONST + 1
    }	VARKIND;









typedef struct  tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
     union 
        {
         ULONG oInst;
         VARIANT  *lpvarValue;
        }	;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    }	VARDESC;

typedef struct tagVARDESC  *LPVARDESC;

typedef 
enum tagTYPEFLAGS
    {	TYPEFLAG_FAPPOBJECT	= 0x1,
	TYPEFLAG_FCANCREATE	= 0x2,
	TYPEFLAG_FLICENSED	= 0x4,
	TYPEFLAG_FPREDECLID	= 0x8,
	TYPEFLAG_FHIDDEN	= 0x10,
	TYPEFLAG_FCONTROL	= 0x20,
	TYPEFLAG_FDUAL	= 0x40,
	TYPEFLAG_FNONEXTENSIBLE	= 0x80,
	TYPEFLAG_FOLEAUTOMATION	= 0x100,
	TYPEFLAG_FRESTRICTED	= 0x200,
	TYPEFLAG_FAGGREGATABLE	= 0x400,
	TYPEFLAG_FREPLACEABLE	= 0x800,
	TYPEFLAG_FDISPATCHABLE	= 0x1000,
	TYPEFLAG_FREVERSEBIND	= 0x2000
    }	TYPEFLAGS;

typedef 
enum tagFUNCFLAGS
    {	FUNCFLAG_FRESTRICTED	= 0x1,
	FUNCFLAG_FSOURCE	= 0x2,
	FUNCFLAG_FBINDABLE	= 0x4,
	FUNCFLAG_FREQUESTEDIT	= 0x8,
	FUNCFLAG_FDISPLAYBIND	= 0x10,
	FUNCFLAG_FDEFAULTBIND	= 0x20,
	FUNCFLAG_FHIDDEN	= 0x40,
	FUNCFLAG_FUSESGETLASTERROR	= 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM	= 0x100,
	FUNCFLAG_FUIDEFAULT	= 0x200,
	FUNCFLAG_FNONBROWSABLE	= 0x400,
	FUNCFLAG_FREPLACEABLE	= 0x800,
	FUNCFLAG_FIMMEDIATEBIND	= 0x1000
    }	FUNCFLAGS;

typedef 
enum tagVARFLAGS
    {	VARFLAG_FREADONLY	= 0x1,
	VARFLAG_FSOURCE	= 0x2,
	VARFLAG_FBINDABLE	= 0x4,
	VARFLAG_FREQUESTEDIT	= 0x8,
	VARFLAG_FDISPLAYBIND	= 0x10,
	VARFLAG_FDEFAULTBIND	= 0x20,
	VARFLAG_FHIDDEN	= 0x40,
	VARFLAG_FRESTRICTED	= 0x80,
	VARFLAG_FDEFAULTCOLLELEM	= 0x100,
	VARFLAG_FUIDEFAULT	= 0x200,
	VARFLAG_FNONBROWSABLE	= 0x400,
	VARFLAG_FREPLACEABLE	= 0x800,
	VARFLAG_FIMMEDIATEBIND	= 0x1000
    }	VARFLAGS;

typedef  struct  tagCLEANLOCALSTORAGE
    {
    IUnknown  *pInterface;
    PVOID pStorage;
    DWORD flags;
    }	CLEANLOCALSTORAGE;

typedef struct  tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    }	CUSTDATAITEM;

typedef struct tagCUSTDATAITEM  *LPCUSTDATAITEM;

typedef struct  tagCUSTDATA
    {
    DWORD cCustData;
     LPCUSTDATAITEM prgCustData;
    }	CUSTDATA;

typedef struct tagCUSTDATA  *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
#line 785 "C:\\MSDEV\\INCLUDE\\oaidl.h"









 


typedef  ICreateTypeInfo  *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;


    
    struct ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetTypeFlags( 
             UINT uTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             LPOLESTR pStrDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall AddRefTypeInfo( 
             ITypeInfo  *pTInfo,
             HREFTYPE  *phRefType) = 0;
        
        virtual HRESULT __stdcall AddFuncDesc( 
             UINT index,
             FUNCDESC  *pFuncDesc) = 0;
        
        virtual HRESULT __stdcall AddImplType( 
             UINT index,
             HREFTYPE hRefType) = 0;
        
        virtual HRESULT __stdcall SetImplTypeFlags( 
             UINT index,
             INT implTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetAlignment( 
             WORD cbAlignment) = 0;
        
        virtual HRESULT __stdcall SetSchema( 
             LPOLESTR pStrSchema) = 0;
        
        virtual HRESULT __stdcall AddVarDesc( 
             UINT index,
             VARDESC  *pVarDesc) = 0;
        
        virtual HRESULT __stdcall SetFuncAndParamNames( 
             UINT index,
             LPOLESTR  *rgszNames,
             UINT cNames) = 0;
        
        virtual HRESULT __stdcall SetVarName( 
             UINT index,
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetTypeDescAlias( 
             TYPEDESC  *pTDescAlias) = 0;
        
        virtual HRESULT __stdcall DefineFuncAsDllEntry( 
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName) = 0;
        
        virtual HRESULT __stdcall SetFuncDocString( 
             UINT index,
             LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetVarDocString( 
             UINT index,
             LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetMops( 
             UINT index,
             BSTR bstrMops) = 0;
        
        virtual HRESULT __stdcall SetTypeIdldesc( 
             IDLDESC  *pIdlDesc) = 0;
        
        virtual HRESULT __stdcall LayOut( void) = 0;
        
    };
    



























































































































































































































#line 1113 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo_SetGuid_Proxy( 
    ICreateTypeInfo  * This,
     const GUID & guid);


void __stdcall ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeFlags_Proxy( 
    ICreateTypeInfo  * This,
     UINT uTypeFlags);


void __stdcall ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetDocString_Proxy( 
    ICreateTypeInfo  * This,
     LPOLESTR pStrDoc);


void __stdcall ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetHelpContext_Proxy( 
    ICreateTypeInfo  * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVersion_Proxy( 
    ICreateTypeInfo  * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddRefTypeInfo_Proxy( 
    ICreateTypeInfo  * This,
     ITypeInfo  *pTInfo,
     HREFTYPE  *phRefType);


void __stdcall ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddFuncDesc_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     FUNCDESC  *pFuncDesc);


void __stdcall ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddImplType_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     HREFTYPE hRefType);


void __stdcall ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetImplTypeFlags_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     INT implTypeFlags);


void __stdcall ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetAlignment_Proxy( 
    ICreateTypeInfo  * This,
     WORD cbAlignment);


void __stdcall ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetSchema_Proxy( 
    ICreateTypeInfo  * This,
     LPOLESTR pStrSchema);


void __stdcall ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddVarDesc_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     VARDESC  *pVarDesc);


void __stdcall ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncAndParamNames_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR  *rgszNames,
     UINT cNames);


void __stdcall ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarName_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeDescAlias_Proxy( 
    ICreateTypeInfo  * This,
     TYPEDESC  *pTDescAlias);


void __stdcall ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szDllName,
     LPOLESTR szProcName);


void __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncDocString_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarDocString_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncHelpContext_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarHelpContext_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetMops_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     BSTR bstrMops);


void __stdcall ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeIdldesc_Proxy( 
    ICreateTypeInfo  * This,
     IDLDESC  *pIdlDesc);


void __stdcall ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_LayOut_Proxy( 
    ICreateTypeInfo  * This);


void __stdcall ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1409 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ICreateTypeInfo2  *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;


    
    struct ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteFuncDescByMemId( 
             MEMBERID memid,
             INVOKEKIND invKind) = 0;
        
        virtual HRESULT __stdcall DeleteVarDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteVarDescByMemId( 
             MEMBERID memid) = 0;
        
        virtual HRESULT __stdcall DeleteImplType( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall Invalidate( void) = 0;
        
        virtual HRESULT __stdcall SetName( 
             LPOLESTR szName) = 0;
        
    };
    

















































































































































































































































































































































#line 1829 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDesc_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy( 
    ICreateTypeInfo2  * This,
     MEMBERID memid,
     INVOKEKIND invKind);


void __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDesc_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Proxy( 
    ICreateTypeInfo2  * This,
     MEMBERID memid);


void __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteImplType_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetCustData_Proxy( 
    ICreateTypeInfo2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetParamCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetImplTypeCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetHelpStringContext_Proxy( 
    ICreateTypeInfo2  * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_Invalidate_Proxy( 
    ICreateTypeInfo2  * This);


void __stdcall ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetName_Proxy( 
    ICreateTypeInfo2  * This,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2026 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ICreateTypeLib  *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;


    
    struct ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo( 
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo  * *ppCTInfo) = 0;
        
        virtual HRESULT __stdcall SetName( 
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             LPOLESTR szDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpFileName( 
             LPOLESTR szHelpFileName) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetLcid( 
             LCID lcid) = 0;
        
        virtual HRESULT __stdcall SetLibFlags( 
             UINT uLibFlags) = 0;
        
        virtual HRESULT __stdcall SaveAllChanges( void) = 0;
        
    };
    



















































































































#line 2199 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ICreateTypeLib_CreateTypeInfo_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szName,
     TYPEKIND tkind,
     ICreateTypeInfo  * *ppCTInfo);


void __stdcall ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetName_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetVersion_Proxy( 
    ICreateTypeLib  * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetGuid_Proxy( 
    ICreateTypeLib  * This,
     const GUID & guid);


void __stdcall ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetDocString_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szDoc);


void __stdcall ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpFileName_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szHelpFileName);


void __stdcall ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpContext_Proxy( 
    ICreateTypeLib  * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLcid_Proxy( 
    ICreateTypeLib  * This,
     LCID lcid);


void __stdcall ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLibFlags_Proxy( 
    ICreateTypeLib  * This,
     UINT uLibFlags);


void __stdcall ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SaveAllChanges_Proxy( 
    ICreateTypeLib  * This);


void __stdcall ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2326 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ICreateTypeLib2  *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;


    
    struct ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo( 
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetHelpStringDll( 
             LPOLESTR szFileName) = 0;
        
    };
    

















































































































































#line 2510 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ICreateTypeLib2_DeleteTypeInfo_Proxy( 
    ICreateTypeLib2  * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetCustData_Proxy( 
    ICreateTypeLib2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringContext_Proxy( 
    ICreateTypeLib2  * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringDll_Proxy( 
    ICreateTypeLib2  * This,
     LPOLESTR szFileName);


void __stdcall ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2564 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  IDispatch  *LPDISPATCH;






























extern "C" const IID IID_IDispatch;


    
    struct IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount( 
             UINT  *pctinfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT iTInfo,
             LCID lcid,
             ITypeInfo  * *ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetIDsOfNames( 
             const IID & riid,
             LPOLESTR  *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID  *rgDispId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             DISPID dispIdMember,
             const IID & riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS  *pDispParams,
             VARIANT  *pVarResult,
             EXCEPINFO  *pExcepInfo,
             UINT  *puArgErr) = 0;
        
    };
    




















































































#line 2727 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall IDispatch_GetTypeInfoCount_Proxy( 
    IDispatch  * This,
     UINT  *pctinfo);


void __stdcall IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetTypeInfo_Proxy( 
    IDispatch  * This,
     UINT iTInfo,
     LCID lcid,
     ITypeInfo  * *ppTInfo);


void __stdcall IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetIDsOfNames_Proxy( 
    IDispatch  * This,
     const IID & riid,
     LPOLESTR  *rgszNames,
     UINT cNames,
     LCID lcid,
     DISPID  *rgDispId);


void __stdcall IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDispatch_RemoteInvoke_Proxy( 
    IDispatch  * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *pArgErr,
     UINT cVarRef,
     UINT  *rgVarRefIdx,
     VARIANTARG  *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2796 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  IEnumVARIANT  *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;


    
    struct IEnumVARIANT : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             VARIANT  *rgVar,
             ULONG  *pCeltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumVARIANT  * *ppEnum) = 0;
        
    };
    








































































#line 2907 "C:\\MSDEV\\INCLUDE\\oaidl.h"



 HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy( 
    IEnumVARIANT  * This,
     ULONG celt,
     VARIANT  *rgVar,
     ULONG  *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Skip_Proxy( 
    IEnumVARIANT  * This,
     ULONG celt);


void __stdcall IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Reset_Proxy( 
    IEnumVARIANT  * This);


void __stdcall IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Clone_Proxy( 
    IEnumVARIANT  * This,
     IEnumVARIANT  * *ppEnum);


void __stdcall IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2961 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ITypeComp  *LPTYPECOMP;

typedef  
enum tagDESCKIND
    {	DESCKIND_NONE	= 0,
	DESCKIND_FUNCDESC	= DESCKIND_NONE + 1,
	DESCKIND_VARDESC	= DESCKIND_FUNCDESC + 1,
	DESCKIND_TYPECOMP	= DESCKIND_VARDESC + 1,
	DESCKIND_IMPLICITAPPOBJ	= DESCKIND_TYPECOMP + 1,
	DESCKIND_MAX	= DESCKIND_IMPLICITAPPOBJ + 1
    }	DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC  *lpfuncdesc;
    VARDESC  *lpvardesc;
    ITypeComp  *lptcomp;
    }	BINDPTR;

typedef union tagBINDPTR  *LPBINDPTR;


extern "C" const IID IID_ITypeComp;


    
    struct ITypeComp : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Bind( 
             LPOLESTR szName,
             ULONG lHashVal,
             WORD wFlags,
             ITypeInfo  * *ppTInfo,
             DESCKIND  *pDescKind,
             BINDPTR  *pBindPtr) = 0;
        
        virtual  HRESULT __stdcall BindType( 
             LPOLESTR szName,
             ULONG lHashVal,
             ITypeInfo  * *ppTInfo,
             ITypeComp  * *ppTComp) = 0;
        
    };
    

































































#line 3085 "C:\\MSDEV\\INCLUDE\\oaidl.h"



 HRESULT __stdcall ITypeComp_RemoteBind_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo  * *ppTInfo,
     DESCKIND  *pDescKind,
     LPFUNCDESC  *ppFuncDesc,
     LPVARDESC  *ppVarDesc,
     ITypeComp  * *ppTypeComp,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeComp_RemoteBindType_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3124 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ITypeInfo  *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;


    
    struct ITypeInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetTypeAttr( 
             TYPEATTR  * *ppTypeAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
             ITypeComp  * *ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetFuncDesc( 
             UINT index,
             FUNCDESC  * *ppFuncDesc) = 0;
        
        virtual  HRESULT __stdcall GetVarDesc( 
             UINT index,
             VARDESC  * *ppVarDesc) = 0;
        
        virtual  HRESULT __stdcall GetNames( 
             MEMBERID memid,
             BSTR  *rgBstrNames,
             UINT cMaxNames,
             UINT  *pcNames) = 0;
        
        virtual HRESULT __stdcall GetRefTypeOfImplType( 
             UINT index,
             HREFTYPE  *pRefType) = 0;
        
        virtual HRESULT __stdcall GetImplTypeFlags( 
             UINT index,
             INT  *pImplTypeFlags) = 0;
        
        virtual HRESULT __stdcall GetIDsOfNames( 
             LPOLESTR  *rgszNames,
             UINT cNames,
             MEMBERID  *pMemId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS  *pDispParams,
             VARIANT  *pVarResult,
             EXCEPINFO  *pExcepInfo,
             UINT  *puArgErr) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             MEMBERID memid,
             BSTR  *pBstrName,
             BSTR  *pBstrDocString,
             DWORD  *pdwHelpContext,
             BSTR  *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall GetDllEntry( 
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR  *pBstrDllName,
             BSTR  *pBstrName,
             WORD  *pwOrdinal) = 0;
        
        virtual HRESULT __stdcall GetRefTypeInfo( 
             HREFTYPE hRefType,
             ITypeInfo  * *ppTInfo) = 0;
        
        virtual  HRESULT __stdcall AddressOfMember( 
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID  *ppv) = 0;
        
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown  *pUnkOuter,
             const IID & riid,
             PVOID  *ppvObj) = 0;
        
        virtual HRESULT __stdcall GetMops( 
             MEMBERID memid,
             BSTR  *pBstrMops) = 0;
        
        virtual  HRESULT __stdcall GetContainingTypeLib( 
             ITypeLib  * *ppTLib,
             UINT  *pIndex) = 0;
        
        virtual  void __stdcall ReleaseTypeAttr( 
             TYPEATTR  *pTypeAttr) = 0;
        
        virtual  void __stdcall ReleaseFuncDesc( 
             FUNCDESC  *pFuncDesc) = 0;
        
        virtual  void __stdcall ReleaseVarDesc( 
             VARDESC  *pVarDesc) = 0;
        
    };
    














































































































































































































#line 3443 "C:\\MSDEV\\INCLUDE\\oaidl.h"



 HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy( 
    ITypeInfo  * This,
     LPTYPEATTR  *ppTypeAttr,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetTypeComp_Proxy( 
    ITypeInfo  * This,
     ITypeComp  * *ppTComp);


void __stdcall ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     LPFUNCDESC  *ppFuncDesc,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     LPVARDESC  *ppVarDesc,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *rgBstrNames,
     UINT cMaxNames,
     UINT  *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeOfImplType_Proxy( 
    ITypeInfo  * This,
     UINT index,
     HREFTYPE  *pRefType);


void __stdcall ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetImplTypeFlags_Proxy( 
    ITypeInfo  * This,
     UINT index,
     INT  *pImplTypeFlags);


void __stdcall ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy( 
    ITypeInfo  * This,
     LPOLESTR  *rgszNames,
     UINT cNames,
     MEMBERID  *pMemId);


void __stdcall ITypeInfo_GetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteInvoke_Proxy( 
    ITypeInfo  * This,
     IUnknown  *pIUnk,
     MEMBERID memid,
     DWORD dwFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *pArgErr,
     UINT cVarRef,
     UINT  *rgVarRefIdx,
     VARIANTARG  *rgVarRef);


void __stdcall ITypeInfo_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR  *pBstrDllName,
     BSTR  *pBstrName,
     WORD  *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeInfo_Proxy( 
    ITypeInfo  * This,
     HREFTYPE hRefType,
     ITypeInfo  * *ppTInfo);


void __stdcall ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy( 
    ITypeInfo  * This,
     const IID & riid,
     IUnknown  * *ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetMops_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *pBstrMops);


void __stdcall ITypeInfo_GetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy( 
    ITypeInfo  * This,
     ITypeLib  * *ppTLib,
     UINT  *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3707 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ITypeInfo2  *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;


    
    struct ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind( 
             TYPEKIND  *pTypeKind) = 0;
        
        virtual HRESULT __stdcall GetTypeFlags( 
             ULONG  *pTypeFlags) = 0;
        
        virtual HRESULT __stdcall GetFuncIndexOfMemId( 
             MEMBERID memid,
             INVOKEKIND invKind,
             UINT  *pFuncIndex) = 0;
        
        virtual HRESULT __stdcall GetVarIndexOfMemId( 
             MEMBERID memid,
             UINT  *pVarIndex) = 0;
        
        virtual HRESULT __stdcall GetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             MEMBERID memid,
             LCID lcid,
             BSTR  *pbstrHelpString,
             DWORD  *pdwHelpStringContext,
             BSTR  *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllFuncCustData( 
             UINT index,
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllVarCustData( 
             UINT index,
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllImplTypeCustData( 
             UINT index,
             CUSTDATA  *pCustData) = 0;
        
    };
    














































































































































































































































































































































#line 4134 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ITypeInfo2_GetTypeKind_Proxy( 
    ITypeInfo2  * This,
     TYPEKIND  *pTypeKind);


void __stdcall ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetTypeFlags_Proxy( 
    ITypeInfo2  * This,
     ULONG  *pTypeFlags);


void __stdcall ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncIndexOfMemId_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     UINT  *pFuncIndex);


void __stdcall ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarIndexOfMemId_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     UINT  *pVarIndex);


void __stdcall ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetCustData_Proxy( 
    ITypeInfo2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetParamCustData_Proxy( 
    ITypeInfo2  * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetImplTypeCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllCustData_Proxy( 
    ITypeInfo2  * This,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllFuncCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllParamCustData_Proxy( 
    ITypeInfo2  * This,
     UINT indexFunc,
     UINT indexParam,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllVarCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllImplTypeCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4342 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  
enum tagSYSKIND
    {	SYS_WIN16	= 0,
	SYS_WIN32	= SYS_WIN16 + 1,
	SYS_MAC	= SYS_WIN32 + 1
    }	SYSKIND;

typedef  
enum tagLIBFLAGS
    {	LIBFLAG_FRESTRICTED	= 0x1,
	LIBFLAG_FCONTROL	= 0x2,
	LIBFLAG_FHIDDEN	= 0x4,
	LIBFLAG_FHASDISKIMAGE	= 0x8
    }	LIBFLAGS;

typedef  ITypeLib  *LPTYPELIB;

typedef struct  tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    }	TLIBATTR;

typedef struct tagTLIBATTR  *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;


    
    struct ITypeLib : public IUnknown
    {
    public:
        virtual  UINT __stdcall GetTypeInfoCount( void) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT index,
             ITypeInfo  * *ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoType( 
             UINT index,
             TYPEKIND  *pTKind) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoOfGuid( 
             const GUID & guid,
             ITypeInfo  * *ppTinfo) = 0;
        
        virtual  HRESULT __stdcall GetLibAttr( 
             TLIBATTR  * *ppTLibAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
             ITypeComp  * *ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             INT index,
             BSTR  *pBstrName,
             BSTR  *pBstrDocString,
             DWORD  *pdwHelpContext,
             BSTR  *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall IsName( 
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL  *pfName) = 0;
        
        virtual  HRESULT __stdcall FindName( 
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo  * *ppTInfo,
             MEMBERID  *rgMemId,
             USHORT  *pcFound) = 0;
        
        virtual  void __stdcall ReleaseTLibAttr( 
             TLIBATTR  *pTLibAttr) = 0;
        
    };
    





























































































































#line 4562 "C:\\MSDEV\\INCLUDE\\oaidl.h"



 HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy( 
    ITypeLib  * This,
     UINT  *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfo_Proxy( 
    ITypeLib  * This,
     UINT index,
     ITypeInfo  * *ppTInfo);


void __stdcall ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoType_Proxy( 
    ITypeLib  * This,
     UINT index,
     TYPEKIND  *pTKind);


void __stdcall ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoOfGuid_Proxy( 
    ITypeLib  * This,
     const GUID & guid,
     ITypeInfo  * *ppTinfo);


void __stdcall ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy( 
    ITypeLib  * This,
     LPTLIBATTR  *ppTLibAttr,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeComp_Proxy( 
    ITypeLib  * This,
     ITypeComp  * *ppTComp);


void __stdcall ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy( 
    ITypeLib  * This,
     INT index,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteIsName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL  *pfName,
     BSTR  *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteFindName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     MEMBERID  *rgMemId,
     USHORT  *pcFound,
     BSTR  *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy( 
    ITypeLib  * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4703 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ITypeLib2  *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;


    
    struct ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetLibStatistics( 
             ULONG  *pcUniqueNames,
             ULONG  *pcchUniqueNames) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             INT index,
             LCID lcid,
             BSTR  *pbstrHelpString,
             DWORD  *pdwHelpStringContext,
             BSTR  *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
             CUSTDATA  *pCustData) = 0;
        
    };
    
































































































































































#line 4907 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ITypeLib2_GetCustData_Proxy( 
    ITypeLib2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy( 
    ITypeLib2  * This,
     ULONG  *pcUniqueNames,
     ULONG  *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy( 
    ITypeLib2  * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib2_GetAllCustData_Proxy( 
    ITypeLib2  * This,
     CUSTDATA  *pCustData);


void __stdcall ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4967 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ITypeChangeEvents  *LPTYPECHANGEEVENTS;

typedef 
enum tagCHANGEKIND
    {	CHANGEKIND_ADDMEMBER	= 0,
	CHANGEKIND_DELETEMEMBER	= CHANGEKIND_ADDMEMBER + 1,
	CHANGEKIND_SETNAMES	= CHANGEKIND_DELETEMEMBER + 1,
	CHANGEKIND_SETDOCUMENTATION	= CHANGEKIND_SETNAMES + 1,
	CHANGEKIND_GENERAL	= CHANGEKIND_SETDOCUMENTATION + 1,
	CHANGEKIND_INVALIDATE	= CHANGEKIND_GENERAL + 1,
	CHANGEKIND_CHANGEFAILED	= CHANGEKIND_INVALIDATE + 1,
	CHANGEKIND_MAX	= CHANGEKIND_CHANGEFAILED + 1
    }	CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;


    
    struct ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo  *pTInfoBefore,
             LPOLESTR pStrName,
             INT  *pfCancel) = 0;
        
        virtual HRESULT __stdcall AfterTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo  *pTInfoAfter,
             LPOLESTR pStrName) = 0;
        
    };
    






























































#line 5078 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ITypeChangeEvents_RequestTypeChange_Proxy( 
    ITypeChangeEvents  * This,
     CHANGEKIND changeKind,
     ITypeInfo  *pTInfoBefore,
     LPOLESTR pStrName,
     INT  *pfCancel);


void __stdcall ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeChangeEvents_AfterTypeChange_Proxy( 
    ITypeChangeEvents  * This,
     CHANGEKIND changeKind,
     ITypeInfo  *pTInfoAfter,
     LPOLESTR pStrName);


void __stdcall ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5112 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  IErrorInfo  *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;


    
    struct IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID( 
             GUID  *pGUID) = 0;
        
        virtual HRESULT __stdcall GetSource( 
             BSTR  *pBstrSource) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             BSTR  *pBstrDescription) = 0;
        
        virtual HRESULT __stdcall GetHelpFile( 
             BSTR  *pBstrHelpFile) = 0;
        
        virtual HRESULT __stdcall GetHelpContext( 
             DWORD  *pdwHelpContext) = 0;
        
    };
    














































































#line 5231 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall IErrorInfo_GetGUID_Proxy( 
    IErrorInfo  * This,
     GUID  *pGUID);


void __stdcall IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetSource_Proxy( 
    IErrorInfo  * This,
     BSTR  *pBstrSource);


void __stdcall IErrorInfo_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetDescription_Proxy( 
    IErrorInfo  * This,
     BSTR  *pBstrDescription);


void __stdcall IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpFile_Proxy( 
    IErrorInfo  * This,
     BSTR  *pBstrHelpFile);


void __stdcall IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpContext_Proxy( 
    IErrorInfo  * This,
     DWORD  *pdwHelpContext);


void __stdcall IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5296 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ICreateErrorInfo  *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;


    
    struct ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID( 
             const GUID & rguid) = 0;
        
        virtual HRESULT __stdcall SetSource( 
             LPOLESTR szSource) = 0;
        
        virtual HRESULT __stdcall SetDescription( 
             LPOLESTR szDescription) = 0;
        
        virtual HRESULT __stdcall SetHelpFile( 
             LPOLESTR szHelpFile) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
    };
    














































































#line 5415 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ICreateErrorInfo_SetGUID_Proxy( 
    ICreateErrorInfo  * This,
     const GUID & rguid);


void __stdcall ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetSource_Proxy( 
    ICreateErrorInfo  * This,
     LPOLESTR szSource);


void __stdcall ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetDescription_Proxy( 
    ICreateErrorInfo  * This,
     LPOLESTR szDescription);


void __stdcall ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpFile_Proxy( 
    ICreateErrorInfo  * This,
     LPOLESTR szHelpFile);


void __stdcall ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpContext_Proxy( 
    ICreateErrorInfo  * This,
     DWORD dwHelpContext);


void __stdcall ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5480 "C:\\MSDEV\\INCLUDE\\oaidl.h"










 


typedef  ISupportErrorInfo  *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;


    
    struct ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo( 
             const IID & riid) = 0;
        
    };
    


















































#line 5559 "C:\\MSDEV\\INCLUDE\\oaidl.h"



HRESULT __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy( 
    ISupportErrorInfo  * This,
     const IID & riid);


void __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5576 "C:\\MSDEV\\INCLUDE\\oaidl.h"




unsigned long             __stdcall  BSTR_UserSize(     unsigned long  *, unsigned long            , BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserMarshal(  unsigned long  *, unsigned char  *, BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserUnmarshal(unsigned long  *, unsigned char  *, BSTR  * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long  *, BSTR  * ); 

unsigned long             __stdcall  CLEANLOCALSTORAGE_UserSize(     unsigned long  *, unsigned long            , CLEANLOCALSTORAGE  * ); 
unsigned char  * __stdcall  CLEANLOCALSTORAGE_UserMarshal(  unsigned long  *, unsigned char  *, CLEANLOCALSTORAGE  * ); 
unsigned char  * __stdcall  CLEANLOCALSTORAGE_UserUnmarshal(unsigned long  *, unsigned char  *, CLEANLOCALSTORAGE  * ); 
void                      __stdcall  CLEANLOCALSTORAGE_UserFree(     unsigned long  *, CLEANLOCALSTORAGE  * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long  *, unsigned long            , VARIANT  * ); 
unsigned char  * __stdcall  VARIANT_UserMarshal(  unsigned long  *, unsigned char  *, VARIANT  * ); 
unsigned char  * __stdcall  VARIANT_UserUnmarshal(unsigned long  *, unsigned char  *, VARIANT  * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long  *, VARIANT  * ); 

 HRESULT __stdcall IDispatch_Invoke_Proxy( 
    IDispatch  * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     WORD wFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *puArgErr);


 HRESULT __stdcall IDispatch_Invoke_Stub( 
    IDispatch  * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *pArgErr,
     UINT cVarRef,
     UINT  *rgVarRefIdx,
     VARIANTARG  *rgVarRef);

 HRESULT __stdcall IEnumVARIANT_Next_Proxy( 
    IEnumVARIANT  * This,
     ULONG celt,
     VARIANT  *rgVar,
     ULONG  *pCeltFetched);


 HRESULT __stdcall IEnumVARIANT_Next_Stub( 
    IEnumVARIANT  * This,
     ULONG celt,
     VARIANT  *rgVar,
     ULONG  *pCeltFetched);

 HRESULT __stdcall ITypeComp_Bind_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo  * *ppTInfo,
     DESCKIND  *pDescKind,
     BINDPTR  *pBindPtr);


 HRESULT __stdcall ITypeComp_Bind_Stub( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo  * *ppTInfo,
     DESCKIND  *pDescKind,
     LPFUNCDESC  *ppFuncDesc,
     LPVARDESC  *ppVarDesc,
     ITypeComp  * *ppTypeComp,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeComp_BindType_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     ITypeComp  * *ppTComp);


 HRESULT __stdcall ITypeComp_BindType_Stub( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo);

 HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy( 
    ITypeInfo  * This,
     TYPEATTR  * *ppTypeAttr);


 HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub( 
    ITypeInfo  * This,
     LPTYPEATTR  *ppTypeAttr,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     FUNCDESC  * *ppFuncDesc);


 HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub( 
    ITypeInfo  * This,
     UINT index,
     LPFUNCDESC  *ppFuncDesc,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     VARDESC  * *ppVarDesc);


 HRESULT __stdcall ITypeInfo_GetVarDesc_Stub( 
    ITypeInfo  * This,
     UINT index,
     LPVARDESC  *ppVarDesc,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeInfo_GetNames_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *rgBstrNames,
     UINT cMaxNames,
     UINT  *pcNames);


 HRESULT __stdcall ITypeInfo_GetNames_Stub( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *rgBstrNames,
     UINT cMaxNames,
     UINT  *pcNames);

 HRESULT __stdcall ITypeInfo_Invoke_Proxy( 
    ITypeInfo  * This,
     PVOID pvInstance,
     MEMBERID memid,
     WORD wFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *puArgErr);


 HRESULT __stdcall ITypeInfo_Invoke_Stub( 
    ITypeInfo  * This,
     IUnknown  *pIUnk,
     MEMBERID memid,
     DWORD dwFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *pArgErr,
     UINT cVarRef,
     UINT  *rgVarRefIdx,
     VARIANTARG  *rgVarRef);

 HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


 HRESULT __stdcall ITypeInfo_GetDocumentation_Stub( 
    ITypeInfo  * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);

 HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     BSTR  *pBstrDllName,
     BSTR  *pBstrName,
     WORD  *pwOrdinal);


 HRESULT __stdcall ITypeInfo_GetDllEntry_Stub( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR  *pBstrDllName,
     BSTR  *pBstrName,
     WORD  *pwOrdinal);

 HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     PVOID  *ppv);


 HRESULT __stdcall ITypeInfo_AddressOfMember_Stub( 
    ITypeInfo  * This);

 HRESULT __stdcall ITypeInfo_CreateInstance_Proxy( 
    ITypeInfo  * This,
     IUnknown  *pUnkOuter,
     const IID & riid,
     PVOID  *ppvObj);


 HRESULT __stdcall ITypeInfo_CreateInstance_Stub( 
    ITypeInfo  * This,
     const IID & riid,
     IUnknown  * *ppvObj);

 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy( 
    ITypeInfo  * This,
     ITypeLib  * *ppTLib,
     UINT  *pIndex);


 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub( 
    ITypeInfo  * This,
     ITypeLib  * *ppTLib,
     UINT  *pIndex);

 void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy( 
    ITypeInfo  * This,
     TYPEATTR  *pTypeAttr);


 HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub( 
    ITypeInfo  * This);

 void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy( 
    ITypeInfo  * This,
     FUNCDESC  *pFuncDesc);


 HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub( 
    ITypeInfo  * This);

 void __stdcall ITypeInfo_ReleaseVarDesc_Proxy( 
    ITypeInfo  * This,
     VARDESC  *pVarDesc);


 HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub( 
    ITypeInfo  * This);

 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     LCID lcid,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub( 
    ITypeInfo2  * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);

 UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy( 
    ITypeLib  * This);


 HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub( 
    ITypeLib  * This,
     UINT  *pcTInfo);

 HRESULT __stdcall ITypeLib_GetLibAttr_Proxy( 
    ITypeLib  * This,
     TLIBATTR  * *ppTLibAttr);


 HRESULT __stdcall ITypeLib_GetLibAttr_Stub( 
    ITypeLib  * This,
     LPTLIBATTR  *ppTLibAttr,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeLib_GetDocumentation_Proxy( 
    ITypeLib  * This,
     INT index,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


 HRESULT __stdcall ITypeLib_GetDocumentation_Stub( 
    ITypeLib  * This,
     INT index,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);

 HRESULT __stdcall ITypeLib_IsName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL  *pfName);


 HRESULT __stdcall ITypeLib_IsName_Stub( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL  *pfName,
     BSTR  *pBstrLibName);

 HRESULT __stdcall ITypeLib_FindName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     MEMBERID  *rgMemId,
     USHORT  *pcFound);


 HRESULT __stdcall ITypeLib_FindName_Stub( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     MEMBERID  *rgMemId,
     USHORT  *pcFound,
     BSTR  *pBstrLibName);

 void __stdcall ITypeLib_ReleaseTLibAttr_Proxy( 
    ITypeLib  * This,
     TLIBATTR  *pTLibAttr);


 HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub( 
    ITypeLib  * This);

 HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy( 
    ITypeLib2  * This,
     ULONG  *pcUniqueNames,
     ULONG  *pcchUniqueNames);


 HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub( 
    ITypeLib2  * This,
     ULONG  *pcUniqueNames,
     ULONG  *pcchUniqueNames);

 HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy( 
    ITypeLib2  * This,
     INT index,
     LCID lcid,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


 HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub( 
    ITypeLib2  * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);






}
#line 5966 "C:\\MSDEV\\INCLUDE\\oaidl.h"

#line 5968 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 54 "C:\\MSDEV\\INCLUDE\\oleauto.h"






extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString(const OLECHAR *);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocString(BSTR *, const OLECHAR *);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringLen(const OLECHAR *, UINT);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocStringLen(BSTR *, const OLECHAR *, UINT);
extern "C" __declspec(dllimport) void __stdcall SysFreeString(BSTR);
extern "C" __declspec(dllimport) UINT __stdcall SysStringLen(BSTR);


extern "C" __declspec(dllimport) UINT __stdcall SysStringByteLen(BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT len);
#line 71 "C:\\MSDEV\\INCLUDE\\oleauto.h"





extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime(DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);


extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
#line 84 "C:\\MSDEV\\INCLUDE\\oleauto.h"






extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim(SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim(SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound(SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound(SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData(SAFEARRAY * psa, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy(SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);






extern "C" __declspec(dllimport) void __stdcall VariantInit(VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear(VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy(VARIANTARG * pvargDest, VARIANTARG * pvargSrc);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd(VARIANT * pvarDest, VARIANTARG * pvargSrc);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);




                                
                                

					
					






extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr (BSTR bstr, SAFEARRAY ** ppsa);
extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector (SAFEARRAY *psa, BSTR *pbstr);
























extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromInt(INT intIn, LONG *plOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp(IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2(SHORT sIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI1(BYTE bIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI2(SHORT uiIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI4(LONG lIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromR4(FLOAT fltIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromR8(DOUBLE dblIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDate(DATE dateIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromCy(CY cyIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI2(USHORT uiIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI4(ULONG ulIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDec(DECIMAL *pdecIn, CHAR *pcOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);








































































typedef struct {
    INT   cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT   cchUsed;
    INT   nBaseShift;
    INT   nPwr10;
} NUMPARSE;





































extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags,
            NUMPARSE * pnumprs, BYTE * rgbDig);

extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum(NUMPARSE * pnumprs, BYTE * rgbDig,
            ULONG dwVtBits, VARIANT * pvar);













typedef struct {
    SYSTEMTIME st;
    USHORT  wDayOfYear;
} UDATE;



extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);



   
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);







typedef ITypeLib * LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;











typedef ITypeInfo * LPTYPEINFO;






typedef ITypeComp * LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;








extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);
#line 554 "C:\\MSDEV\\INCLUDE\\oleauto.h"

extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);












extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib(const OLECHAR  *szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, OLECHAR  *szFullPath,
            OLECHAR  *szHelpDir);




extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, const OLECHAR  *szFile,
            ICreateTypeLib ** ppctlib);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch * LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;   
    VARTYPE vt;         
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;   
    PARAMDATA * ppdata; 
    DISPID dispid;      
    UINT iMeth;         
    CALLCONV cc;        
    UINT cArgs;         
    WORD wFlags;        
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;  
    UINT cMembers;      
} INTERFACEDATA, * LPINTERFACEDATA;






extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(DISPPARAMS * pdispparams, UINT position,
            VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr);



extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);



extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);



extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT  cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);










extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const CLSID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const CLSID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo(ULONG dwReserved, IErrorInfo * perrinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo(ULONG dwReserved, IErrorInfo ** pperrinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo(ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);






#line 714 "C:\\MSDEV\\INCLUDE\\oleauto.h"


#line 717 "C:\\MSDEV\\INCLUDE\\oleauto.h"



















































#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 769 "C:\\MSDEV\\INCLUDE\\oleauto.h"
#line 770 "C:\\MSDEV\\INCLUDE\\oleauto.h"

#line 772 "C:\\MSDEV\\INCLUDE\\oleauto.h"
#line 30 "C:\\MSDEV\\INCLUDE\\ole2.h"


































#line 1 "C:\\MSDEV\\INCLUDE\\oleidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\oleidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\oleidl.h"





extern "C"{
#line 25 "C:\\MSDEV\\INCLUDE\\oleidl.h"

 



typedef struct IOleAdviseHolder IOleAdviseHolder;
#line 32 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleCache IOleCache;
#line 38 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleCache2 IOleCache2;
#line 44 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleCacheControl IOleCacheControl;
#line 50 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IParseDisplayName IParseDisplayName;
#line 56 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleContainer IOleContainer;
#line 62 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleClientSite IOleClientSite;
#line 68 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleObject IOleObject;
#line 74 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleWindow IOleWindow;
#line 80 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleLink IOleLink;
#line 86 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleItemContainer IOleItemContainer;
#line 92 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
#line 98 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
#line 104 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleInPlaceFrame IOleInPlaceFrame;
#line 110 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleInPlaceObject IOleInPlaceObject;
#line 116 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IOleInPlaceSite IOleInPlaceSite;
#line 122 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IContinue IContinue;
#line 128 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IViewObject IViewObject;
#line 134 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IViewObject2 IViewObject2;
#line 140 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IDropSource IDropSource;
#line 146 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IDropTarget IDropTarget;
#line 152 "C:\\MSDEV\\INCLUDE\\oleidl.h"




typedef struct IEnumOLEVERB IEnumOLEVERB;
#line 158 "C:\\MSDEV\\INCLUDE\\oleidl.h"



#line 1 "C:\\MSDEV\\INCLUDE\\objidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\objidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\objidl.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 162 "C:\\MSDEV\\INCLUDE\\oleidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 












extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;









 


typedef  IOleAdviseHolder  *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;


    
    struct IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             IAdviseSink  *pAdvise,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnRename( 
             IMoniker  *pmk) = 0;
        
        virtual HRESULT __stdcall SendOnSave( void) = 0;
        
        virtual HRESULT __stdcall SendOnClose( void) = 0;
        
    };
    




















































































#line 312 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleAdviseHolder_Advise_Proxy( 
    IOleAdviseHolder  * This,
     IAdviseSink  *pAdvise,
     DWORD  *pdwConnection);


void __stdcall IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_Unadvise_Proxy( 
    IOleAdviseHolder  * This,
     DWORD dwConnection);


void __stdcall IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_EnumAdvise_Proxy( 
    IOleAdviseHolder  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnRename_Proxy( 
    IOleAdviseHolder  * This,
     IMoniker  *pmk);


void __stdcall IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnSave_Proxy( 
    IOleAdviseHolder  * This);


void __stdcall IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnClose_Proxy( 
    IOleAdviseHolder  * This);


void __stdcall IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 388 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleCache  *LPOLECACHE;


extern "C" const IID IID_IOleCache;


    
    struct IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache( 
             FORMATETC  *pformatetc,
             DWORD advf,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Uncache( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumCache( 
             IEnumSTATDATA  * *ppenumSTATDATA) = 0;
        
        virtual HRESULT __stdcall InitCache( 
             IDataObject  *pDataObject) = 0;
        
        virtual HRESULT __stdcall SetData( 
             FORMATETC  *pformatetc,
             STGMEDIUM  *pmedium,
             BOOL fRelease) = 0;
        
    };
    


















































































#line 515 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleCache_Cache_Proxy( 
    IOleCache  * This,
     FORMATETC  *pformatetc,
     DWORD advf,
     DWORD  *pdwConnection);


void __stdcall IOleCache_Cache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_Uncache_Proxy( 
    IOleCache  * This,
     DWORD dwConnection);


void __stdcall IOleCache_Uncache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_EnumCache_Proxy( 
    IOleCache  * This,
     IEnumSTATDATA  * *ppenumSTATDATA);


void __stdcall IOleCache_EnumCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_InitCache_Proxy( 
    IOleCache  * This,
     IDataObject  *pDataObject);


void __stdcall IOleCache_InitCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_SetData_Proxy( 
    IOleCache  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pmedium,
     BOOL fRelease);


void __stdcall IOleCache_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 584 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleCache2  *LPOLECACHE2;



















typedef  
enum tagDISCARDCACHE
    {	DISCARDCACHE_SAVEIFDIRTY	= 0,
	DISCARDCACHE_NOSAVE	= 1
    }	DISCARDCACHE;


extern "C" const IID IID_IOleCache2;


    
    struct IOleCache2 : public IOleCache
    {
    public:
        virtual  HRESULT __stdcall UpdateCache( 
             LPDATAOBJECT pDataObject,
             DWORD grfUpdf,
             LPVOID pReserved) = 0;
        
        virtual HRESULT __stdcall DiscardCache( 
             DWORD dwDiscardOptions) = 0;
        
    };
    



































































































#line 741 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy( 
    IOleCache2  * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     DWORD pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache2_DiscardCache_Proxy( 
    IOleCache2  * This,
     DWORD dwDiscardOptions);


void __stdcall IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 772 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleCacheControl  *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;


    
    struct IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun( 
            LPDATAOBJECT pDataObject) = 0;
        
        virtual HRESULT __stdcall OnStop( void) = 0;
        
    };
    
























































#line 859 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleCacheControl_OnRun_Proxy( 
    IOleCacheControl  * This,
    LPDATAOBJECT pDataObject);


void __stdcall IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCacheControl_OnStop_Proxy( 
    IOleCacheControl  * This);


void __stdcall IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 887 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IParseDisplayName  *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;


    
    struct IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName( 
             IBindCtx  *pbc,
             LPOLESTR pszDisplayName,
             ULONG  *pchEaten,
             IMoniker  * *ppmkOut) = 0;
        
    };
    





















































#line 972 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IParseDisplayName_ParseDisplayName_Proxy( 
    IParseDisplayName  * This,
     IBindCtx  *pbc,
     LPOLESTR pszDisplayName,
     ULONG  *pchEaten,
     IMoniker  * *ppmkOut);


void __stdcall IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 992 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleContainer  *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;


    
    struct IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects( 
             DWORD grfFlags,
             IEnumUnknown  * *ppenum) = 0;
        
        virtual HRESULT __stdcall LockContainer( 
             BOOL fLock) = 0;
        
    };
    





































































#line 1094 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleContainer_EnumObjects_Proxy( 
    IOleContainer  * This,
     DWORD grfFlags,
     IEnumUnknown  * *ppenum);


void __stdcall IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleContainer_LockContainer_Proxy( 
    IOleContainer  * This,
     BOOL fLock);


void __stdcall IOleContainer_LockContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1124 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleClientSite  *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;


    
    struct IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall GetContainer( 
             IOleContainer  * *ppContainer) = 0;
        
        virtual HRESULT __stdcall ShowObject( void) = 0;
        
        virtual HRESULT __stdcall OnShowWindow( 
             BOOL fShow) = 0;
        
        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;
        
    };
    




















































































#line 1251 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleClientSite_SaveObject_Proxy( 
    IOleClientSite  * This);


void __stdcall IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetMoniker_Proxy( 
    IOleClientSite  * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker  * *ppmk);


void __stdcall IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetContainer_Proxy( 
    IOleClientSite  * This,
     IOleContainer  * *ppContainer);


void __stdcall IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_ShowObject_Proxy( 
    IOleClientSite  * This);


void __stdcall IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_OnShowWindow_Proxy( 
    IOleClientSite  * This,
     BOOL fShow);


void __stdcall IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_RequestNewObjectLayout_Proxy( 
    IOleClientSite  * This);


void __stdcall IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1327 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleObject  *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {	OLEGETMONIKER_ONLYIFTHERE	= 1,
	OLEGETMONIKER_FORCEASSIGN	= 2,
	OLEGETMONIKER_UNASSIGN	= 3,
	OLEGETMONIKER_TEMPFORUSER	= 4
    }	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {	OLEWHICHMK_CONTAINER	= 1,
	OLEWHICHMK_OBJREL	= 2,
	OLEWHICHMK_OBJFULL	= 3
    }	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {	USERCLASSTYPE_FULL	= 1,
	USERCLASSTYPE_SHORT	= 2,
	USERCLASSTYPE_APPNAME	= 3
    }	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {	OLEMISC_RECOMPOSEONRESIZE	= 0x1,
	OLEMISC_ONLYICONIC	= 0x2,
	OLEMISC_INSERTNOTREPLACE	= 0x4,
	OLEMISC_STATIC	= 0x8,
	OLEMISC_CANTLINKINSIDE	= 0x10,
	OLEMISC_CANLINKBYOLE1	= 0x20,
	OLEMISC_ISLINKOBJECT	= 0x40,
	OLEMISC_INSIDEOUT	= 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
	OLEMISC_INVISIBLEATRUNTIME	= 0x400,
	OLEMISC_ALWAYSRUN	= 0x800,
	OLEMISC_ACTSLIKEBUTTON	= 0x1000,
	OLEMISC_ACTSLIKELABEL	= 0x2000,
	OLEMISC_NOUIACTIVATE	= 0x4000,
	OLEMISC_ALIGNABLE	= 0x8000,
	OLEMISC_SIMPLEFRAME	= 0x10000,
	OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
	OLEMISC_IMEMODE	= 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
	OLEMISC_WANTSTOMENUMERGE	= 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    }	OLEMISC;

typedef 
enum tagOLECLOSE
    {	OLECLOSE_SAVEIFDIRTY	= 0,
	OLECLOSE_NOSAVE	= 1,
	OLECLOSE_PROMPTSAVE	= 2
    }	OLECLOSE;


extern "C" const IID IID_IOleObject;


    
    struct IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite( 
             IOleClientSite  *pClientSite) = 0;
        
        virtual HRESULT __stdcall GetClientSite( 
             IOleClientSite  * *ppClientSite) = 0;
        
        virtual HRESULT __stdcall SetHostNames( 
             LPCOLESTR szContainerApp,
             LPCOLESTR szContainerObj) = 0;
        
        virtual HRESULT __stdcall Close( 
             DWORD dwSaveOption) = 0;
        
        virtual HRESULT __stdcall SetMoniker( 
             DWORD dwWhichMoniker,
             IMoniker  *pmk) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall InitFromData( 
             IDataObject  *pDataObject,
             BOOL fCreation,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetClipboardData( 
             DWORD dwReserved,
             IDataObject  * *ppDataObject) = 0;
        
        virtual HRESULT __stdcall DoVerb( 
             LONG iVerb,
             LPMSG lpmsg,
             IOleClientSite  *pActiveSite,
             LONG lindex,
             HWND hwndParent,
             LPCRECT lprcPosRect) = 0;
        
        virtual HRESULT __stdcall EnumVerbs( 
             IEnumOLEVERB  * *ppEnumOleVerb) = 0;
        
        virtual HRESULT __stdcall Update( void) = 0;
        
        virtual HRESULT __stdcall IsUpToDate( void) = 0;
        
        virtual HRESULT __stdcall GetUserClassID( 
             CLSID  *pClsid) = 0;
        
        virtual HRESULT __stdcall GetUserType( 
             DWORD dwFormOfType,
             LPOLESTR  *pszUserType) = 0;
        
        virtual HRESULT __stdcall SetExtent( 
             DWORD dwDrawAspect,
             SIZEL  *psizel) = 0;
        
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             SIZEL  *psizel) = 0;
        
        virtual HRESULT __stdcall Advise( 
             IAdviseSink  *pAdvSink,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall GetMiscStatus( 
             DWORD dwAspect,
             DWORD  *pdwStatus) = 0;
        
        virtual HRESULT __stdcall SetColorScheme( 
             LOGPALETTE  *pLogpal) = 0;
        
    };
    













































































































































































































#line 1691 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleObject_SetClientSite_Proxy( 
    IOleObject  * This,
     IOleClientSite  *pClientSite);


void __stdcall IOleObject_SetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClientSite_Proxy( 
    IOleObject  * This,
     IOleClientSite  * *ppClientSite);


void __stdcall IOleObject_GetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetHostNames_Proxy( 
    IOleObject  * This,
     LPCOLESTR szContainerApp,
     LPCOLESTR szContainerObj);


void __stdcall IOleObject_SetHostNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Close_Proxy( 
    IOleObject  * This,
     DWORD dwSaveOption);


void __stdcall IOleObject_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetMoniker_Proxy( 
    IOleObject  * This,
     DWORD dwWhichMoniker,
     IMoniker  *pmk);


void __stdcall IOleObject_SetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMoniker_Proxy( 
    IOleObject  * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker  * *ppmk);


void __stdcall IOleObject_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_InitFromData_Proxy( 
    IOleObject  * This,
     IDataObject  *pDataObject,
     BOOL fCreation,
     DWORD dwReserved);


void __stdcall IOleObject_InitFromData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClipboardData_Proxy( 
    IOleObject  * This,
     DWORD dwReserved,
     IDataObject  * *ppDataObject);


void __stdcall IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_DoVerb_Proxy( 
    IOleObject  * This,
     LONG iVerb,
     LPMSG lpmsg,
     IOleClientSite  *pActiveSite,
     LONG lindex,
     HWND hwndParent,
     LPCRECT lprcPosRect);


void __stdcall IOleObject_DoVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumVerbs_Proxy( 
    IOleObject  * This,
     IEnumOLEVERB  * *ppEnumOleVerb);


void __stdcall IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Update_Proxy( 
    IOleObject  * This);


void __stdcall IOleObject_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_IsUpToDate_Proxy( 
    IOleObject  * This);


void __stdcall IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserClassID_Proxy( 
    IOleObject  * This,
     CLSID  *pClsid);


void __stdcall IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserType_Proxy( 
    IOleObject  * This,
     DWORD dwFormOfType,
     LPOLESTR  *pszUserType);


void __stdcall IOleObject_GetUserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetExtent_Proxy( 
    IOleObject  * This,
     DWORD dwDrawAspect,
     SIZEL  *psizel);


void __stdcall IOleObject_SetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetExtent_Proxy( 
    IOleObject  * This,
     DWORD dwDrawAspect,
     SIZEL  *psizel);


void __stdcall IOleObject_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Advise_Proxy( 
    IOleObject  * This,
     IAdviseSink  *pAdvSink,
     DWORD  *pdwConnection);


void __stdcall IOleObject_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Unadvise_Proxy( 
    IOleObject  * This,
     DWORD dwConnection);


void __stdcall IOleObject_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumAdvise_Proxy( 
    IOleObject  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMiscStatus_Proxy( 
    IOleObject  * This,
     DWORD dwAspect,
     DWORD  *pdwStatus);


void __stdcall IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetColorScheme_Proxy( 
    IOleObject  * This,
     LOGPALETTE  *pLogpal);


void __stdcall IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1963 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef 
enum tagOLERENDER
    {	OLERENDER_NONE	= 0,
	OLERENDER_DRAW	= 1,
	OLERENDER_FORMAT	= 2,
	OLERENDER_ASIS	= 3
    }	OLERENDER;

typedef OLERENDER  *LPOLERENDER;

typedef struct  tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    }	OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 2013 "C:\\MSDEV\\INCLUDE\\oleidl.h"









 


typedef  IOleWindow  *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;


    
    struct IOleWindow : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetWindow( 
             HWND  *phwnd) = 0;
        
        virtual HRESULT __stdcall ContextSensitiveHelp( 
             BOOL fEnterMode) = 0;
        
    };
    

























































#line 2101 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IOleWindow_GetWindow_Proxy( 
    IOleWindow  * This,
     HWND  *phwnd);


void __stdcall IOleWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleWindow_ContextSensitiveHelp_Proxy( 
    IOleWindow  * This,
     BOOL fEnterMode);


void __stdcall IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2130 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleLink  *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {	OLEUPDATE_ALWAYS	= 1,
	OLEUPDATE_ONCALL	= 3
    }	OLEUPDATE;

typedef OLEUPDATE  *LPOLEUPDATE;

typedef OLEUPDATE  *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {	OLELINKBIND_EVENIFCLASSDIFF	= 1
    }	OLELINKBIND;


extern "C" const IID IID_IOleLink;


    
    struct IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions( 
             DWORD dwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall GetUpdateOptions( 
             DWORD  *pdwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall SetSourceMoniker( 
             IMoniker  *pmk,
             const CLSID & rclsid) = 0;
        
        virtual HRESULT __stdcall GetSourceMoniker( 
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall SetSourceDisplayName( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall GetSourceDisplayName( 
             LPOLESTR  *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall BindToSource( 
             DWORD bindflags,
             IBindCtx  *pbc) = 0;
        
        virtual HRESULT __stdcall BindIfRunning( void) = 0;
        
        virtual HRESULT __stdcall GetBoundSource( 
             IUnknown  * *ppunk) = 0;
        
        virtual HRESULT __stdcall UnbindSource( void) = 0;
        
        virtual HRESULT __stdcall Update( 
             IBindCtx  *pbc) = 0;
        
    };
    
























































































































#line 2324 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleLink_SetUpdateOptions_Proxy( 
    IOleLink  * This,
     DWORD dwUpdateOpt);


void __stdcall IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetUpdateOptions_Proxy( 
    IOleLink  * This,
     DWORD  *pdwUpdateOpt);


void __stdcall IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceMoniker_Proxy( 
    IOleLink  * This,
     IMoniker  *pmk,
     const CLSID & rclsid);


void __stdcall IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceMoniker_Proxy( 
    IOleLink  * This,
     IMoniker  * *ppmk);


void __stdcall IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceDisplayName_Proxy( 
    IOleLink  * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceDisplayName_Proxy( 
    IOleLink  * This,
     LPOLESTR  *ppszDisplayName);


void __stdcall IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindToSource_Proxy( 
    IOleLink  * This,
     DWORD bindflags,
     IBindCtx  *pbc);


void __stdcall IOleLink_BindToSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindIfRunning_Proxy( 
    IOleLink  * This);


void __stdcall IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetBoundSource_Proxy( 
    IOleLink  * This,
     IUnknown  * *ppunk);


void __stdcall IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_UnbindSource_Proxy( 
    IOleLink  * This);


void __stdcall IOleLink_UnbindSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_Update_Proxy( 
    IOleLink  * This,
     IBindCtx  *pbc);


void __stdcall IOleLink_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2461 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleItemContainer  *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {	BINDSPEED_INDEFINITE	= 1,
	BINDSPEED_MODERATE	= 2,
	BINDSPEED_IMMEDIATE	= 3
    }	BINDSPEED;

typedef  
enum tagOLECONTF
    {	OLECONTF_EMBEDDINGS	= 1,
	OLECONTF_LINKS	= 2,
	OLECONTF_OTHERS	= 4,
	OLECONTF_ONLYUSER	= 8,
	OLECONTF_ONLYIFRUNNING	= 16
    }	OLECONTF;


extern "C" const IID IID_IOleItemContainer;


    
    struct IOleItemContainer : public IOleContainer
    {
    public:
        virtual  HRESULT __stdcall GetObjectA( 
             LPOLESTR pszItem,
             DWORD dwSpeedNeeded,
             IBindCtx  *pbc,
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual  HRESULT __stdcall GetObjectStorage( 
             LPOLESTR pszItem,
             IBindCtx  *pbc,
             const IID & riid,
             void  * *ppvStorage) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             LPOLESTR pszItem) = 0;
        
    };
    


































































































#line 2617 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IOleItemContainer_RemoteGetObject_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     DWORD dwSpeedNeeded,
     IBindCtx  *pbc,
     const IID & riid,
     IUnknown  * *ppvObject);


void __stdcall IOleItemContainer_RemoteGetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleItemContainer_RemoteGetObjectStorage_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     IBindCtx  *pbc,
     const IID & riid,
     IUnknown  * *ppvStorage);


void __stdcall IOleItemContainer_RemoteGetObjectStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_IsRunning_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem);


void __stdcall IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2665 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleInPlaceUIWindow  *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;


    
    struct IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall GetBorder( 
             LPRECT lprectBorder) = 0;
        
        virtual  HRESULT __stdcall RequestBorderSpace( 
             LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual  HRESULT __stdcall SetBorderSpace( 
             LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual HRESULT __stdcall SetActiveObject( 
             IOleInPlaceActiveObject  *pActiveObject,
             LPCOLESTR pszObjName) = 0;
        
    };
    























































































#line 2797 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IOleInPlaceUIWindow_GetBorder_Proxy( 
    IOleInPlaceUIWindow  * This,
     LPRECT lprectBorder);


void __stdcall IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Proxy( 
    IOleInPlaceUIWindow  * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_SetBorderSpace_Proxy( 
    IOleInPlaceUIWindow  * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceUIWindow_SetActiveObject_Proxy( 
    IOleInPlaceUIWindow  * This,
     IOleInPlaceActiveObject  *pActiveObject,
     LPCOLESTR pszObjName);


void __stdcall IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2851 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleInPlaceActiveObject  *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;


    
    struct IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall TranslateAcceleratorA( 
             LPMSG lpmsg) = 0;
        
        virtual  HRESULT __stdcall OnFrameWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall OnDocWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall ResizeBorder( 
             LPCRECT prcBorder,
             IOleInPlaceUIWindow  *pUIWindow,
             BOOL fFrameWindow) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    































































































#line 2989 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject  * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy( 
    IOleInPlaceActiveObject  * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Proxy( 
    IOleInPlaceActiveObject  * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( 
    IOleInPlaceActiveObject  * This,
     LPCRECT prcBorder,
     const IID & riid,
     IOleInPlaceUIWindow  *pUIWindow,
     BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceActiveObject_EnableModeless_Proxy( 
    IOleInPlaceActiveObject  * This,
     BOOL fEnable);


void __stdcall IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3056 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleInPlaceFrame  *LPOLEINPLACEFRAME;

typedef struct  tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    }	OLEINPLACEFRAMEINFO;

typedef struct tagOIFI  *LPOLEINPLACEFRAMEINFO;

typedef struct  tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    }	OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths  *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;


    
    struct IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus( 
             HMENU hmenuShared,
             LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;
        
        virtual  HRESULT __stdcall SetMenu( 
             HMENU hmenuShared,
             HOLEMENU holemenu,
             HWND hwndActiveObject) = 0;
        
        virtual HRESULT __stdcall RemoveMenus( 
             HMENU hmenuShared) = 0;
        
        virtual  HRESULT __stdcall SetStatusText( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             LPMSG lpmsg,
             WORD wID) = 0;
        
    };
    






































































































































#line 3258 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleInPlaceFrame_InsertMenus_Proxy( 
    IOleInPlaceFrame  * This,
     HMENU hmenuShared,
     LPOLEMENUGROUPWIDTHS lpMenuWidths);


void __stdcall IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetMenu_Proxy( 
    IOleInPlaceFrame  * This,
     HMENU hmenuShared,
     HOLEMENU holemenu,
     HWND hwndActiveObject);


void __stdcall IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_RemoveMenus_Proxy( 
    IOleInPlaceFrame  * This,
     HMENU hmenuShared);


void __stdcall IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetStatusText_Proxy( 
    IOleInPlaceFrame  * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_EnableModeless_Proxy( 
    IOleInPlaceFrame  * This,
     BOOL fEnable);


void __stdcall IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_TranslateAccelerator_Proxy( 
    IOleInPlaceFrame  * This,
     LPMSG lpmsg,
     WORD wID);


void __stdcall IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3339 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleInPlaceObject  *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;


    
    struct IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall UIDeactivate( void) = 0;
        
        virtual  HRESULT __stdcall SetObjectRects( 
             LPCRECT lprcPosRect,
             LPCRECT lprcClipRect) = 0;
        
        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;
        
    };
    




















































































#line 3459 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleInPlaceObject_InPlaceDeactivate_Proxy( 
    IOleInPlaceObject  * This);


void __stdcall IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_UIDeactivate_Proxy( 
    IOleInPlaceObject  * This);


void __stdcall IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceObject_SetObjectRects_Proxy( 
    IOleInPlaceObject  * This,
     LPCRECT lprcPosRect,
     LPCRECT lprcClipRect);


void __stdcall IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_ReactivateAndUndo_Proxy( 
    IOleInPlaceObject  * This);


void __stdcall IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3510 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IOleInPlaceSite  *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;


    
    struct IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnUIActivate( void) = 0;
        
        virtual HRESULT __stdcall GetWindowContext( 
             IOleInPlaceFrame  * *ppFrame,
             IOleInPlaceUIWindow  * *ppDoc,
             LPRECT lprcPosRect,
             LPRECT lprcClipRect,
             LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;
        
        virtual HRESULT __stdcall Scroll( 
             SIZE scrollExtant) = 0;
        
        virtual HRESULT __stdcall OnUIDeactivate( 
             BOOL fUndoable) = 0;
        
        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall DiscardUndoState( void) = 0;
        
        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;
        
        virtual HRESULT __stdcall OnPosRectChange( 
             LPCRECT lprcPosRect) = 0;
        
    };
    






























































































































#line 3690 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IOleInPlaceSite_CanInPlaceActivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceActivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIActivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_GetWindowContext_Proxy( 
    IOleInPlaceSite  * This,
     IOleInPlaceFrame  * *ppFrame,
     IOleInPlaceUIWindow  * *ppDoc,
     LPRECT lprcPosRect,
     LPRECT lprcClipRect,
     LPOLEINPLACEFRAMEINFO lpFrameInfo);


void __stdcall IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_Scroll_Proxy( 
    IOleInPlaceSite  * This,
     SIZE scrollExtant);


void __stdcall IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIDeactivate_Proxy( 
    IOleInPlaceSite  * This,
     BOOL fUndoable);


void __stdcall IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DiscardUndoState_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DeactivateAndUndo_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnPosRectChange_Proxy( 
    IOleInPlaceSite  * This,
     LPCRECT lprcPosRect);


void __stdcall IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3813 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 



extern "C" const IID IID_IContinue;


    
    struct IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;
        
    };
    

















































#line 3888 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IContinue_FContinue_Proxy( 
    IContinue  * This);


void __stdcall IContinue_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3904 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IViewObject  *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;


    
    struct IViewObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Draw( 
             DWORD dwDrawAspect,
             LONG lindex,
             void  *pvAspect,
             DVTARGETDEVICE  *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
             BOOL ( __stdcall  *pfnContinue )( 
                DWORD dwContinue),
             DWORD dwContinue) = 0;
        
        virtual  HRESULT __stdcall GetColorSet( 
             DWORD dwDrawAspect,
             LONG lindex,
             void  *pvAspect,
             DVTARGETDEVICE  *ptd,
             HDC hicTargetDev,
             LOGPALETTE  * *ppColorSet) = 0;
        
        virtual  HRESULT __stdcall Freeze( 
             DWORD dwDrawAspect,
             LONG lindex,
             void  *pvAspect,
             DWORD  *pdwFreeze) = 0;
        
        virtual HRESULT __stdcall Unfreeze( 
             DWORD dwFreeze) = 0;
        
        virtual HRESULT __stdcall SetAdvise( 
             DWORD aspects,
             DWORD advf,
             IAdviseSink  *pAdvSink) = 0;
        
        virtual HRESULT __stdcall GetAdvise( 
             DWORD  *pAspects,
             DWORD  *pAdvf,
             IAdviseSink  * *ppAdvSink) = 0;
        
    };
    











































































































#line 4077 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IViewObject_RemoteDraw_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hdcTargetDev,
     DWORD hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue  *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hicTargetDev,
     LOGPALETTE  * *ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteFreeze_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DWORD  *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_Unfreeze_Proxy( 
    IViewObject  * This,
     DWORD dwFreeze);


void __stdcall IViewObject_Unfreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_SetAdvise_Proxy( 
    IViewObject  * This,
     DWORD aspects,
     DWORD advf,
     IAdviseSink  *pAdvSink);


void __stdcall IViewObject_SetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_GetAdvise_Proxy( 
    IViewObject  * This,
     DWORD  *pAspects,
     DWORD  *pAdvf,
     IAdviseSink  * *ppAdvSink);


void __stdcall IViewObject_GetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4174 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IViewObject2  *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;


    
    struct IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             LONG lindex,
             DVTARGETDEVICE  *ptd,
             LPSIZEL lpsizel) = 0;
        
    };
    






















































































































#line 4324 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IViewObject2_GetExtent_Proxy( 
    IViewObject2  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DVTARGETDEVICE  *ptd,
     LPSIZEL lpsizel);


void __stdcall IViewObject2_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4344 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IDropSource  *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;


    
    struct IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag( 
             BOOL fEscapePressed,
             DWORD grfKeyState) = 0;
        
        virtual HRESULT __stdcall GiveFeedback( 
             DWORD dwEffect) = 0;
        
    };
    


























































#line 4435 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IDropSource_QueryContinueDrag_Proxy( 
    IDropSource  * This,
     BOOL fEscapePressed,
     DWORD grfKeyState);


void __stdcall IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropSource_GiveFeedback_Proxy( 
    IDropSource  * This,
     DWORD dwEffect);


void __stdcall IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4465 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IDropTarget  *LPDROPTARGET;


































extern "C" const IID IID_IDropTarget;


    
    struct IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter( 
             IDataObject  *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD  *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragOver( 
             DWORD grfKeyState,
             POINTL pt,
             DWORD  *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragLeave( void) = 0;
        
        virtual HRESULT __stdcall Drop( 
             IDataObject  *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD  *pdwEffect) = 0;
        
    };
    














































































#line 4620 "C:\\MSDEV\\INCLUDE\\oleidl.h"



HRESULT __stdcall IDropTarget_DragEnter_Proxy( 
    IDropTarget  * This,
     IDataObject  *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD  *pdwEffect);


void __stdcall IDropTarget_DragEnter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragOver_Proxy( 
    IDropTarget  * This,
     DWORD grfKeyState,
     POINTL pt,
     DWORD  *pdwEffect);


void __stdcall IDropTarget_DragOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragLeave_Proxy( 
    IDropTarget  * This);


void __stdcall IDropTarget_DragLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_Drop_Proxy( 
    IDropTarget  * This,
     IDataObject  *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD  *pdwEffect);


void __stdcall IDropTarget_Drop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4680 "C:\\MSDEV\\INCLUDE\\oleidl.h"










 


typedef  IEnumOLEVERB  *LPENUMOLEVERB;

typedef struct  tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    }	OLEVERB;

typedef struct tagOLEVERB  *LPOLEVERB;

typedef  
enum tagOLEVERBATTRIB
    {	OLEVERBATTRIB_NEVERDIRTIES	= 1,
	OLEVERBATTRIB_ONCONTAINERMENU	= 2
    }	OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;


    
    struct IEnumOLEVERB : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             LPOLEVERB rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumOLEVERB  * *ppenum) = 0;
        
    };
    








































































#line 4807 "C:\\MSDEV\\INCLUDE\\oleidl.h"



 HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy( 
    IEnumOLEVERB  * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Skip_Proxy( 
    IEnumOLEVERB  * This,
     ULONG celt);


void __stdcall IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Reset_Proxy( 
    IEnumOLEVERB  * This);


void __stdcall IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Clone_Proxy( 
    IEnumOLEVERB  * This,
     IEnumOLEVERB  * *ppenum);


void __stdcall IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4861 "C:\\MSDEV\\INCLUDE\\oleidl.h"




unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long  *, unsigned long            , CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long  *, CLIPFORMAT  * ); 

unsigned long             __stdcall  HACCEL_UserSize(     unsigned long  *, unsigned long            , HACCEL  * ); 
unsigned char  * __stdcall  HACCEL_UserMarshal(  unsigned long  *, unsigned char  *, HACCEL  * ); 
unsigned char  * __stdcall  HACCEL_UserUnmarshal(unsigned long  *, unsigned char  *, HACCEL  * ); 
void                      __stdcall  HACCEL_UserFree(     unsigned long  *, HACCEL  * ); 

unsigned long             __stdcall  HGLOBAL_UserSize(     unsigned long  *, unsigned long            , HGLOBAL  * ); 
unsigned char  * __stdcall  HGLOBAL_UserMarshal(  unsigned long  *, unsigned char  *, HGLOBAL  * ); 
unsigned char  * __stdcall  HGLOBAL_UserUnmarshal(unsigned long  *, unsigned char  *, HGLOBAL  * ); 
void                      __stdcall  HGLOBAL_UserFree(     unsigned long  *, HGLOBAL  * ); 

unsigned long             __stdcall  HMENU_UserSize(     unsigned long  *, unsigned long            , HMENU  * ); 
unsigned char  * __stdcall  HMENU_UserMarshal(  unsigned long  *, unsigned char  *, HMENU  * ); 
unsigned char  * __stdcall  HMENU_UserUnmarshal(unsigned long  *, unsigned char  *, HMENU  * ); 
void                      __stdcall  HMENU_UserFree(     unsigned long  *, HMENU  * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long  *, unsigned long            , HWND  * ); 
unsigned char  * __stdcall  HWND_UserMarshal(  unsigned long  *, unsigned char  *, HWND  * ); 
unsigned char  * __stdcall  HWND_UserUnmarshal(unsigned long  *, unsigned char  *, HWND  * ); 
void                      __stdcall  HWND_UserFree(     unsigned long  *, HWND  * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long  *, STGMEDIUM  * ); 

 HRESULT __stdcall IOleCache2_UpdateCache_Proxy( 
    IOleCache2  * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LPVOID pReserved);


 HRESULT __stdcall IOleCache2_UpdateCache_Stub( 
    IOleCache2  * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     DWORD pReserved);

 HRESULT __stdcall IOleItemContainer_GetObject_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     DWORD dwSpeedNeeded,
     IBindCtx  *pbc,
     const IID & riid,
     void  * *ppvObject);


 HRESULT __stdcall IOleItemContainer_GetObject_Stub( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     DWORD dwSpeedNeeded,
     IBindCtx  *pbc,
     const IID & riid,
     IUnknown  * *ppvObject);

 HRESULT __stdcall IOleItemContainer_GetObjectStorage_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     IBindCtx  *pbc,
     const IID & riid,
     void  * *ppvStorage);


 HRESULT __stdcall IOleItemContainer_GetObjectStorage_Stub( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     IBindCtx  *pbc,
     const IID & riid,
     IUnknown  * *ppvStorage);

 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject  * This,
     LPMSG lpmsg);


 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub( 
    IOleInPlaceActiveObject  * This);

 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy( 
    IOleInPlaceActiveObject  * This,
     LPCRECT prcBorder,
     IOleInPlaceUIWindow  *pUIWindow,
     BOOL fFrameWindow);


 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub( 
    IOleInPlaceActiveObject  * This,
     LPCRECT prcBorder,
     const IID & riid,
     IOleInPlaceUIWindow  *pUIWindow,
     BOOL fFrameWindow);

 HRESULT __stdcall IViewObject_Draw_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void  *pvAspect,
     DVTARGETDEVICE  *ptd,
     HDC hdcTargetDev,
     HDC hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     BOOL ( __stdcall  *pfnContinue )( 
        DWORD dwContinue),
     DWORD dwContinue);


 HRESULT __stdcall IViewObject_Draw_Stub( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hdcTargetDev,
     DWORD hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue  *pContinue);

 HRESULT __stdcall IViewObject_GetColorSet_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void  *pvAspect,
     DVTARGETDEVICE  *ptd,
     HDC hicTargetDev,
     LOGPALETTE  * *ppColorSet);


 HRESULT __stdcall IViewObject_GetColorSet_Stub( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hicTargetDev,
     LOGPALETTE  * *ppColorSet);

 HRESULT __stdcall IViewObject_Freeze_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void  *pvAspect,
     DWORD  *pdwFreeze);


 HRESULT __stdcall IViewObject_Freeze_Stub( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DWORD  *pdwFreeze);

 HRESULT __stdcall IEnumOLEVERB_Next_Proxy( 
    IEnumOLEVERB  * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumOLEVERB_Next_Stub( 
    IEnumOLEVERB  * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG  *pceltFetched);






}
#line 5043 "C:\\MSDEV\\INCLUDE\\oleidl.h"

#line 5045 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 65 "C:\\MSDEV\\INCLUDE\\ole2.h"









extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder);









extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );


extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStg(LPSTORAGE pStg, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStg(LPSTORAGE pStg, const CLSID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStm(LPSTREAM pStm, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStm(LPSTREAM pStm, const CLSID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);




extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize(LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreate(const CLSID & rclsid, const IID & riid, DWORD renderopt,
                LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateEx(const CLSID & rclsid, const IID & riid, DWORD dwFlags,
                DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID & iid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLink(LPMONIKER pmkLinkSrc, const IID & riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID & riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID & riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID & riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFile(const CLSID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFileEx(const CLSID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoad(LPSTORAGE pStg, const IID & riid, LPOLECLIENTSITE pClientSite,
            LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoadFromStream( LPSTREAM pStm, const IID & iidInterface, LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall  RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall  RevokeDragDrop(HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall  DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
            DWORD dwOKEffects, LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetClipboard(LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleGetClipboard(LPDATAOBJECT * ppDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleFlushClipboard(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleIsCurrentClipboard(LPDATAOBJECT pDataObj);




extern "C" __declspec(dllimport) HOLEMENU __stdcall   OleCreateMenuDescriptor (HMENU hmenuCombined,
                                LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame,
                                HWND hwndActiveObject,
                                LPOLEINPLACEFRAME lpFrame,
                                LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleDestroyMenuDescriptor (HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall              OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame,
                            LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);



extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat,
                        UINT uiFlags);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                    LPCRECT lprcBounds);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleRun(LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall   OleIsRunning(LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall          OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
extern "C" __declspec(dllimport) void __stdcall   ReleaseStgMedium(LPSTGMEDIUM);
extern "C" __declspec(dllimport) HRESULT __stdcall          CreateOleAdviseHolder(LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateDefaultHandler(const CLSID & clsid, LPUNKNOWN pUnkOuter,
                    const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateEmbeddingHelper(const CLSID & clsid, LPUNKNOWN pUnkOuter,
                    DWORD flags, LPCLASSFACTORY pCF,
                                        const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall   IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                        WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass(const CLSID & rclsid,     LPOLESTR lpszLabel,
                                        BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel,
                                        LPOLESTR lpszSourceFile, UINT iIconIndex);





extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetUserType (const CLSID & clsid, DWORD dwFormOfType,
                                        LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetMiscStatus     (const CLSID & clsid, DWORD dwAspect,
                                        DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegEnumFormatEtc     (const CLSID & clsid, DWORD dwDirection,
                                        LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegEnumVerbs (const CLSID & clsid, LPENUMOLEVERB * ppenum);









typedef struct _OLESTREAM *  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL *  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    (LPOLESTREAM                lpolestream,
    LPSTORAGE                   pstg,
    const DVTARGETDEVICE *   ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    (LPSTORAGE      pstg,
    LPOLESTREAM     lpolestream);



extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL * phglobal);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                    LPLOCKBYTES * pplkbyt);

extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL * phglobal);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                LPSTREAM * ppstm);




extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert(const CLSID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert(const CLSID & clsidOld, const CLSID & clsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall GetConvertStg(LPSTORAGE pStg);
extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg(LPSTORAGE pStg, BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    (LPSTORAGE          pstg,
                                    
     CLIPFORMAT         cfFormat,   
     LONG               lWidth,     
     LONG               lHeight,    
     DWORD              dwSize,     
     LPSTGMEDIUM        pmedium,    
     LPOLESTREAM        polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    (LPOLESTREAM        polestm,
     LPSTORAGE          pstg,
                                    
     CLIPFORMAT *    pcfFormat,  
     LONG *          plwWidth,   
     LONG *          plHeight,   
     DWORD *         pdwSize,    
     LPSTGMEDIUM        pmedium);   


#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 341 "C:\\MSDEV\\INCLUDE\\ole2.h"
#line 342 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\unknwn.h"
#line 18 "C:\\MSDEV\\INCLUDE\\unknwn.h"




































































































































































































































































































































#line 410 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 1 "C:\\MSDEV\\INCLUDE\\objidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\objidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\objidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\objidl.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 411 "C:\\MSDEV\\INCLUDE\\objbase.h"

























#line 437 "C:\\MSDEV\\INCLUDE\\objbase.h"


































inline BOOL IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}


#line 478 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 479 "C:\\MSDEV\\INCLUDE\\objbase.h"















inline BOOL operator==(const GUID& guidOne, const GUID& guidOther)
{

    return !memcmp(&guidOne,&guidOther,sizeof(GUID));


#line 501 "C:\\MSDEV\\INCLUDE\\objbase.h"
}
#line 503 "C:\\MSDEV\\INCLUDE\\objbase.h"

inline BOOL operator!=(const GUID& guidOne, const GUID& guidOther)
{
    return !(guidOne == guidOther);
}

#line 510 "C:\\MSDEV\\INCLUDE\\objbase.h"



#line 1 "C:\\MSDEV\\INCLUDE\\cguid.h"













extern "C" {
#line 16 "C:\\MSDEV\\INCLUDE\\cguid.h"

extern const IID GUID_NULL;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;










extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;

extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;

extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;


}
#line 117 "C:\\MSDEV\\INCLUDE\\cguid.h"


#line 120 "C:\\MSDEV\\INCLUDE\\cguid.h"
#line 514 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 515 "C:\\MSDEV\\INCLUDE\\objbase.h"


typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED  = 0x2,      






#line 527 "C:\\MSDEV\\INCLUDE\\objbase.h"
} COINIT;







extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



extern "C" __declspec(dllimport) HRESULT __stdcall  CoInitialize(LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall  CoUninitialize(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetMalloc(DWORD dwMemContext, LPMALLOC * ppMalloc);
extern "C" __declspec(dllimport) DWORD __stdcall CoGetCurrentProcess(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoCreateStandardMalloc(DWORD memctx, IMalloc * * ppMalloc);



#line 550 "C:\\MSDEV\\INCLUDE\\objbase.h"




#line 555 "C:\\MSDEV\\INCLUDE\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetClassObject(const CLSID & rclsid, DWORD dwClsContext, LPVOID pvReserved,
                    const IID & riid, LPVOID * ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterClassObject(const CLSID & rclsid, LPUNKNOWN pUnk,
                    DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeClassObject(DWORD dwRegister);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoResumeClassObjects(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoSuspendClassObjects(void);
extern "C" __declspec(dllimport) ULONG __stdcall CoAddRefServerProcess(void);
extern "C" __declspec(dllimport) ULONG __stdcall CoReleaseServerProcess(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetPSClsid(const IID & riid, CLSID *pClsid);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterPSClsid(const IID & riid, const CLSID & rclsid);



extern "C" __declspec(dllimport) HRESULT __stdcall CoGetMarshalSizeMax(ULONG *pulSize, const IID & riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalInterface(LPSTREAM pStm, const IID & riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern "C" __declspec(dllimport) HRESULT __stdcall CoUnmarshalInterface(LPSTREAM pStm, const IID & riid, LPVOID * ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
extern "C" __declspec(dllimport) HRESULT __stdcall CoUnmarshalHresult(LPSTREAM pstm, HRESULT  * phresult);
extern "C" __declspec(dllimport) HRESULT __stdcall CoReleaseMarshalData(LPSTREAM pStm);
extern "C" __declspec(dllimport) HRESULT __stdcall CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
extern "C" __declspec(dllimport) HRESULT __stdcall CoGetStandardMarshal(const IID & riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags,
                    LPMARSHAL * ppMarshal);

extern "C" __declspec(dllimport) BOOL __stdcall CoIsHandlerConnected(LPUNKNOWN pUnk);
extern "C" __declspec(dllimport) BOOL __stdcall CoHasStrongExternalConnections(LPUNKNOWN pUnk);


extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalInterThreadInterfaceInStream(const IID & riid, LPUNKNOWN pUnk,
                    LPSTREAM *ppStm);

extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID & iid,
                    LPVOID * ppv);

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateFreeThreadedMarshaler(LPUNKNOWN  punkOuter,
                    LPUNKNOWN *ppunkMarshal);



extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary(HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);
extern "C" __declspec(dllimport) void __stdcall CoFreeUnusedLibraries(void);























































#line 661 "C:\\MSDEV\\INCLUDE\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateInstance(const CLSID & rclsid, LPUNKNOWN pUnkOuter,
                    DWORD dwClsContext, const IID & riid, LPVOID * ppv);































#line 698 "C:\\MSDEV\\INCLUDE\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall StringFromCLSID(const CLSID & rclsid, LPOLESTR * lplpsz);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromString(LPOLESTR lpsz, LPCLSID pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall StringFromIID(const IID & rclsid, LPOLESTR * lplpsz);
extern "C" __declspec(dllimport) HRESULT __stdcall IIDFromString(LPOLESTR lpsz, LPIID lpiid);
extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class(const CLSID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ProgIDFromCLSID (const CLSID & clsid, LPOLESTR * lplpszProgID);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgID (LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern "C" __declspec(dllimport) int __stdcall StringFromGUID2(const GUID & rguid, LPOLESTR lpsz, int cbMax);

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateGuid(GUID  *pguid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                 FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                       WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoFileTimeNow( FILETIME * lpFileTime );


extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                LPMESSAGEFILTER * lplpMessageFilter );



#line 726 "C:\\MSDEV\\INCLUDE\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall CoGetTreatAsClass(const CLSID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass(const CLSID & clsidOld, const CLSID & clsidNew);










typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const CLSID &, const IID &, LPVOID *);





typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern "C" HRESULT __stdcall  DllGetClassObject(const CLSID & rclsid, const IID & riid, LPVOID * ppv);

extern "C" HRESULT __stdcall  DllCanUnloadNow(void);



extern "C" __declspec(dllimport) LPVOID __stdcall CoTaskMemAlloc(ULONG cb);
extern "C" __declspec(dllimport) LPVOID __stdcall CoTaskMemRealloc(LPVOID pv, ULONG cb);
extern "C" __declspec(dllimport) void __stdcall   CoTaskMemFree(LPVOID pv);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache(LPUNKNOWN pUnkOuter, const CLSID & rclsid,
                                        const IID & iid, LPVOID * ppv);







extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfile(const OLECHAR * pwcsName,
            DWORD grfMode,
            DWORD reserved,
            IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes(ILockBytes  *plkbyt,
                    DWORD grfMode,
                    DWORD reserved,
                    IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorage(const OLECHAR * pwcsName,
              IStorage  *pstgPriority,
              DWORD grfMode,
              SNB snbExclude,
              DWORD reserved,
              IStorage  *  *ppstgOpen);
extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes(ILockBytes  *plkbyt,
                  IStorage  *pstgPriority,
                  DWORD grfMode,
                  SNB snbExclude,
                  DWORD reserved,
                  IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageFile(const OLECHAR * pwcsName);
extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes(ILockBytes * plkbyt);

extern "C" __declspec(dllimport) HRESULT __stdcall StgSetTimes(OLECHAR const * lpszName,
                   FILETIME const * pctime,
                   FILETIME const * patime,
                   FILETIME const * pmtime);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
             DWORD grfMode,
             DWORD asyncFlags,
             IStorage **ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
             IFillLockBytes **ppflb);

extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile(OLECHAR const *pwcsName,
             IFillLockBytes **ppflb);


extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile(OLECHAR const *pwcsDfName,
             DWORD grfMode,
             DWORD reserved,
             IStorage **ppstgOpen);







extern "C" __declspec(dllimport) HRESULT __stdcall  BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID & iidResult, LPVOID * ppvResult);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID & riid, void **ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall  MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName,
                ULONG  * pchEaten, LPMONIKER  * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                * ppmkRelPath, BOOL dwReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther,
                LPMONIKER * ppmkCommon);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateBindCtx(DWORD reserved, LPBC * ppbc);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest,
    LPMONIKER * ppmkComposite);
extern "C" __declspec(dllimport) HRESULT __stdcall  GetClassFile (LPCOLESTR szFilename, CLSID * pclsid);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateClassMoniker(const CLSID & rclsid, LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
    LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateAntiMoniker(LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);


#line 1 "C:\\MSDEV\\INCLUDE\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\MSDEV\\INCLUDE\\poppack.h"


#line 36 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 37 "C:\\MSDEV\\INCLUDE\\poppack.h"
#line 855 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 856 "C:\\MSDEV\\INCLUDE\\objbase.h"

#line 858 "C:\\MSDEV\\INCLUDE\\objbase.h"
#line 25 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
#line 26 "C:\\MSDEV\\MFC\\include\\afxdisp.h"




	#line 1 "C:\\MSDEV\\INCLUDE\\olectl.h"


















#line 20 "C:\\MSDEV\\INCLUDE\\olectl.h"


#pragma pack(8)
#line 24 "C:\\MSDEV\\INCLUDE\\olectl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\ocidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\ocidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\ocidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\ocidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\ocidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\ocidl.h"





extern "C"{
#line 25 "C:\\MSDEV\\INCLUDE\\ocidl.h"

 



typedef struct IEnumConnections IEnumConnections;
#line 32 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IConnectionPoint IConnectionPoint;
#line 38 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IEnumConnectionPoints IEnumConnectionPoints;
#line 44 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IConnectionPointContainer IConnectionPointContainer;
#line 50 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IClassFactory2 IClassFactory2;
#line 56 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IProvideClassInfo IProvideClassInfo;
#line 62 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IProvideClassInfo2 IProvideClassInfo2;
#line 68 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleControl IOleControl;
#line 74 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleControlSite IOleControlSite;
#line 80 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPropertyPage IPropertyPage;
#line 86 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPropertyPage2 IPropertyPage2;
#line 92 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPropertyPageSite IPropertyPageSite;
#line 98 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPropertyNotifySink IPropertyNotifySink;
#line 104 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct ISpecifyPropertyPages ISpecifyPropertyPages;
#line 110 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPersistMemory IPersistMemory;
#line 116 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPersistStreamInit IPersistStreamInit;
#line 122 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPersistPropertyBag IPersistPropertyBag;
#line 128 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct ISimpleFrameSite ISimpleFrameSite;
#line 134 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IFont IFont;
#line 140 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPicture IPicture;
#line 146 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IFontDisp IFontDisp;
#line 152 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPictureDisp IPictureDisp;
#line 158 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IAdviseSinkEx IAdviseSinkEx;
#line 164 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleInPlaceObjectWindowless IOleInPlaceObjectWindowless;
#line 170 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleInPlaceSiteEx IOleInPlaceSiteEx;
#line 176 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleInPlaceSiteWindowless IOleInPlaceSiteWindowless;
#line 182 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IViewObjectEx IViewObjectEx;
#line 188 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleUndoUnit IOleUndoUnit;
#line 194 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleParentUndoUnit IOleParentUndoUnit;
#line 200 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IEnumOleUndoUnits IEnumOleUndoUnits;
#line 206 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IOleUndoManager IOleUndoManager;
#line 212 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IQuickActivate IQuickActivate;
#line 218 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPointerInactive IPointerInactive;
#line 224 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IObjectWithSite IObjectWithSite;
#line 230 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IErrorLog IErrorLog;
#line 236 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPropertyBag IPropertyBag;
#line 242 "C:\\MSDEV\\INCLUDE\\ocidl.h"




typedef struct IPerPropertyBrowsing IPerPropertyBrowsing;
#line 248 "C:\\MSDEV\\INCLUDE\\ocidl.h"



#line 1 "C:\\MSDEV\\INCLUDE\\oleidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\oleidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\oleidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\oleidl.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 252 "C:\\MSDEV\\INCLUDE\\ocidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\oaidl.h"











#line 1 "C:\\MSDEV\\INCLUDE\\rpc.h"















#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 17 "C:\\MSDEV\\INCLUDE\\rpc.h"
#line 18 "C:\\MSDEV\\INCLUDE\\rpc.h"













































































































#line 13 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\rpcndr.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\MSDEV\\INCLUDE\\oaidl.h"

#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 16 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 1 "C:\\MSDEV\\INCLUDE\\ole2.h"






















































































































































































































































































































































#line 344 "C:\\MSDEV\\INCLUDE\\ole2.h"

#line 17 "C:\\MSDEV\\INCLUDE\\oaidl.h"
#line 18 "C:\\MSDEV\\INCLUDE\\oaidl.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 253 "C:\\MSDEV\\INCLUDE\\ocidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 















































extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;









 


typedef  
enum tagUASFLAGS
    {	UAS_NORMAL	= 0,
	UAS_BLOCKED	= 0x1,
	UAS_NOPARENTENABLE	= 0x2,
	UAS_MASK	= 0x3
    }	UASFLAGS;


typedef  
enum tagREADYSTATE
    {	READYSTATE_UNINITIALIZED	= 0,
	READYSTATE_LOADING	= 1,
	READYSTATE_LOADED	= 2,
	READYSTATE_INTERACTIVE	= 3,
	READYSTATE_COMPLETE	= 4
    }	READYSTATE;

typedef  struct  tagUserHWND
    {
    wireHWND pRemHwnd;
    }	UserHWND;

typedef  struct tagUserHWND UserHACCEL;

typedef  struct tagUserHWND UserHDC;

typedef  struct tagUserHWND UserHFONT;

typedef  struct  tagUserMSG
    {
    wireHWND pRemHwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
    }	UserMSG;

typedef  struct  tagUserBSTR
    {
    wireBSTR pBstrBlob;
    }	UserBSTR;

typedef struct  tagVARIANT_BLOB
    {
    DWORD clSize;
    DWORD rpcReserved;
     ULONGLONG ahData[ 1 ];
    }	 *wireVARIANT_BLOB;

typedef  struct  tagUserVARIANT
    {
    wireVARIANT_BLOB pVarBlob;
    }	UserVARIANT;

typedef  struct  tagUserEXCEPINFO
    {
    WORD wCode;
    WORD wReserved;
    wireBSTR bstrSource;
    wireBSTR bstrDescription;
    wireBSTR bstrHelpFile;
    DWORD dwHelpContext;
    ULONG pvReserved;
    ULONG pfnDeferredFillIn;
    SCODE scode;
    }	UserEXCEPINFO;



extern RPC_IF_HANDLE IOleControlTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleControlTypes_v1_0_s_ifspec;
#line 398 "C:\\MSDEV\\INCLUDE\\ocidl.h"









 


typedef IEnumConnections  *PENUMCONNECTIONS;

typedef IEnumConnections  *LPENUMCONNECTIONS;

typedef struct  tagCONNECTDATA
    {
    IUnknown  *pUnk;
    DWORD dwCookie;
    }	CONNECTDATA;

typedef struct tagCONNECTDATA  *PCONNECTDATA;

typedef struct tagCONNECTDATA  *LPCONNECTDATA;


extern "C" const IID IID_IEnumConnections;


    
    struct IEnumConnections : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cConnections,
             LPCONNECTDATA rgcd,
             ULONG  *pcFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cConnections) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumConnections  * *ppEnum) = 0;
        
    };
    








































































#line 520 "C:\\MSDEV\\INCLUDE\\ocidl.h"



 HRESULT __stdcall IEnumConnections_RemoteNext_Proxy( 
    IEnumConnections  * This,
     ULONG cConnections,
     LPCONNECTDATA rgcd,
     ULONG  *pcFetched);


void __stdcall IEnumConnections_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnections_Skip_Proxy( 
    IEnumConnections  * This,
     ULONG cConnections);


void __stdcall IEnumConnections_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnections_Reset_Proxy( 
    IEnumConnections  * This);


void __stdcall IEnumConnections_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnections_Clone_Proxy( 
    IEnumConnections  * This,
     IEnumConnections  * *ppEnum);


void __stdcall IEnumConnections_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 574 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IConnectionPoint  *PCONNECTIONPOINT;

typedef IConnectionPoint  *LPCONNECTIONPOINT;


extern "C" const IID IID_IConnectionPoint;


    
    struct IConnectionPoint : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetConnectionInterface( 
             IID  *pIID) = 0;
        
        virtual HRESULT __stdcall GetConnectionPointContainer( 
             IConnectionPointContainer  * *ppCPC) = 0;
        
        virtual HRESULT __stdcall Advise( 
             IUnknown  *pUnkSink,
             DWORD  *pdwCookie) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwCookie) = 0;
        
        virtual HRESULT __stdcall EnumConnections( 
             IEnumConnections  * *ppEnum) = 0;
        
    };
    















































































#line 697 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IConnectionPoint_GetConnectionInterface_Proxy( 
    IConnectionPoint  * This,
     IID  *pIID);


void __stdcall IConnectionPoint_GetConnectionInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_GetConnectionPointContainer_Proxy( 
    IConnectionPoint  * This,
     IConnectionPointContainer  * *ppCPC);


void __stdcall IConnectionPoint_GetConnectionPointContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_Advise_Proxy( 
    IConnectionPoint  * This,
     IUnknown  *pUnkSink,
     DWORD  *pdwCookie);


void __stdcall IConnectionPoint_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_Unadvise_Proxy( 
    IConnectionPoint  * This,
     DWORD dwCookie);


void __stdcall IConnectionPoint_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_EnumConnections_Proxy( 
    IConnectionPoint  * This,
     IEnumConnections  * *ppEnum);


void __stdcall IConnectionPoint_EnumConnections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 763 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IEnumConnectionPoints  *PENUMCONNECTIONPOINTS;

typedef IEnumConnectionPoints  *LPENUMCONNECTIONPOINTS;


extern "C" const IID IID_IEnumConnectionPoints;


    
    struct IEnumConnectionPoints : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cConnections,
             LPCONNECTIONPOINT  *ppCP,
             ULONG  *pcFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cConnections) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumConnectionPoints  * *ppEnum) = 0;
        
    };
    








































































#line 876 "C:\\MSDEV\\INCLUDE\\ocidl.h"



 HRESULT __stdcall IEnumConnectionPoints_RemoteNext_Proxy( 
    IEnumConnectionPoints  * This,
     ULONG cConnections,
     LPCONNECTIONPOINT  *ppCP,
     ULONG  *pcFetched);


void __stdcall IEnumConnectionPoints_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnectionPoints_Skip_Proxy( 
    IEnumConnectionPoints  * This,
     ULONG cConnections);


void __stdcall IEnumConnectionPoints_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnectionPoints_Reset_Proxy( 
    IEnumConnectionPoints  * This);


void __stdcall IEnumConnectionPoints_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnectionPoints_Clone_Proxy( 
    IEnumConnectionPoints  * This,
     IEnumConnectionPoints  * *ppEnum);


void __stdcall IEnumConnectionPoints_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 930 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IConnectionPointContainer  *PCONNECTIONPOINTCONTAINER;

typedef IConnectionPointContainer  *LPCONNECTIONPOINTCONTAINER;


extern "C" const IID IID_IConnectionPointContainer;


    
    struct IConnectionPointContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnumConnectionPoints( 
             IEnumConnectionPoints  * *ppEnum) = 0;
        
        virtual HRESULT __stdcall FindConnectionPoint( 
             const IID & riid,
             IConnectionPoint  * *ppCP) = 0;
        
    };
    


























































#line 1023 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IConnectionPointContainer_EnumConnectionPoints_Proxy( 
    IConnectionPointContainer  * This,
     IEnumConnectionPoints  * *ppEnum);


void __stdcall IConnectionPointContainer_EnumConnectionPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPointContainer_FindConnectionPoint_Proxy( 
    IConnectionPointContainer  * This,
     const IID & riid,
     IConnectionPoint  * *ppCP);


void __stdcall IConnectionPointContainer_FindConnectionPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1053 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IClassFactory2  *LPCLASSFACTORY2;

typedef struct  tagLICINFO
    {
    LONG cbLicInfo;
    BOOL fRuntimeKeyAvail;
    BOOL fLicVerified;
    }	LICINFO;

typedef struct tagLICINFO  *LPLICINFO;


extern "C" const IID IID_IClassFactory2;


    
    struct IClassFactory2 : public IClassFactory
    {
    public:
        virtual HRESULT __stdcall GetLicInfo( 
             LICINFO  *pLicInfo) = 0;
        
        virtual HRESULT __stdcall RequestLicKey( 
             DWORD dwReserved,
             BSTR  *pBstrKey) = 0;
        
        virtual  HRESULT __stdcall CreateInstanceLic( 
             IUnknown  *pUnkOuter,
             IUnknown  *pUnkReserved,
             const IID & riid,
             BSTR bstrKey,
             PVOID  *ppvObj) = 0;
        
    };
    






















































































#line 1188 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IClassFactory2_GetLicInfo_Proxy( 
    IClassFactory2  * This,
     LICINFO  *pLicInfo);


void __stdcall IClassFactory2_GetLicInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassFactory2_RequestLicKey_Proxy( 
    IClassFactory2  * This,
     DWORD dwReserved,
     BSTR  *pBstrKey);


void __stdcall IClassFactory2_RequestLicKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory2_RemoteCreateInstanceLic_Proxy( 
    IClassFactory2  * This,
     const IID & riid,
     BSTR bstrKey,
     IUnknown  * *ppvObj);


void __stdcall IClassFactory2_RemoteCreateInstanceLic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1232 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IProvideClassInfo  *LPPROVIDECLASSINFO;


extern "C" const IID IID_IProvideClassInfo;


    
    struct IProvideClassInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassInfoA( 
             ITypeInfo  * *ppTI) = 0;
        
    };
    


















































#line 1311 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IProvideClassInfo_GetClassInfo_Proxy( 
    IProvideClassInfo  * This,
     ITypeInfo  * *ppTI);


void __stdcall IProvideClassInfo_GetClassInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1328 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IProvideClassInfo2  *LPPROVIDECLASSINFO2;

typedef 
enum tagGUIDKIND
    {	GUIDKIND_DEFAULT_SOURCE_DISP_IID	= 1
    }	GUIDKIND;


extern "C" const IID IID_IProvideClassInfo2;


    
    struct IProvideClassInfo2 : public IProvideClassInfo
    {
    public:
        virtual HRESULT __stdcall GetGUID( 
             DWORD dwGuidKind,
             GUID  *pGUID) = 0;
        
    };
    



























































#line 1422 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IProvideClassInfo2_GetGUID_Proxy( 
    IProvideClassInfo2  * This,
     DWORD dwGuidKind,
     GUID  *pGUID);


void __stdcall IProvideClassInfo2_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1440 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleControl  *LPOLECONTROL;

typedef struct  tagCONTROLINFO
    {
    ULONG cb;
    HACCEL hAccel;
    USHORT cAccel;
    DWORD dwFlags;
    }	CONTROLINFO;

typedef struct tagCONTROLINFO  *LPCONTROLINFO;

typedef 
enum tagCTRLINFO
    {	CTRLINFO_EATS_RETURN	= 1,
	CTRLINFO_EATS_ESCAPE	= 2
    }	CTRLINFO;


extern "C" const IID IID_IOleControl;


    
    struct IOleControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetControlInfo( 
             CONTROLINFO  *pCI) = 0;
        
        virtual HRESULT __stdcall OnMnemonic( 
             MSG  *pMsg) = 0;
        
        virtual HRESULT __stdcall OnAmbientPropertyChange( 
             DISPID dispID) = 0;
        
        virtual HRESULT __stdcall FreezeEvents( 
             BOOL bFreeze) = 0;
        
    };
    







































































#line 1565 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleControl_GetControlInfo_Proxy( 
    IOleControl  * This,
     CONTROLINFO  *pCI);


void __stdcall IOleControl_GetControlInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControl_OnMnemonic_Proxy( 
    IOleControl  * This,
     MSG  *pMsg);


void __stdcall IOleControl_OnMnemonic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControl_OnAmbientPropertyChange_Proxy( 
    IOleControl  * This,
     DISPID dispID);


void __stdcall IOleControl_OnAmbientPropertyChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControl_FreezeEvents_Proxy( 
    IOleControl  * This,
     BOOL bFreeze);


void __stdcall IOleControl_FreezeEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1618 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleControlSite  *LPOLECONTROLSITE;

typedef struct  tagPOINTF
    {
    FLOAT x;
    FLOAT y;
    }	POINTF;

typedef struct tagPOINTF  *LPPOINTF;

typedef 
enum tagXFORMCOORDS
    {	XFORMCOORDS_POSITION	= 0x1,
	XFORMCOORDS_SIZE	= 0x2,
	XFORMCOORDS_HIMETRICTOCONTAINER	= 0x4,
	XFORMCOORDS_CONTAINERTOHIMETRIC	= 0x8
    }	XFORMCOORDS;


extern "C" const IID IID_IOleControlSite;


    
    struct IOleControlSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnControlInfoChanged( void) = 0;
        
        virtual HRESULT __stdcall LockInPlaceActive( 
             BOOL fLock) = 0;
        
        virtual HRESULT __stdcall GetExtendedControl( 
             IDispatch  * *ppDisp) = 0;
        
        virtual HRESULT __stdcall TransformCoords( 
             POINTL  *pPtlHimetric,
             POINTF  *pPtfContainer,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG  *pMsg,
             DWORD grfModifiers) = 0;
        
        virtual HRESULT __stdcall OnFocus( 
             BOOL fGotFocus) = 0;
        
        virtual HRESULT __stdcall ShowPropertyFrame( void) = 0;
        
    };
    





























































































#line 1775 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleControlSite_OnControlInfoChanged_Proxy( 
    IOleControlSite  * This);


void __stdcall IOleControlSite_OnControlInfoChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_LockInPlaceActive_Proxy( 
    IOleControlSite  * This,
     BOOL fLock);


void __stdcall IOleControlSite_LockInPlaceActive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_GetExtendedControl_Proxy( 
    IOleControlSite  * This,
     IDispatch  * *ppDisp);


void __stdcall IOleControlSite_GetExtendedControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_TransformCoords_Proxy( 
    IOleControlSite  * This,
     POINTL  *pPtlHimetric,
     POINTF  *pPtfContainer,
     DWORD dwFlags);


void __stdcall IOleControlSite_TransformCoords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_TranslateAccelerator_Proxy( 
    IOleControlSite  * This,
     MSG  *pMsg,
     DWORD grfModifiers);


void __stdcall IOleControlSite_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_OnFocus_Proxy( 
    IOleControlSite  * This,
     BOOL fGotFocus);


void __stdcall IOleControlSite_OnFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_ShowPropertyFrame_Proxy( 
    IOleControlSite  * This);


void __stdcall IOleControlSite_ShowPropertyFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1865 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPropertyPage  *LPPROPERTYPAGE;

typedef struct  tagPROPPAGEINFO
    {
    ULONG cb;
    LPOLESTR pszTitle;
    SIZE size;
    LPOLESTR pszDocString;
    LPOLESTR pszHelpFile;
    DWORD dwHelpContext;
    }	PROPPAGEINFO;

typedef struct tagPROPPAGEINFO  *LPPROPPAGEINFO;


extern "C" const IID IID_IPropertyPage;


    
    struct IPropertyPage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPageSite( 
             IPropertyPageSite  *pPageSite) = 0;
        
        virtual HRESULT __stdcall Activate( 
             HWND hWndParent,
             LPCRECT pRect,
             BOOL bModal) = 0;
        
        virtual HRESULT __stdcall Deactivate( void) = 0;
        
        virtual HRESULT __stdcall GetPageInfo( 
             PROPPAGEINFO  *pPageInfo) = 0;
        
        virtual HRESULT __stdcall SetObjects( 
             ULONG cObjects,
             IUnknown  * *ppUnk) = 0;
        
        virtual HRESULT __stdcall Show( 
             UINT nCmdShow) = 0;
        
        virtual HRESULT __stdcall Move( 
             LPCRECT pRect) = 0;
        
        virtual HRESULT __stdcall IsPageDirty( void) = 0;
        
        virtual HRESULT __stdcall Apply( void) = 0;
        
        virtual HRESULT __stdcall Help( 
             LPCOLESTR pszHelpDir) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG  *pMsg) = 0;
        
    };
    
























































































































#line 2056 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPropertyPage_SetPageSite_Proxy( 
    IPropertyPage  * This,
     IPropertyPageSite  *pPageSite);


void __stdcall IPropertyPage_SetPageSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Activate_Proxy( 
    IPropertyPage  * This,
     HWND hWndParent,
     LPCRECT pRect,
     BOOL bModal);


void __stdcall IPropertyPage_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Deactivate_Proxy( 
    IPropertyPage  * This);


void __stdcall IPropertyPage_Deactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_GetPageInfo_Proxy( 
    IPropertyPage  * This,
     PROPPAGEINFO  *pPageInfo);


void __stdcall IPropertyPage_GetPageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_SetObjects_Proxy( 
    IPropertyPage  * This,
     ULONG cObjects,
     IUnknown  * *ppUnk);


void __stdcall IPropertyPage_SetObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Show_Proxy( 
    IPropertyPage  * This,
     UINT nCmdShow);


void __stdcall IPropertyPage_Show_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Move_Proxy( 
    IPropertyPage  * This,
     LPCRECT pRect);


void __stdcall IPropertyPage_Move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_IsPageDirty_Proxy( 
    IPropertyPage  * This);


void __stdcall IPropertyPage_IsPageDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Apply_Proxy( 
    IPropertyPage  * This);


void __stdcall IPropertyPage_Apply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Help_Proxy( 
    IPropertyPage  * This,
     LPCOLESTR pszHelpDir);


void __stdcall IPropertyPage_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_TranslateAccelerator_Proxy( 
    IPropertyPage  * This,
     MSG  *pMsg);


void __stdcall IPropertyPage_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2193 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPropertyPage2  *LPPROPERTYPAGE2;


extern "C" const IID IID_IPropertyPage2;


    
    struct IPropertyPage2 : public IPropertyPage
    {
    public:
        virtual HRESULT __stdcall EditProperty( 
             DISPID dispID) = 0;
        
    };
    
































































































































#line 2350 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPropertyPage2_EditProperty_Proxy( 
    IPropertyPage2  * This,
     DISPID dispID);


void __stdcall IPropertyPage2_EditProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2367 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPropertyPageSite  *LPPROPERTYPAGESITE;

typedef 
enum tagPROPPAGESTATUS
    {	PROPPAGESTATUS_DIRTY	= 0x1,
	PROPPAGESTATUS_VALIDATE	= 0x2,
	PROPPAGESTATUS_CLEAN	= 0x4
    }	PROPPAGESTATUS;


extern "C" const IID IID_IPropertyPageSite;


    
    struct IPropertyPageSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStatusChange( 
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetLocaleID( 
             LCID  *pLocaleID) = 0;
        
        virtual HRESULT __stdcall GetPageContainer( 
             IUnknown  * *ppUnk) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG  *pMsg) = 0;
        
    };
    







































































#line 2483 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPropertyPageSite_OnStatusChange_Proxy( 
    IPropertyPageSite  * This,
     DWORD dwFlags);


void __stdcall IPropertyPageSite_OnStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPageSite_GetLocaleID_Proxy( 
    IPropertyPageSite  * This,
     LCID  *pLocaleID);


void __stdcall IPropertyPageSite_GetLocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPageSite_GetPageContainer_Proxy( 
    IPropertyPageSite  * This,
     IUnknown  * *ppUnk);


void __stdcall IPropertyPageSite_GetPageContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPageSite_TranslateAccelerator_Proxy( 
    IPropertyPageSite  * This,
     MSG  *pMsg);


void __stdcall IPropertyPageSite_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2536 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPropertyNotifySink  *LPPROPERTYNOTIFYSINK;


extern "C" const IID IID_IPropertyNotifySink;


    
    struct IPropertyNotifySink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnChanged( 
             DISPID dispID) = 0;
        
        virtual HRESULT __stdcall OnRequestEdit( 
             DISPID dispID) = 0;
        
    };
    

























































#line 2625 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPropertyNotifySink_OnChanged_Proxy( 
    IPropertyNotifySink  * This,
     DISPID dispID);


void __stdcall IPropertyNotifySink_OnChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyNotifySink_OnRequestEdit_Proxy( 
    IPropertyNotifySink  * This,
     DISPID dispID);


void __stdcall IPropertyNotifySink_OnRequestEdit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2654 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef ISpecifyPropertyPages  *LPSPECIFYPROPERTYPAGES;

typedef struct  tagCAUUID
    {
    ULONG cElems;
     GUID  *pElems;
    }	CAUUID;

typedef struct tagCAUUID  *LPCAUUID;


extern "C" const IID IID_ISpecifyPropertyPages;


    
    struct ISpecifyPropertyPages : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPages( 
             CAUUID  *pPages) = 0;
        
    };
    


















































#line 2741 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall ISpecifyPropertyPages_GetPages_Proxy( 
    ISpecifyPropertyPages  * This,
     CAUUID  *pPages);


void __stdcall ISpecifyPropertyPages_GetPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2758 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPersistMemory  *LPPERSISTMEMORY;


extern "C" const IID IID_IPersistMemory;


    
    struct IPersistMemory : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual  HRESULT __stdcall Load( 
             LPVOID pMem,
             ULONG cbSize) = 0;
        
        virtual  HRESULT __stdcall Save( 
             LPVOID pMem,
             BOOL fClearDirty,
             ULONG cbSize) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULONG  *pCbSize) = 0;
        
        virtual HRESULT __stdcall InitNew( void) = 0;
        
    };
    























































































#line 2887 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPersistMemory_IsDirty_Proxy( 
    IPersistMemory  * This);


void __stdcall IPersistMemory_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IPersistMemory_RemoteLoad_Proxy( 
    IPersistMemory  * This,
     BYTE  *pMem,
     ULONG cbSize);


void __stdcall IPersistMemory_RemoteLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IPersistMemory_RemoteSave_Proxy( 
    IPersistMemory  * This,
     BYTE  *pMem,
     BOOL fClearDirty,
     ULONG cbSize);


void __stdcall IPersistMemory_RemoteSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMemory_GetSizeMax_Proxy( 
    IPersistMemory  * This,
     ULONG  *pCbSize);


void __stdcall IPersistMemory_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMemory_InitNew_Proxy( 
    IPersistMemory  * This);


void __stdcall IPersistMemory_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2953 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPersistStreamInit  *LPPERSISTSTREAMINIT;


extern "C" const IID IID_IPersistStreamInit;


    
    struct IPersistStreamInit : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             LPSTREAM pStm) = 0;
        
        virtual HRESULT __stdcall Save( 
             LPSTREAM pStm,
             BOOL fClearDirty) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULARGE_INTEGER  *pCbSize) = 0;
        
        virtual HRESULT __stdcall InitNew( void) = 0;
        
    };
    





















































































#line 3078 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPersistStreamInit_IsDirty_Proxy( 
    IPersistStreamInit  * This);


void __stdcall IPersistStreamInit_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_Load_Proxy( 
    IPersistStreamInit  * This,
     LPSTREAM pStm);


void __stdcall IPersistStreamInit_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_Save_Proxy( 
    IPersistStreamInit  * This,
     LPSTREAM pStm,
     BOOL fClearDirty);


void __stdcall IPersistStreamInit_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_GetSizeMax_Proxy( 
    IPersistStreamInit  * This,
     ULARGE_INTEGER  *pCbSize);


void __stdcall IPersistStreamInit_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_InitNew_Proxy( 
    IPersistStreamInit  * This);


void __stdcall IPersistStreamInit_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3142 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPersistPropertyBag  *LPPERSISTPROPERTYBAG;


extern "C" const IID IID_IPersistPropertyBag;


    
    struct IPersistPropertyBag : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             IPropertyBag  *pPropBag,
             IErrorLog  *pErrorLog) = 0;
        
        virtual HRESULT __stdcall Save( 
             IPropertyBag  *pPropBag,
             BOOL fClearDirty,
             BOOL fSaveAllProperties) = 0;
        
    };
    










































































#line 3253 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPersistPropertyBag_InitNew_Proxy( 
    IPersistPropertyBag  * This);


void __stdcall IPersistPropertyBag_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag_Load_Proxy( 
    IPersistPropertyBag  * This,
     IPropertyBag  *pPropBag,
     IErrorLog  *pErrorLog);


void __stdcall IPersistPropertyBag_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag_Save_Proxy( 
    IPersistPropertyBag  * This,
     IPropertyBag  *pPropBag,
     BOOL fClearDirty,
     BOOL fSaveAllProperties);


void __stdcall IPersistPropertyBag_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3296 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef ISimpleFrameSite  *LPSIMPLEFRAMESITE;


extern "C" const IID IID_ISimpleFrameSite;


    
    struct ISimpleFrameSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreMessageFilter( 
             HWND hWnd,
             UINT msg,
             WPARAM wp,
             LPARAM lp,
             LRESULT  *plResult,
             DWORD  *pdwCookie) = 0;
        
        virtual HRESULT __stdcall PostMessageFilter( 
             HWND hWnd,
             UINT msg,
             WPARAM wp,
             LPARAM lp,
             LRESULT  *plResult,
             DWORD dwCookie) = 0;
        
    };
    



































































#line 3405 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall ISimpleFrameSite_PreMessageFilter_Proxy( 
    ISimpleFrameSite  * This,
     HWND hWnd,
     UINT msg,
     WPARAM wp,
     LPARAM lp,
     LRESULT  *plResult,
     DWORD  *pdwCookie);


void __stdcall ISimpleFrameSite_PreMessageFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISimpleFrameSite_PostMessageFilter_Proxy( 
    ISimpleFrameSite  * This,
     HWND hWnd,
     UINT msg,
     WPARAM wp,
     LPARAM lp,
     LRESULT  *plResult,
     DWORD dwCookie);


void __stdcall ISimpleFrameSite_PostMessageFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3444 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IFont  *LPFONT;


typedef TEXTMETRICW TEXTMETRICOLE;



#line 3465 "C:\\MSDEV\\INCLUDE\\ocidl.h"
typedef TEXTMETRICOLE  *LPTEXTMETRICOLE;


extern "C" const IID IID_IFont;


    
    struct IFont : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Name( 
             BSTR  *pName) = 0;
        
        virtual HRESULT __stdcall put_Name( 
             BSTR name) = 0;
        
        virtual HRESULT __stdcall get_Size( 
             CY  *pSize) = 0;
        
        virtual HRESULT __stdcall put_Size( 
             CY size) = 0;
        
        virtual HRESULT __stdcall get_Bold( 
             BOOL  *pBold) = 0;
        
        virtual HRESULT __stdcall put_Bold( 
             BOOL bold) = 0;
        
        virtual HRESULT __stdcall get_Italic( 
             BOOL  *pItalic) = 0;
        
        virtual HRESULT __stdcall put_Italic( 
             BOOL italic) = 0;
        
        virtual HRESULT __stdcall get_Underline( 
             BOOL  *pUnderline) = 0;
        
        virtual HRESULT __stdcall put_Underline( 
             BOOL underline) = 0;
        
        virtual HRESULT __stdcall get_Strikethrough( 
             BOOL  *pStrikethrough) = 0;
        
        virtual HRESULT __stdcall put_Strikethrough( 
             BOOL strikethrough) = 0;
        
        virtual HRESULT __stdcall get_Weight( 
             SHORT  *pWeight) = 0;
        
        virtual HRESULT __stdcall put_Weight( 
             SHORT weight) = 0;
        
        virtual HRESULT __stdcall get_Charset( 
             SHORT  *pCharset) = 0;
        
        virtual HRESULT __stdcall put_Charset( 
             SHORT charset) = 0;
        
        virtual HRESULT __stdcall get_hFont( 
             HFONT  *phFont) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IFont  * *ppFont) = 0;
        
        virtual HRESULT __stdcall IsEqual( 
             IFont  *pFontOther) = 0;
        
        virtual HRESULT __stdcall SetRatio( 
             LONG cyLogical,
             LONG cyHimetric) = 0;
        
        virtual HRESULT __stdcall QueryTextMetrics( 
             TEXTMETRICOLE  *pTM) = 0;
        
        virtual HRESULT __stdcall AddRefHfont( 
             HFONT hFont) = 0;
        
        virtual HRESULT __stdcall ReleaseHfont( 
             HFONT hFont) = 0;
        
        virtual HRESULT __stdcall SetHdc( 
             HDC hDC) = 0;
        
    };
    




















































































































































































































#line 3763 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IFont_get_Name_Proxy( 
    IFont  * This,
     BSTR  *pName);


void __stdcall IFont_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Name_Proxy( 
    IFont  * This,
     BSTR name);


void __stdcall IFont_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Size_Proxy( 
    IFont  * This,
     CY  *pSize);


void __stdcall IFont_get_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Size_Proxy( 
    IFont  * This,
     CY size);


void __stdcall IFont_put_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Bold_Proxy( 
    IFont  * This,
     BOOL  *pBold);


void __stdcall IFont_get_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Bold_Proxy( 
    IFont  * This,
     BOOL bold);


void __stdcall IFont_put_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Italic_Proxy( 
    IFont  * This,
     BOOL  *pItalic);


void __stdcall IFont_get_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Italic_Proxy( 
    IFont  * This,
     BOOL italic);


void __stdcall IFont_put_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Underline_Proxy( 
    IFont  * This,
     BOOL  *pUnderline);


void __stdcall IFont_get_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Underline_Proxy( 
    IFont  * This,
     BOOL underline);


void __stdcall IFont_put_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Strikethrough_Proxy( 
    IFont  * This,
     BOOL  *pStrikethrough);


void __stdcall IFont_get_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Strikethrough_Proxy( 
    IFont  * This,
     BOOL strikethrough);


void __stdcall IFont_put_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Weight_Proxy( 
    IFont  * This,
     SHORT  *pWeight);


void __stdcall IFont_get_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Weight_Proxy( 
    IFont  * This,
     SHORT weight);


void __stdcall IFont_put_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Charset_Proxy( 
    IFont  * This,
     SHORT  *pCharset);


void __stdcall IFont_get_Charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Charset_Proxy( 
    IFont  * This,
     SHORT charset);


void __stdcall IFont_put_Charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_hFont_Proxy( 
    IFont  * This,
     HFONT  *phFont);


void __stdcall IFont_get_hFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_Clone_Proxy( 
    IFont  * This,
     IFont  * *ppFont);


void __stdcall IFont_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_IsEqual_Proxy( 
    IFont  * This,
     IFont  *pFontOther);


void __stdcall IFont_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_SetRatio_Proxy( 
    IFont  * This,
     LONG cyLogical,
     LONG cyHimetric);


void __stdcall IFont_SetRatio_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_QueryTextMetrics_Proxy( 
    IFont  * This,
     TEXTMETRICOLE  *pTM);


void __stdcall IFont_QueryTextMetrics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_AddRefHfont_Proxy( 
    IFont  * This,
     HFONT hFont);


void __stdcall IFont_AddRefHfont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_ReleaseHfont_Proxy( 
    IFont  * This,
     HFONT hFont);


void __stdcall IFont_ReleaseHfont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_SetHdc_Proxy( 
    IFont  * This,
     HDC hDC);


void __stdcall IFont_SetHdc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4057 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPicture  *LPPICTURE;

typedef 
enum tagPictureAttributes
    {	PICTURE_SCALABLE	= 0x1,
	PICTURE_TRANSPARENT	= 0x2
    }	PICTUREATTRIBUTES;

typedef UINT OLE_HANDLE;

typedef LONG OLE_XPOS_HIMETRIC;

typedef LONG OLE_YPOS_HIMETRIC;

typedef LONG OLE_XSIZE_HIMETRIC;

typedef LONG OLE_YSIZE_HIMETRIC;


extern "C" const IID IID_IPicture;


    
    struct IPicture : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Handle( 
             OLE_HANDLE  *pHandle) = 0;
        
        virtual HRESULT __stdcall get_hPal( 
             OLE_HANDLE  *phPal) = 0;
        
        virtual HRESULT __stdcall get_Type( 
             SHORT  *pType) = 0;
        
        virtual HRESULT __stdcall get_Width( 
             OLE_XSIZE_HIMETRIC  *pWidth) = 0;
        
        virtual HRESULT __stdcall get_Height( 
             OLE_YSIZE_HIMETRIC  *pHeight) = 0;
        
        virtual HRESULT __stdcall Render( 
             HDC hDC,
             LONG x,
             LONG y,
             LONG cx,
             LONG cy,
             OLE_XPOS_HIMETRIC xSrc,
             OLE_YPOS_HIMETRIC ySrc,
             OLE_XSIZE_HIMETRIC cxSrc,
             OLE_YSIZE_HIMETRIC cySrc,
             LPCRECT pRcWBounds) = 0;
        
        virtual HRESULT __stdcall set_hPal( 
             OLE_HANDLE hPal) = 0;
        
        virtual HRESULT __stdcall get_CurDC( 
             HDC  *phDC) = 0;
        
        virtual HRESULT __stdcall SelectPicture( 
             HDC hDCIn,
             HDC  *phDCOut,
             OLE_HANDLE  *phBmpOut) = 0;
        
        virtual HRESULT __stdcall get_KeepOriginalFormat( 
             BOOL  *pKeep) = 0;
        
        virtual HRESULT __stdcall put_KeepOriginalFormat( 
             BOOL keep) = 0;
        
        virtual HRESULT __stdcall PictureChanged( void) = 0;
        
        virtual HRESULT __stdcall SaveAsFile( 
             LPSTREAM pStream,
             BOOL fSaveMemCopy,
             LONG  *pCbSize) = 0;
        
        virtual HRESULT __stdcall get_Attributes( 
             DWORD  *pDwAttr) = 0;
        
    };
    

























































































































































#line 4306 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPicture_get_Handle_Proxy( 
    IPicture  * This,
     OLE_HANDLE  *pHandle);


void __stdcall IPicture_get_Handle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_hPal_Proxy( 
    IPicture  * This,
     OLE_HANDLE  *phPal);


void __stdcall IPicture_get_hPal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Type_Proxy( 
    IPicture  * This,
     SHORT  *pType);


void __stdcall IPicture_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Width_Proxy( 
    IPicture  * This,
     OLE_XSIZE_HIMETRIC  *pWidth);


void __stdcall IPicture_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Height_Proxy( 
    IPicture  * This,
     OLE_YSIZE_HIMETRIC  *pHeight);


void __stdcall IPicture_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_Render_Proxy( 
    IPicture  * This,
     HDC hDC,
     LONG x,
     LONG y,
     LONG cx,
     LONG cy,
     OLE_XPOS_HIMETRIC xSrc,
     OLE_YPOS_HIMETRIC ySrc,
     OLE_XSIZE_HIMETRIC cxSrc,
     OLE_YSIZE_HIMETRIC cySrc,
     LPCRECT pRcWBounds);


void __stdcall IPicture_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_set_hPal_Proxy( 
    IPicture  * This,
     OLE_HANDLE hPal);


void __stdcall IPicture_set_hPal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_CurDC_Proxy( 
    IPicture  * This,
     HDC  *phDC);


void __stdcall IPicture_get_CurDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_SelectPicture_Proxy( 
    IPicture  * This,
     HDC hDCIn,
     HDC  *phDCOut,
     OLE_HANDLE  *phBmpOut);


void __stdcall IPicture_SelectPicture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_KeepOriginalFormat_Proxy( 
    IPicture  * This,
     BOOL  *pKeep);


void __stdcall IPicture_get_KeepOriginalFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_put_KeepOriginalFormat_Proxy( 
    IPicture  * This,
     BOOL keep);


void __stdcall IPicture_put_KeepOriginalFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_PictureChanged_Proxy( 
    IPicture  * This);


void __stdcall IPicture_PictureChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_SaveAsFile_Proxy( 
    IPicture  * This,
     LPSTREAM pStream,
     BOOL fSaveMemCopy,
     LONG  *pCbSize);


void __stdcall IPicture_SaveAsFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Attributes_Proxy( 
    IPicture  * This,
     DWORD  *pDwAttr);


void __stdcall IPicture_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4491 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IFontDisp  *LPFONTDISP;


extern "C" const IID IID_IFontDisp;


    
    struct IFontDisp : public IDispatch
    {
    public:
    };
    





















































































#line 4602 "C:\\MSDEV\\INCLUDE\\ocidl.h"




#line 4607 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPictureDisp  *LPPICTUREDISP;


extern "C" const IID IID_IPictureDisp;


    
    struct IPictureDisp : public IDispatch
    {
    public:
    };
    





















































































#line 4718 "C:\\MSDEV\\INCLUDE\\ocidl.h"




#line 4723 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IAdviseSinkEx  *LPADVISESINKEX;


extern "C" const IID IID_IAdviseSinkEx;


    
    struct IAdviseSinkEx : public IAdviseSink
    {
    public:
        virtual  void __stdcall OnViewStatusChange( 
             DWORD dwViewStatus) = 0;
        
    };
    






















































































#line 4838 "C:\\MSDEV\\INCLUDE\\ocidl.h"



 void __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Proxy( 
    IAdviseSinkEx  * This,
     DWORD dwViewStatus);


void __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4855 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleInPlaceObjectWindowless  *LPOLEINPLACEOBJECTWINDOWLESS;


extern "C" const IID IID_IOleInPlaceObjectWindowless;


    
    struct IOleInPlaceObjectWindowless : public IOleInPlaceObject
    {
    public:
        virtual HRESULT __stdcall OnWindowMessage( 
             UINT msg,
             WPARAM wParam,
             LPARAM lParam,
             LRESULT  *plResult) = 0;
        
        virtual HRESULT __stdcall GetDropTarget( 
             IDropTarget  * *ppDropTarget) = 0;
        
    };
    






































































































#line 4992 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleInPlaceObjectWindowless_OnWindowMessage_Proxy( 
    IOleInPlaceObjectWindowless  * This,
     UINT msg,
     WPARAM wParam,
     LPARAM lParam,
     LRESULT  *plResult);


void __stdcall IOleInPlaceObjectWindowless_OnWindowMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObjectWindowless_GetDropTarget_Proxy( 
    IOleInPlaceObjectWindowless  * This,
     IDropTarget  * *ppDropTarget);


void __stdcall IOleInPlaceObjectWindowless_GetDropTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5024 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleInPlaceSiteEx  *LPOLEINPLACESITEEX;

typedef  
enum tagACTIVATEFLAGS
    {	ACTIVATE_WINDOWLESS	= 1
    }	ACTIVATEFLAGS;


extern "C" const IID IID_IOleInPlaceSiteEx;


    
    struct IOleInPlaceSiteEx : public IOleInPlaceSite
    {
    public:
        virtual HRESULT __stdcall OnInPlaceActivateEx( 
             BOOL  *pfNoRedraw,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall OnInPlaceDeactivateEx( 
             BOOL fNoRedraw) = 0;
        
        virtual HRESULT __stdcall RequestUIActivate( void) = 0;
        
    };
    




















































































































































#line 5212 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleInPlaceSiteEx_OnInPlaceActivateEx_Proxy( 
    IOleInPlaceSiteEx  * This,
     BOOL  *pfNoRedraw,
     DWORD dwFlags);


void __stdcall IOleInPlaceSiteEx_OnInPlaceActivateEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteEx_OnInPlaceDeactivateEx_Proxy( 
    IOleInPlaceSiteEx  * This,
     BOOL fNoRedraw);


void __stdcall IOleInPlaceSiteEx_OnInPlaceDeactivateEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteEx_RequestUIActivate_Proxy( 
    IOleInPlaceSiteEx  * This);


void __stdcall IOleInPlaceSiteEx_RequestUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5253 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleInPlaceSiteWindowless  *LPOLEINPLACESITEWINDOWLESS;

typedef  
enum tagOLEDCFLAGS
    {	OLEDC_NODRAW	= 0x1,
	OLEDC_PAINTBKGND	= 0x2,
	OLEDC_OFFSCREEN	= 0x4
    }	OLEDCFLAGS;


extern "C" const IID IID_IOleInPlaceSiteWindowless;


    
    struct IOleInPlaceSiteWindowless : public IOleInPlaceSiteEx
    {
    public:
        virtual HRESULT __stdcall CanWindowlessActivate( void) = 0;
        
        virtual HRESULT __stdcall GetCapture( void) = 0;
        
        virtual HRESULT __stdcall SetCapture( 
             BOOL fCapture) = 0;
        
        virtual HRESULT __stdcall GetFocus( void) = 0;
        
        virtual HRESULT __stdcall SetFocus( 
             BOOL fFocus) = 0;
        
        virtual HRESULT __stdcall GetDC( 
             LPCRECT pRect,
             DWORD grfFlags,
             HDC  *phDC) = 0;
        
        virtual HRESULT __stdcall ReleaseDC( 
             HDC hDC) = 0;
        
        virtual HRESULT __stdcall InvalidateRect( 
             LPCRECT pRect,
             BOOL fErase) = 0;
        
        virtual HRESULT __stdcall InvalidateRgn( 
             HRGN hRGN,
             BOOL fErase) = 0;
        
        virtual HRESULT __stdcall ScrollRect( 
             INT dx,
             INT dy,
             LPCRECT pRectScroll,
             LPCRECT pRectClip) = 0;
        
        virtual HRESULT __stdcall AdjustRect( 
             LPRECT prc) = 0;
        
        virtual HRESULT __stdcall OnDefWindowMessage( 
             UINT msg,
             WPARAM wParam,
             LPARAM lParam,
             LRESULT  *plResult) = 0;
        
    };
    
















































































































































































































































#line 5569 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleInPlaceSiteWindowless_CanWindowlessActivate_Proxy( 
    IOleInPlaceSiteWindowless  * This);


void __stdcall IOleInPlaceSiteWindowless_CanWindowlessActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_GetCapture_Proxy( 
    IOleInPlaceSiteWindowless  * This);


void __stdcall IOleInPlaceSiteWindowless_GetCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_SetCapture_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     BOOL fCapture);


void __stdcall IOleInPlaceSiteWindowless_SetCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_GetFocus_Proxy( 
    IOleInPlaceSiteWindowless  * This);


void __stdcall IOleInPlaceSiteWindowless_GetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_SetFocus_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     BOOL fFocus);


void __stdcall IOleInPlaceSiteWindowless_SetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_GetDC_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     LPCRECT pRect,
     DWORD grfFlags,
     HDC  *phDC);


void __stdcall IOleInPlaceSiteWindowless_GetDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_ReleaseDC_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     HDC hDC);


void __stdcall IOleInPlaceSiteWindowless_ReleaseDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_InvalidateRect_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     LPCRECT pRect,
     BOOL fErase);


void __stdcall IOleInPlaceSiteWindowless_InvalidateRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_InvalidateRgn_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     HRGN hRGN,
     BOOL fErase);


void __stdcall IOleInPlaceSiteWindowless_InvalidateRgn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_ScrollRect_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     INT dx,
     INT dy,
     LPCRECT pRectScroll,
     LPCRECT pRectClip);


void __stdcall IOleInPlaceSiteWindowless_ScrollRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_AdjustRect_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     LPRECT prc);


void __stdcall IOleInPlaceSiteWindowless_AdjustRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_OnDefWindowMessage_Proxy( 
    IOleInPlaceSiteWindowless  * This,
     UINT msg,
     WPARAM wParam,
     LPARAM lParam,
     LRESULT  *plResult);


void __stdcall IOleInPlaceSiteWindowless_OnDefWindowMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5725 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IViewObjectEx  *LPVIEWOBJECTEX;

typedef  
enum tagVIEWSTATUS
    {	VIEWSTATUS_OPAQUE	= 1,
	VIEWSTATUS_SOLIDBKGND	= 2,
	VIEWSTATUS_DVASPECTOPAQUE	= 4,
	VIEWSTATUS_DVASPECTTRANSPARENT	= 8
    }	VIEWSTATUS;

typedef  
enum tagHITRESULT
    {	HITRESULT_OUTSIDE	= 0,
	HITRESULT_TRANSPARENT	= 1,
	HITRESULT_CLOSE	= 2,
	HITRESULT_HIT	= 3
    }	HITRESULT;

typedef  
enum tagDVASPECT2
    {	DVASPECT_OPAQUE	= 16,
	DVASPECT_TRANSPARENT	= 32
    }	DVASPECT2;

typedef struct  tagExtentInfo
    {
    ULONG cb;
    DWORD dwExtentMode;
    SIZEL sizelProposed;
    }	DVEXTENTINFO;

typedef  
enum tagExtentMode
    {	DVEXTENT_CONTENT	= 0,
	DVEXTENT_INTEGRAL	= DVEXTENT_CONTENT + 1
    }	DVEXTENTMODE;

typedef  
enum tagAspectInfoFlag
    {	DVASPECTINFOFLAG_CANOPTIMIZE	= 1
    }	DVASPECTINFOFLAG;

typedef struct  tagAspectInfo
    {
    ULONG cb;
    DWORD dwFlags;
    }	DVASPECTINFO;


extern "C" const IID IID_IViewObjectEx;


    
    struct IViewObjectEx : public IViewObject2
    {
    public:
        virtual HRESULT __stdcall GetRect( 
             DWORD dwAspect,
             LPRECTL pRect) = 0;
        
        virtual HRESULT __stdcall GetViewStatus( 
             DWORD  *pdwStatus) = 0;
        
        virtual HRESULT __stdcall QueryHitPoint( 
             DWORD dwAspect,
             LPCRECT pRectBounds,
             POINT ptlLoc,
             LONG lCloseHint,
             DWORD  *pHitResult) = 0;
        
        virtual HRESULT __stdcall QueryHitRect( 
             DWORD dwAspect,
             LPCRECT pRectBounds,
             LPCRECT pRectLoc,
             LONG lCloseHint,
             DWORD  *pHitResult) = 0;
        
        virtual HRESULT __stdcall GetNaturalExtent( 
             DWORD dwAspect,
             LONG lindex,
             DVTARGETDEVICE  *ptd,
             HDC hicTargetDev,
             DVEXTENTINFO  *pExtentInfo,
             LPSIZEL pSizel) = 0;
        
    };
    








































































































































































#line 5994 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IViewObjectEx_GetRect_Proxy( 
    IViewObjectEx  * This,
     DWORD dwAspect,
     LPRECTL pRect);


void __stdcall IViewObjectEx_GetRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_GetViewStatus_Proxy( 
    IViewObjectEx  * This,
     DWORD  *pdwStatus);


void __stdcall IViewObjectEx_GetViewStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_QueryHitPoint_Proxy( 
    IViewObjectEx  * This,
     DWORD dwAspect,
     LPCRECT pRectBounds,
     POINT ptlLoc,
     LONG lCloseHint,
     DWORD  *pHitResult);


void __stdcall IViewObjectEx_QueryHitPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_QueryHitRect_Proxy( 
    IViewObjectEx  * This,
     DWORD dwAspect,
     LPCRECT pRectBounds,
     LPCRECT pRectLoc,
     LONG lCloseHint,
     DWORD  *pHitResult);


void __stdcall IViewObjectEx_QueryHitRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_GetNaturalExtent_Proxy( 
    IViewObjectEx  * This,
     DWORD dwAspect,
     LONG lindex,
     DVTARGETDEVICE  *ptd,
     HDC hicTargetDev,
     DVEXTENTINFO  *pExtentInfo,
     LPSIZEL pSizel);


void __stdcall IViewObjectEx_GetNaturalExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6073 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleUndoUnit  *LPOLEUNDOUNIT;


extern "C" const IID IID_IOleUndoUnit;


    
    struct IOleUndoUnit : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Do( 
             IOleUndoManager  *pUndoManager) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             BSTR  *pBstr) = 0;
        
        virtual HRESULT __stdcall GetUnitType( 
             CLSID  *pClsid,
             LONG  *plID) = 0;
        
        virtual HRESULT __stdcall OnNextAdd( void) = 0;
        
    };
    







































































#line 6182 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleUndoUnit_Do_Proxy( 
    IOleUndoUnit  * This,
     IOleUndoManager  *pUndoManager);


void __stdcall IOleUndoUnit_Do_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoUnit_GetDescription_Proxy( 
    IOleUndoUnit  * This,
     BSTR  *pBstr);


void __stdcall IOleUndoUnit_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoUnit_GetUnitType_Proxy( 
    IOleUndoUnit  * This,
     CLSID  *pClsid,
     LONG  *plID);


void __stdcall IOleUndoUnit_GetUnitType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoUnit_OnNextAdd_Proxy( 
    IOleUndoUnit  * This);


void __stdcall IOleUndoUnit_OnNextAdd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6235 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IOleParentUndoUnit  *LPOLEPARENTUNDOUNIT;


extern "C" const IID IID_IOleParentUndoUnit;


    
    struct IOleParentUndoUnit : public IOleUndoUnit
    {
    public:
        virtual HRESULT __stdcall Open( 
             IOleParentUndoUnit  *pPUU) = 0;
        
        virtual HRESULT __stdcall Close( 
             IOleParentUndoUnit  *pPUU,
             BOOL fCommit) = 0;
        
        virtual HRESULT __stdcall Add( 
             IOleUndoUnit  *pUU) = 0;
        
        virtual HRESULT __stdcall FindUnit( 
             IOleUndoUnit  *pUU) = 0;
        
        virtual HRESULT __stdcall GetParentState( 
             DWORD  *pdwState) = 0;
        
    };
    












































































































#line 6385 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleParentUndoUnit_Open_Proxy( 
    IOleParentUndoUnit  * This,
     IOleParentUndoUnit  *pPUU);


void __stdcall IOleParentUndoUnit_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_Close_Proxy( 
    IOleParentUndoUnit  * This,
     IOleParentUndoUnit  *pPUU,
     BOOL fCommit);


void __stdcall IOleParentUndoUnit_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_Add_Proxy( 
    IOleParentUndoUnit  * This,
     IOleUndoUnit  *pUU);


void __stdcall IOleParentUndoUnit_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_FindUnit_Proxy( 
    IOleParentUndoUnit  * This,
     IOleUndoUnit  *pUU);


void __stdcall IOleParentUndoUnit_FindUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_GetParentState_Proxy( 
    IOleParentUndoUnit  * This,
     DWORD  *pdwState);


void __stdcall IOleParentUndoUnit_GetParentState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6451 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IEnumOleUndoUnits  *LPENUMOLEUNDOUNITS;


extern "C" const IID IID_IEnumOleUndoUnits;


    
    struct IEnumOleUndoUnits : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cElt,
             IOleUndoUnit  * *rgElt,
             ULONG  *pcEltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cElt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumOleUndoUnits  * *ppEnum) = 0;
        
    };
    








































































#line 6562 "C:\\MSDEV\\INCLUDE\\ocidl.h"



 HRESULT __stdcall IEnumOleUndoUnits_RemoteNext_Proxy( 
    IEnumOleUndoUnits  * This,
     ULONG cElt,
     IOleUndoUnit  * *rgElt,
     ULONG  *pcEltFetched);


void __stdcall IEnumOleUndoUnits_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleUndoUnits_Skip_Proxy( 
    IEnumOleUndoUnits  * This,
     ULONG cElt);


void __stdcall IEnumOleUndoUnits_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleUndoUnits_Reset_Proxy( 
    IEnumOleUndoUnits  * This);


void __stdcall IEnumOleUndoUnits_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleUndoUnits_Clone_Proxy( 
    IEnumOleUndoUnits  * This,
     IEnumOleUndoUnits  * *ppEnum);


void __stdcall IEnumOleUndoUnits_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6616 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 



typedef IOleUndoManager  *LPOLEUNDOMANAGER;


extern "C" const IID IID_IOleUndoManager;


    
    struct IOleUndoManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Open( 
             IOleParentUndoUnit  *pPUU) = 0;
        
        virtual HRESULT __stdcall Close( 
             IOleParentUndoUnit  *pPUU,
             BOOL fCommit) = 0;
        
        virtual HRESULT __stdcall Add( 
             IOleUndoUnit  *pUU) = 0;
        
        virtual HRESULT __stdcall GetOpenParentState( 
             DWORD  *pdwState) = 0;
        
        virtual HRESULT __stdcall DiscardFrom( 
             IOleUndoUnit  *pUU) = 0;
        
        virtual HRESULT __stdcall UndoTo( 
             IOleUndoUnit  *pUU) = 0;
        
        virtual HRESULT __stdcall RedoTo( 
             IOleUndoUnit  *pUU) = 0;
        
        virtual HRESULT __stdcall EnumUndoable( 
             IEnumOleUndoUnits  * *ppEnum) = 0;
        
        virtual HRESULT __stdcall EnumRedoable( 
             IEnumOleUndoUnits  * *ppEnum) = 0;
        
        virtual HRESULT __stdcall GetLastUndoDescription( 
             BSTR  *pBstr) = 0;
        
        virtual HRESULT __stdcall GetLastRedoDescription( 
             BSTR  *pBstr) = 0;
        
        virtual HRESULT __stdcall Enable( 
             BOOL fEnable) = 0;
        
    };
    
































































































































#line 6808 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IOleUndoManager_Open_Proxy( 
    IOleUndoManager  * This,
     IOleParentUndoUnit  *pPUU);


void __stdcall IOleUndoManager_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_Close_Proxy( 
    IOleUndoManager  * This,
     IOleParentUndoUnit  *pPUU,
     BOOL fCommit);


void __stdcall IOleUndoManager_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_Add_Proxy( 
    IOleUndoManager  * This,
     IOleUndoUnit  *pUU);


void __stdcall IOleUndoManager_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_GetOpenParentState_Proxy( 
    IOleUndoManager  * This,
     DWORD  *pdwState);


void __stdcall IOleUndoManager_GetOpenParentState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_DiscardFrom_Proxy( 
    IOleUndoManager  * This,
     IOleUndoUnit  *pUU);


void __stdcall IOleUndoManager_DiscardFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_UndoTo_Proxy( 
    IOleUndoManager  * This,
     IOleUndoUnit  *pUU);


void __stdcall IOleUndoManager_UndoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_RedoTo_Proxy( 
    IOleUndoManager  * This,
     IOleUndoUnit  *pUU);


void __stdcall IOleUndoManager_RedoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_EnumUndoable_Proxy( 
    IOleUndoManager  * This,
     IEnumOleUndoUnits  * *ppEnum);


void __stdcall IOleUndoManager_EnumUndoable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_EnumRedoable_Proxy( 
    IOleUndoManager  * This,
     IEnumOleUndoUnits  * *ppEnum);


void __stdcall IOleUndoManager_EnumRedoable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_GetLastUndoDescription_Proxy( 
    IOleUndoManager  * This,
     BSTR  *pBstr);


void __stdcall IOleUndoManager_GetLastUndoDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_GetLastRedoDescription_Proxy( 
    IOleUndoManager  * This,
     BSTR  *pBstr);


void __stdcall IOleUndoManager_GetLastRedoDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_Enable_Proxy( 
    IOleUndoManager  * This,
     BOOL fEnable);


void __stdcall IOleUndoManager_Enable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6958 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IQuickActivate  *LPQUICKACTIVATE;

typedef  
enum tagQACONTAINERFLAGS
    {	QACONTAINER_SHOWHATCHING	= 0x1,
	QACONTAINER_SHOWGRABHANDLES	= 0x2,
	QACONTAINER_USERMODE	= 0x4,
	QACONTAINER_DISPLAYASDEFAULT	= 0x8,
	QACONTAINER_UIDEAD	= 0x10,
	QACONTAINER_AUTOCLIP	= 0x20,
	QACONTAINER_MESSAGEREFLECT	= 0x40,
	QACONTAINER_SUPPORTSMNEMONICS	= 0x80
    }	QACONTAINERFLAGS;

typedef DWORD OLE_COLOR;

typedef struct  tagQACONTAINER
    {
    ULONG cbSize;
    IOleClientSite  *pClientSite;
    IAdviseSinkEx  *pAdviseSink;
    IPropertyNotifySink  *pPropertyNotifySink;
    IUnknown  *pUnkEventSink;
    DWORD dwAmbientFlags;
    OLE_COLOR colorFore;
    OLE_COLOR colorBack;
    IFont  *pFont;
    IOleUndoManager  *pUndoMgr;
    DWORD dwAppearance;
    LONG lcid;
    HPALETTE hpal;
    struct IBindHost  *pBindHost;
    }	QACONTAINER;

typedef struct  tagQACONTROL
    {
    ULONG cbSize;
    DWORD dwMiscStatus;
    DWORD dwViewStatus;
    DWORD dwEventCookie;
    DWORD dwPropNotifyCookie;
    DWORD dwPointerActivationPolicy;
    }	QACONTROL;


extern "C" const IID IID_IQuickActivate;


    
    struct IQuickActivate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QuickActivate( 
             QACONTAINER  *pQaContainer,
             QACONTROL  *pQaControl) = 0;
        
        virtual HRESULT __stdcall SetContentExtent( 
            LPSIZEL pSizel) = 0;
        
        virtual HRESULT __stdcall GetContentExtent( 
            LPSIZEL pSizel) = 0;
        
    };
    

































































#line 7101 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IQuickActivate_QuickActivate_Proxy( 
    IQuickActivate  * This,
     QACONTAINER  *pQaContainer,
     QACONTROL  *pQaControl);


void __stdcall IQuickActivate_QuickActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IQuickActivate_SetContentExtent_Proxy( 
    IQuickActivate  * This,
    LPSIZEL pSizel);


void __stdcall IQuickActivate_SetContentExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IQuickActivate_GetContentExtent_Proxy( 
    IQuickActivate  * This,
    LPSIZEL pSizel);


void __stdcall IQuickActivate_GetContentExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7143 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPointerInactive  *LPPOINTERINACTIVE;

typedef  
enum tagPOINTERINACTIVE
    {	POINTERINACTIVE_ACTIVATEONENTRY	= 1,
	POINTERINACTIVE_DEACTIVATEONLEAVE	= 2,
	POINTERINACTIVE_ACTIVATEONDRAG	= 4
    }	POINTERINACTIVE;


extern "C" const IID IID_IPointerInactive;


    
    struct IPointerInactive : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetActivationPolicy( 
             DWORD  *pdwPolicy) = 0;
        
        virtual HRESULT __stdcall OnInactiveMouseMove( 
             LPCRECT pRectBounds,
             LONG x,
             LONG y,
             DWORD grfKeyState) = 0;
        
        virtual HRESULT __stdcall OnInactiveSetCursor( 
             LPCRECT pRectBounds,
             LONG x,
             LONG y,
             DWORD dwMouseMsg,
             BOOL fSetAlways) = 0;
        
    };
    







































































#line 7263 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPointerInactive_GetActivationPolicy_Proxy( 
    IPointerInactive  * This,
     DWORD  *pdwPolicy);


void __stdcall IPointerInactive_GetActivationPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPointerInactive_OnInactiveMouseMove_Proxy( 
    IPointerInactive  * This,
     LPCRECT pRectBounds,
     LONG x,
     LONG y,
     DWORD grfKeyState);


void __stdcall IPointerInactive_OnInactiveMouseMove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPointerInactive_OnInactiveSetCursor_Proxy( 
    IPointerInactive  * This,
     LPCRECT pRectBounds,
     LONG x,
     LONG y,
     DWORD dwMouseMsg,
     BOOL fSetAlways);


void __stdcall IPointerInactive_OnInactiveSetCursor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7311 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IObjectWithSite  *LPOBJECTWITHSITE;


extern "C" const IID IID_IObjectWithSite;


    
    struct IObjectWithSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSite( 
             IUnknown  *pUnkSite) = 0;
        
        virtual HRESULT __stdcall GetSite( 
             const IID & riid,
             void  * *ppvSite) = 0;
        
    };
    


























































#line 7402 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IObjectWithSite_SetSite_Proxy( 
    IObjectWithSite  * This,
     IUnknown  *pUnkSite);


void __stdcall IObjectWithSite_SetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IObjectWithSite_GetSite_Proxy( 
    IObjectWithSite  * This,
     const IID & riid,
     void  * *ppvSite);


void __stdcall IObjectWithSite_GetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7432 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IErrorLog  *LPERRORLOG;


extern "C" const IID IID_IErrorLog;


    
    struct IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddError( 
             LPCOLESTR pszPropName,
             EXCEPINFO  *pExcepInfo) = 0;
        
    };
    



















































#line 7513 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IErrorLog_AddError_Proxy( 
    IErrorLog  * This,
     LPCOLESTR pszPropName,
     EXCEPINFO  *pExcepInfo);


void __stdcall IErrorLog_AddError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7531 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPropertyBag  *LPPROPERTYBAG;


extern "C" const IID IID_IPropertyBag;


    
    struct IPropertyBag : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             LPCOLESTR pszPropName,
             VARIANT  *pVar,
             IErrorLog  *pErrorLog) = 0;
        
        virtual HRESULT __stdcall Write( 
             LPCOLESTR pszPropName,
             VARIANT  *pVar) = 0;
        
    };
    




























































#line 7626 "C:\\MSDEV\\INCLUDE\\ocidl.h"



 HRESULT __stdcall IPropertyBag_RemoteRead_Proxy( 
    IPropertyBag  * This,
     LPCOLESTR pszPropName,
     VARIANT  *pVar,
     IErrorLog  *pErrorLog,
     DWORD varType,
     IUnknown  *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag_Write_Proxy( 
    IPropertyBag  * This,
     LPCOLESTR pszPropName,
     VARIANT  *pVar);


void __stdcall IPropertyBag_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7660 "C:\\MSDEV\\INCLUDE\\ocidl.h"










 


typedef IPerPropertyBrowsing  *LPPERPROPERTYBROWSING;

typedef struct  tagCALPOLESTR
    {
    ULONG cElems;
     LPOLESTR  *pElems;
    }	CALPOLESTR;

typedef struct tagCALPOLESTR  *LPCALPOLESTR;

typedef struct  tagCADWORD
    {
    ULONG cElems;
     DWORD  *pElems;
    }	CADWORD;

typedef struct tagCADWORD  *LPCADWORD;


extern "C" const IID IID_IPerPropertyBrowsing;


    
    struct IPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDisplayString( 
             DISPID dispID,
             BSTR  *pBstr) = 0;
        
        virtual HRESULT __stdcall MapPropertyToPage( 
             DISPID dispID,
             CLSID  *pClsid) = 0;
        
        virtual HRESULT __stdcall GetPredefinedStrings( 
             DISPID dispID,
             CALPOLESTR  *pCaStringsOut,
             CADWORD  *pCaCookiesOut) = 0;
        
        virtual HRESULT __stdcall GetPredefinedValue( 
             DISPID dispID,
             DWORD dwCookie,
             VARIANT  *pVarOut) = 0;
        
    };
    













































































#line 7797 "C:\\MSDEV\\INCLUDE\\ocidl.h"



HRESULT __stdcall IPerPropertyBrowsing_GetDisplayString_Proxy( 
    IPerPropertyBrowsing  * This,
     DISPID dispID,
     BSTR  *pBstr);


void __stdcall IPerPropertyBrowsing_GetDisplayString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPerPropertyBrowsing_MapPropertyToPage_Proxy( 
    IPerPropertyBrowsing  * This,
     DISPID dispID,
     CLSID  *pClsid);


void __stdcall IPerPropertyBrowsing_MapPropertyToPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPerPropertyBrowsing_GetPredefinedStrings_Proxy( 
    IPerPropertyBrowsing  * This,
     DISPID dispID,
     CALPOLESTR  *pCaStringsOut,
     CADWORD  *pCaCookiesOut);


void __stdcall IPerPropertyBrowsing_GetPredefinedStrings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPerPropertyBrowsing_GetPredefinedValue_Proxy( 
    IPerPropertyBrowsing  * This,
     DISPID dispID,
     DWORD dwCookie,
     VARIANT  *pVarOut);


void __stdcall IPerPropertyBrowsing_GetPredefinedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7856 "C:\\MSDEV\\INCLUDE\\ocidl.h"





void __stdcall UserHWND_from_local( HWND  *, UserHWND  *  * );
void __stdcall UserHWND_to_local( UserHWND  *, HWND  * );
 void __stdcall UserHWND_free_inst( UserHWND  * );
void __stdcall UserHWND_free_local( HWND  * );

void __stdcall UserHACCEL_from_local( HACCEL  *, UserHACCEL  *  * );
void __stdcall UserHACCEL_to_local( UserHACCEL  *, HACCEL  * );
 void __stdcall UserHACCEL_free_inst( UserHACCEL  * );
void __stdcall UserHACCEL_free_local( HACCEL  * );

void __stdcall UserHDC_from_local( HDC  *, UserHDC  *  * );
void __stdcall UserHDC_to_local( UserHDC  *, HDC  * );
 void __stdcall UserHDC_free_inst( UserHDC  * );
void __stdcall UserHDC_free_local( HDC  * );

void __stdcall UserHFONT_from_local( HFONT  *, UserHFONT  *  * );
void __stdcall UserHFONT_to_local( UserHFONT  *, HFONT  * );
 void __stdcall UserHFONT_free_inst( UserHFONT  * );
void __stdcall UserHFONT_free_local( HFONT  * );

void __stdcall UserMSG_from_local( MSG  *, UserMSG  *  * );
void __stdcall UserMSG_to_local( UserMSG  *, MSG  * );
 void __stdcall UserMSG_free_inst( UserMSG  * );
void __stdcall UserMSG_free_local( MSG  * );

void __stdcall UserBSTR_from_local( BSTR  *, UserBSTR  *  * );
void __stdcall UserBSTR_to_local( UserBSTR  *, BSTR  * );
 void __stdcall UserBSTR_free_inst( UserBSTR  * );
void __stdcall UserBSTR_free_local( BSTR  * );

void __stdcall UserVARIANT_from_local( VARIANT  *, UserVARIANT  *  * );
void __stdcall UserVARIANT_to_local( UserVARIANT  *, VARIANT  * );
 void __stdcall UserVARIANT_free_inst( UserVARIANT  * );
void __stdcall UserVARIANT_free_local( VARIANT  * );

void __stdcall UserEXCEPINFO_from_local( EXCEPINFO  *, UserEXCEPINFO  *  * );
void __stdcall UserEXCEPINFO_to_local( UserEXCEPINFO  *, EXCEPINFO  * );
 void __stdcall UserEXCEPINFO_free_inst( UserEXCEPINFO  * );
void __stdcall UserEXCEPINFO_free_local( EXCEPINFO  * );

 HRESULT __stdcall IEnumConnections_Next_Proxy( 
    IEnumConnections  * This,
     ULONG cConnections,
     LPCONNECTDATA rgcd,
     ULONG  *pcFetched);


 HRESULT __stdcall IEnumConnections_Next_Stub( 
    IEnumConnections  * This,
     ULONG cConnections,
     LPCONNECTDATA rgcd,
     ULONG  *pcFetched);

 HRESULT __stdcall IEnumConnectionPoints_Next_Proxy( 
    IEnumConnectionPoints  * This,
     ULONG cConnections,
     LPCONNECTIONPOINT  *ppCP,
     ULONG  *pcFetched);


 HRESULT __stdcall IEnumConnectionPoints_Next_Stub( 
    IEnumConnectionPoints  * This,
     ULONG cConnections,
     LPCONNECTIONPOINT  *ppCP,
     ULONG  *pcFetched);

 HRESULT __stdcall IClassFactory2_CreateInstanceLic_Proxy( 
    IClassFactory2  * This,
     IUnknown  *pUnkOuter,
     IUnknown  *pUnkReserved,
     const IID & riid,
     BSTR bstrKey,
     PVOID  *ppvObj);


 HRESULT __stdcall IClassFactory2_CreateInstanceLic_Stub( 
    IClassFactory2  * This,
     const IID & riid,
     BSTR bstrKey,
     IUnknown  * *ppvObj);

 HRESULT __stdcall IPersistMemory_Load_Proxy( 
    IPersistMemory  * This,
     LPVOID pMem,
     ULONG cbSize);


 HRESULT __stdcall IPersistMemory_Load_Stub( 
    IPersistMemory  * This,
     BYTE  *pMem,
     ULONG cbSize);

 HRESULT __stdcall IPersistMemory_Save_Proxy( 
    IPersistMemory  * This,
     LPVOID pMem,
     BOOL fClearDirty,
     ULONG cbSize);


 HRESULT __stdcall IPersistMemory_Save_Stub( 
    IPersistMemory  * This,
     BYTE  *pMem,
     BOOL fClearDirty,
     ULONG cbSize);

 void __stdcall IAdviseSinkEx_OnViewStatusChange_Proxy( 
    IAdviseSinkEx  * This,
     DWORD dwViewStatus);


 void __stdcall IAdviseSinkEx_OnViewStatusChange_Stub( 
    IAdviseSinkEx  * This,
     DWORD dwViewStatus);

 HRESULT __stdcall IEnumOleUndoUnits_Next_Proxy( 
    IEnumOleUndoUnits  * This,
     ULONG cElt,
     IOleUndoUnit  * *rgElt,
     ULONG  *pcEltFetched);


 HRESULT __stdcall IEnumOleUndoUnits_Next_Stub( 
    IEnumOleUndoUnits  * This,
     ULONG cElt,
     IOleUndoUnit  * *rgElt,
     ULONG  *pcEltFetched);

 HRESULT __stdcall IPropertyBag_Read_Proxy( 
    IPropertyBag  * This,
     LPCOLESTR pszPropName,
     VARIANT  *pVar,
     IErrorLog  *pErrorLog);


 HRESULT __stdcall IPropertyBag_Read_Stub( 
    IPropertyBag  * This,
     LPCOLESTR pszPropName,
     VARIANT  *pVar,
     IErrorLog  *pErrorLog,
     DWORD varType,
     IUnknown  *pUnkObj);






}
#line 8010 "C:\\MSDEV\\INCLUDE\\ocidl.h"

#line 8012 "C:\\MSDEV\\INCLUDE\\ocidl.h"
#line 26 "C:\\MSDEV\\INCLUDE\\olectl.h"
#line 27 "C:\\MSDEV\\INCLUDE\\olectl.h"







#line 35 "C:\\MSDEV\\INCLUDE\\olectl.h"




extern "C" const GUID  IID_IPropertyFrame;






extern "C" const GUID  CLSID_CFontPropPage;

extern "C" const GUID  CLSID_CColorPropPage;

extern "C" const GUID  CLSID_CPicturePropPage;






extern "C" const GUID  CLSID_PersistPropset;

extern "C" const GUID  CLSID_ConvertVBX;





extern "C" const GUID  CLSID_StdFont;

extern "C" const GUID  CLSID_StdPicture;






extern "C" const GUID  GUID_HIMETRIC;

extern "C" const GUID  GUID_COLOR;

extern "C" const GUID  GUID_XPOSPIXEL;

extern "C" const GUID  GUID_YPOSPIXEL;

extern "C" const GUID  GUID_XSIZEPIXEL;

extern "C" const GUID  GUID_YSIZEPIXEL;

extern "C" const GUID  GUID_XPOS;

extern "C" const GUID  GUID_YPOS;

extern "C" const GUID  GUID_XSIZE;

extern "C" const GUID  GUID_YSIZE;




#line 98 "C:\\MSDEV\\INCLUDE\\olectl.h"


extern "C" const GUID  GUID_OPTIONVALUEEXCLUSIVE;

extern "C" const GUID  GUID_CHECKVALUEEXCLUSIVE;

extern "C" const GUID  GUID_FONTNAME;

extern "C" const GUID  GUID_FONTSIZE;

extern "C" const GUID  GUID_FONTBOLD;

extern "C" const GUID  GUID_FONTITALIC;

extern "C" const GUID  GUID_FONTUNDERSCORE;

extern "C" const GUID  GUID_FONTSTRIKETHROUGH;

extern "C" const GUID  GUID_HANDLE;

#line 119 "C:\\MSDEV\\INCLUDE\\olectl.h"





typedef struct tagOCPFIPARAMS
{
    ULONG cbStructSize;
    HWND hWndOwner;
    int x;
    int y;
    LPCOLESTR lpszCaption;
    ULONG cObjects;
    LPUNKNOWN * lplpUnk;
    ULONG cPages;
    CLSID * lpPages;
    LCID lcid;
    DISPID dispidInitialProperty;

} OCPFIPARAMS, * LPOCPFIPARAMS;







typedef struct tagFONTDESC
{
    UINT cbSizeofstruct;
    LPOLESTR lpstrName;
    CY cySize;
    SHORT sWeight;
    SHORT sCharset;
    BOOL fItalic;
    BOOL fUnderline;
    BOOL fStrikethrough;

} FONTDESC, * LPFONTDESC;












#line 171 "C:\\MSDEV\\INCLUDE\\olectl.h"

typedef struct tagPICTDESC
{
    UINT cbSizeofstruct;
    UINT picType;
    union
    {
        struct
        {
            HBITMAP   hbitmap;        
            HPALETTE  hpal;           
        } bmp;

        struct
        {
            HMETAFILE hmeta;          
            int       xExt;
            int       yExt;           
        } wmf;

        struct
        {
            HICON hicon;              
        } icon;


        struct
        {
            HENHMETAFILE hemf;        
        } emf;
#line 202 "C:\\MSDEV\\INCLUDE\\olectl.h"
    };

} PICTDESC, * LPPICTDESC;





typedef long OLE_XPOS_PIXELS;
typedef long OLE_YPOS_PIXELS;
typedef long OLE_XSIZE_PIXELS;
typedef long OLE_YSIZE_PIXELS;
typedef float OLE_XPOS_CONTAINER;
typedef float OLE_YPOS_CONTAINER;
typedef float OLE_XSIZE_CONTAINER;
typedef float OLE_YSIZE_CONTAINER;
typedef enum { triUnchecked = 0, triChecked = 1, triGray = 2 } OLE_TRISTATE;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef VARIANT_BOOL OLE_CANCELBOOL;
typedef VARIANT_BOOL OLE_ENABLEDEFAULTBOOL;
































































































































#line 351 "C:\\MSDEV\\INCLUDE\\olectl.h"
































#line 384 "C:\\MSDEV\\INCLUDE\\olectl.h"


















#line 403 "C:\\MSDEV\\INCLUDE\\olectl.h"













#line 417 "C:\\MSDEV\\INCLUDE\\olectl.h"





extern "C" HRESULT __stdcall DllRegisterServer(void);
extern "C" HRESULT __stdcall DllUnregisterServer(void);





extern "C" __declspec(dllimport) HRESULT __stdcall OleCreatePropertyFrame(HWND hwndOwner, UINT x, UINT y,
    LPCOLESTR lpszCaption, ULONG cObjects, LPUNKNOWN * ppUnk, ULONG cPages,
    LPCLSID pPageClsID, LCID lcid, DWORD dwReserved, LPVOID pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreatePropertyFrameIndirect(LPOCPFIPARAMS lpParams);





extern "C" __declspec(dllimport) HRESULT __stdcall OleTranslateColor(OLE_COLOR clr, HPALETTE hpal,
    COLORREF* lpcolorref);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFontIndirect(LPFONTDESC lpFontDesc, const IID & riid,
    LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreatePictureIndirect(LPPICTDESC lpPictDesc, const IID & riid,
    BOOL fOwn, LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPicture(LPSTREAM lpstream, LONG lSize, BOOL fRunmode,
    const IID & riid, LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPicturePath(  LPOLESTR  szURLorPath,
				  LPUNKNOWN punkCaller,
				  DWORD     dwReserved,
				  OLE_COLOR clrReserved,
				  const IID &    riid,
				  LPVOID *  ppvRet );

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPictureFile(VARIANT varFileName,
    LPDISPATCH* lplpdispPicture);

extern "C" __declspec(dllimport) HRESULT __stdcall OleSavePictureFile(LPDISPATCH lpdispPicture,
    BSTR bstrFileName);

extern "C" __declspec(dllimport) HCURSOR __stdcall OleIconToCursor(HINSTANCE hinstExe, HICON hIcon);



#pragma pack()
#line 470 "C:\\MSDEV\\INCLUDE\\olectl.h"

#line 472 "C:\\MSDEV\\INCLUDE\\olectl.h"


































































































#line 571 "C:\\MSDEV\\INCLUDE\\olectl.h"

#line 573 "C:\\MSDEV\\INCLUDE\\olectl.h"
#line 31 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
#line 32 "C:\\MSDEV\\MFC\\include\\afxdisp.h"





#pragma component(minrebuild, off)
#line 39 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

#pragma component(mintypeinfo, on)
#line 42 "C:\\MSDEV\\MFC\\include\\afxdisp.h"








	
		
			#pragma comment(lib, "mfco42d.lib")
		

#line 56 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
	#line 57 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
#line 58 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

#pragma comment(lib, "oledlg.lib")
#pragma comment(lib, "ole32.lib")
#pragma comment(lib, "olepro32.lib")
#pragma comment(lib, "oleaut32.lib")
#pragma comment(lib, "uuid.lib")
#pragma comment(lib, "urlmon.lib")











































#line 109 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
#line 110 "C:\\MSDEV\\MFC\\include\\afxdisp.h"






extern "C" HRESULT __stdcall _AfxOleCreatePropertyFrame(HWND hwndOwner, UINT x, UINT y,
	LPCOLESTR lpszCaption, ULONG cObjects, LPUNKNOWN* ppUnk, ULONG cPages,
	LPCLSID pPageClsID, LCID lcid, DWORD dwReserved, LPVOID pvReserved);
extern "C" HRESULT __stdcall _AfxOleCreatePropertyFrameIndirect(LPOCPFIPARAMS lpParams);
extern "C" HRESULT __stdcall _AfxOleTranslateColor(OLE_COLOR clr, HPALETTE hpal,
	COLORREF* lpcolorref);
extern "C" HRESULT __stdcall _AfxOleCreateFontIndirect(LPFONTDESC lpFontDesc, const IID & riid,
	LPVOID* lplpvObj);
extern "C" HRESULT __stdcall _AfxOleCreatePictureIndirect(LPPICTDESC lpPictDesc, const IID & riid,
	BOOL fOwn, LPVOID* lplpvObj);
extern "C" HRESULT __stdcall _AfxOleLoadPicture(LPSTREAM lpstream, LONG lSize, BOOL fRunmode,
	const IID & riid, LPVOID* lplpvObj);






#line 135 "C:\\MSDEV\\MFC\\include\\afxdisp.h"




#pragma pack(push, 4)
#line 141 "C:\\MSDEV\\MFC\\include\\afxdisp.h"







	class COleException;            
	class COleDispatchException;    


	class COleObjectFactory;        
		class COleTemplateServer;   

class COleDispatchDriver;           

class COleVariant;          
class COleCurrency;         
class COleDateTime;         
class COleDateTimeSpan;     
class COleSafeArray;        




































#line 199 "C:\\MSDEV\\MFC\\include\\afxdisp.h"























#line 223 "C:\\MSDEV\\MFC\\include\\afxdisp.h"














#line 238 "C:\\MSDEV\\MFC\\include\\afxdisp.h"






























#line 269 "C:\\MSDEV\\MFC\\include\\afxdisp.h"














class COleException : public CException
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCOleException; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	SCODE m_sc;
	static SCODE __stdcall Process(const CException* pAnyException);


public:
	COleException();
	virtual ~COleException();

	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
};

void __stdcall AfxThrowOleException(SCODE sc);




class COleDispatchException : public CException
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCOleDispatchException; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	WORD m_wCode;   
	CString m_strDescription;   
	DWORD m_dwHelpContext;      

	
	CString m_strHelpFile;      
	CString m_strSource;        


public:
	COleDispatchException(LPCTSTR lpszDescription, UINT nHelpID, WORD wCode);
	virtual ~COleDispatchException();
	static void __stdcall Process(
		EXCEPINFO* pInfo, const CException* pAnyException);

	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);

	SCODE m_scError;            
};

void __stdcall AfxThrowOleDispatchException(WORD wCode, LPCTSTR lpszDescription,
	UINT nHelpID = 0);
void __stdcall AfxThrowOleDispatchException(WORD wCode, UINT nDescriptionID,
	UINT nHelpID = (UINT)-1);






























#line 367 "C:\\MSDEV\\MFC\\include\\afxdisp.h"





















#line 389 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
	
	
	
#line 393 "C:\\MSDEV\\MFC\\include\\afxdisp.h"























	


#line 420 "C:\\MSDEV\\MFC\\include\\afxdisp.h"














































































































class COleDispatchDriver
{

public:
	COleDispatchDriver();
	COleDispatchDriver(LPDISPATCH lpDispatch, BOOL bAutoRelease = 1);
	COleDispatchDriver(const COleDispatchDriver& dispatchSrc);


	LPDISPATCH m_lpDispatch;
	BOOL m_bAutoRelease;


	BOOL CreateDispatch(const CLSID & clsid, COleException* pError = 0);
	BOOL CreateDispatch(LPCTSTR lpszProgID, COleException* pError = 0);

	void AttachDispatch(LPDISPATCH lpDispatch, BOOL bAutoRelease = 1);
	LPDISPATCH DetachDispatch();
		
	void ReleaseDispatch();

	
	void __cdecl InvokeHelper(DISPID dwDispID, WORD wFlags,
		VARTYPE vtRet, void* pvRet, const BYTE* pbParamInfo, ...);
	void __cdecl SetProperty(DISPID dwDispID, VARTYPE vtProp, ...);
	void GetProperty(DISPID dwDispID, VARTYPE vtProp, void* pvProp) const;

	
	operator LPDISPATCH();
	const COleDispatchDriver& operator=(const COleDispatchDriver& dispatchSrc);


public:
	~COleDispatchDriver();
	void InvokeHelperV(DISPID dwDispID, WORD wFlags, VARTYPE vtRet,
		void* pvRet, const BYTE* pbParamInfo, va_list argList);
};





class COleObjectFactory : public CCmdTarget
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCOleObjectFactory; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	COleObjectFactory(const CLSID & clsid, CRuntimeClass* pRuntimeClass,
		BOOL bMultiInstance, LPCTSTR lpszProgID);


	virtual BOOL IsRegistered() const;
	const CLSID & GetClassID() const;


	virtual BOOL Register();
	void Revoke();
	void UpdateRegistry(LPCTSTR lpszProgID = 0);
		
	BOOL IsLicenseValid();

	static BOOL __stdcall RegisterAll();
	static void __stdcall RevokeAll();
	static BOOL __stdcall UpdateRegistryAll(BOOL bRegister = 1);


protected:
	virtual CCmdTarget* OnCreateObject();
	virtual BOOL UpdateRegistry(BOOL bRegister);
	virtual BOOL VerifyUserLicense();
	virtual BOOL GetLicenseKey(DWORD dwReserved, BSTR* pbstrKey);
	virtual BOOL VerifyLicenseKey(BSTR bstrKey);


public:
	virtual ~COleObjectFactory();

	void AssertValid() const;
	void Dump(CDumpContext& dc) const;
#line 611 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

public:
	COleObjectFactory* m_pNextFactory;  

protected:
	DWORD m_dwRegister;             
	CLSID m_clsid;                  
	CRuntimeClass* m_pRuntimeClass; 
	BOOL m_bMultiInstance;          
	LPCTSTR m_lpszProgID;           
	BYTE m_bLicenseChecked;
	BYTE m_bLicenseValid;
	BYTE m_bRegistered;             
	BYTE m_bReserved;               


public:
	class XClassFactory : public IClassFactory2 { public: virtual ULONG __stdcall AddRef(); virtual ULONG __stdcall Release(); virtual HRESULT __stdcall QueryInterface(const IID & iid, LPVOID* ppvObj);
		
		virtual HRESULT __stdcall CreateInstance(LPUNKNOWN, const IID &, LPVOID*);
		virtual HRESULT __stdcall LockServer(BOOL);
		virtual HRESULT __stdcall GetLicInfo(LPLICINFO);
		virtual HRESULT __stdcall RequestLicKey(DWORD, BSTR*);
		virtual HRESULT __stdcall CreateInstanceLic(LPUNKNOWN, LPUNKNOWN, const IID &, BSTR,
			LPVOID*);
	} m_xClassFactory; friend class XClassFactory;

	private: static const AFX_INTERFACEMAP_ENTRY _interfaceEntries[]; protected: static __declspec(dllimport) const AFX_INTERFACEMAP interfaceMap; static const AFX_INTERFACEMAP* __stdcall _GetBaseInterfaceMap(); virtual const AFX_INTERFACEMAP* GetInterfaceMap() const;

	friend SCODE __stdcall AfxDllGetClassObject(const CLSID &, const IID &, LPVOID*);
	friend SCODE __stdcall DllGetClassObject(const CLSID &, const IID &, LPVOID*);
};









enum OLE_APPTYPE
{
	OAT_INPLACE_SERVER = 0,     
	OAT_SERVER = 1,             
	OAT_CONTAINER = 2,          
	OAT_DISPATCH_OBJECT = 3,    
	OAT_DOC_OBJECT_SERVER = 4,  
	OAT_DOC_OBJECT_CONTAINER =5,
};

class COleTemplateServer : public COleObjectFactory
{

public:
	COleTemplateServer();


	void ConnectTemplate(const CLSID & clsid, CDocTemplate* pDocTemplate,
		BOOL bMultiInstance);
		
	void UpdateRegistry(OLE_APPTYPE nAppType = OAT_INPLACE_SERVER,
		LPCTSTR* rglpszRegister = 0, LPCTSTR* rglpszOverwrite = 0);
		
	BOOL Register();


protected:
	virtual CCmdTarget* OnCreateObject();
	CDocTemplate* m_pDocTemplate;

private:
	void UpdateRegistry(LPCTSTR lpszProgID);
		
};





BOOL __stdcall AfxOleRegisterServerClass(
	const CLSID & clsid, LPCTSTR lpszClassName,
	LPCTSTR lpszShortTypeName, LPCTSTR lpszLongTypeName,
	OLE_APPTYPE nAppType = OAT_SERVER,
	LPCTSTR* rglpszRegister = 0, LPCTSTR* rglpszOverwrite = 0,
	int nIconIndex = 0, LPCTSTR lpszLocalFilterName = 0);



BOOL __stdcall AfxOleRegisterHelper(LPCTSTR const* rglpszRegister,
	LPCTSTR const* rglpszSymbols, int nSymbols, BOOL bReplace,
	HKEY hKeyRoot = ((HKEY)0x80000000)); 






































#line 742 "C:\\MSDEV\\MFC\\include\\afxdisp.h"











class CConnectionPoint : public CCmdTarget
{

public:
	CConnectionPoint();


	POSITION GetStartPosition() const;
	LPUNKNOWN GetNextConnection(POSITION& pos) const;
	const CPtrArray* GetConnections();  


	virtual LPCONNECTIONPOINTCONTAINER GetContainer();
	virtual const IID & GetIID() = 0;
	virtual void OnAdvise(BOOL bAdvise);
	virtual int GetMaxConnections();
	virtual LPUNKNOWN QuerySinkInterface(LPUNKNOWN pUnkSink);


	~CConnectionPoint();
	void CreateConnectionArray();
	int GetConnectionCount();

protected:
	size_t m_nOffset;
	LPUNKNOWN m_pUnkFirstConnection;
	CPtrArray* m_pConnections;


public:
	class XConnPt : public IConnectionPoint { public: virtual ULONG __stdcall AddRef(); virtual ULONG __stdcall Release(); virtual HRESULT __stdcall QueryInterface(const IID & iid, LPVOID* ppvObj);
		
		virtual HRESULT __stdcall GetConnectionInterface(IID* pIID);
		virtual HRESULT __stdcall GetConnectionPointContainer(
			IConnectionPointContainer** ppCPC);
		virtual HRESULT __stdcall Advise(LPUNKNOWN pUnkSink, DWORD* pdwCookie);
		virtual HRESULT __stdcall Unadvise(DWORD dwCookie);
		virtual HRESULT __stdcall EnumConnections(LPENUMCONNECTIONS* ppEnum);
	} m_xConnPt; friend class XConnPt;
};






























#line 824 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

















































#line 874 "C:\\MSDEV\\MFC\\include\\afxdisp.h"




CTypeLibCache* __stdcall AfxGetTypeLibCache(const GUID* pTypeLibID);


















BOOL __stdcall AfxOleInit();
void __stdcall AfxOleTerm(BOOL bJustRevoke = 0);
void __stdcall AfxOleTermOrFreeLib(BOOL bTerm = 1, BOOL bJustRevoke = 0);







LPWSTR __stdcall AfxAllocTaskWideString(LPCWSTR lpszString);
LPWSTR __stdcall AfxAllocTaskWideString(LPCSTR lpszString);
LPSTR __stdcall AfxAllocTaskAnsiString(LPCWSTR lpszString);
LPSTR __stdcall AfxAllocTaskAnsiString(LPCSTR lpszString);




	
#line 917 "C:\\MSDEV\\MFC\\include\\afxdisp.h"




	
#line 923 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

HRESULT __stdcall AfxGetClassIDFromString(LPCTSTR lpsz, LPCLSID lpClsID);




SCODE __stdcall AfxDllGetClassObject(const CLSID & rclsid, const IID & riid, LPVOID* ppv);
SCODE __stdcall AfxDllCanUnloadNow(void);







class CLongBinary;  




typedef const VARIANT* LPCVARIANT;

class COleVariant : public tagVARIANT
{

public:
	COleVariant();

	COleVariant(const VARIANT& varSrc);
	COleVariant(LPCVARIANT pSrc);
	COleVariant(const COleVariant& varSrc);

	COleVariant(LPCTSTR lpszSrc);
	COleVariant(LPCTSTR lpszSrc, VARTYPE vtSrc); 
	COleVariant(CString& strSrc);

	COleVariant(BYTE nSrc);
	COleVariant(short nSrc, VARTYPE vtSrc = VT_I2);
	COleVariant(long lSrc, VARTYPE vtSrc = VT_I4);
	COleVariant(const COleCurrency& curSrc);

	COleVariant(float fltSrc);
	COleVariant(double dblSrc);
	COleVariant(const COleDateTime& timeSrc);

	COleVariant(const CByteArray& arrSrc);
	COleVariant(const CLongBinary& lbSrc);


public:
	void Clear();
	void ChangeType(VARTYPE vartype, LPVARIANT pSrc = 0);
	void Attach(VARIANT& varSrc);
	VARIANT Detach();

	BOOL operator==(const VARIANT& varSrc) const;
	BOOL operator==(LPCVARIANT pSrc) const;

	const COleVariant& operator=(const VARIANT& varSrc);
	const COleVariant& operator=(LPCVARIANT pSrc);
	const COleVariant& operator=(const COleVariant& varSrc);

	const COleVariant& operator=(const LPCTSTR lpszSrc);
	const COleVariant& operator=(const CString& strSrc);

	const COleVariant& operator=(BYTE nSrc);
	const COleVariant& operator=(short nSrc);
	const COleVariant& operator=(long lSrc);
	const COleVariant& operator=(const COleCurrency& curSrc);

	const COleVariant& operator=(float fltSrc);
	const COleVariant& operator=(double dblSrc);
	const COleVariant& operator=(const COleDateTime& dateSrc);

	const COleVariant& operator=(const CByteArray& arrSrc);
	const COleVariant& operator=(const CLongBinary& lbSrc);

	void SetString(LPCTSTR lpszSrc, VARTYPE vtSrc); 

	operator LPVARIANT();
	operator LPCVARIANT() const;


public:
	~COleVariant();
};



CDumpContext& __stdcall operator<<(CDumpContext& dc, COleVariant varSrc);
#line 1014 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
CArchive& __stdcall operator<<(CArchive& ar, COleVariant varSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleVariant& varSrc);


void __stdcall AfxVariantInit(LPVARIANT pVar);




class COleCurrency
{

public:
	COleCurrency();

	COleCurrency(CURRENCY cySrc);
	COleCurrency(const COleCurrency& curSrc);
	COleCurrency(const VARIANT& varSrc);
	COleCurrency(long nUnits, long nFractionalUnits);


public:
	enum CurrencyStatus
	{
		valid = 0,
		invalid = 1,    
		null = 2,       
	};

	CURRENCY m_cur;
	CurrencyStatus m_status;

	void SetStatus(CurrencyStatus status);
	CurrencyStatus GetStatus() const;


public:
	const COleCurrency& operator=(CURRENCY cySrc);
	const COleCurrency& operator=(const COleCurrency& curSrc);
	const COleCurrency& operator=(const VARIANT& varSrc);

	BOOL operator==(const COleCurrency& cur) const;
	BOOL operator!=(const COleCurrency& cur) const;
	BOOL operator<(const COleCurrency& cur) const;
	BOOL operator>(const COleCurrency& cur) const;
	BOOL operator<=(const COleCurrency& cur) const;
	BOOL operator>=(const COleCurrency& cur) const;

	
	COleCurrency operator+(const COleCurrency& cur) const;
	COleCurrency operator-(const COleCurrency& cur) const;
	const COleCurrency& operator+=(const COleCurrency& cur);
	const COleCurrency& operator-=(const COleCurrency& cur);
	COleCurrency operator-() const;

	COleCurrency operator*(long nOperand) const;
	COleCurrency operator/(long nOperand) const;
	const COleCurrency& operator*=(long nOperand);
	const COleCurrency& operator/=(long nOperand);

	operator CURRENCY() const;

	
	void SetCurrency(long nUnits, long nFractionalUnits);
	BOOL ParseCurrency(LPCTSTR lpszCurrency, DWORD dwFlags = 0,
		LCID = (((((WORD )(0x01)) << 10) | (WORD )(0x00))));

	
	CString Format(DWORD dwFlags = 0, LCID lcid = (((((WORD )(0x01)) << 10) | (WORD )(0x00)))) const;
};



CDumpContext& __stdcall operator<<(CDumpContext& dc, COleCurrency curSrc);
#line 1089 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
CArchive& __stdcall operator<<(CArchive& ar, COleCurrency curSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleCurrency& curSrc);









class COleDateTime
{

public:
	static COleDateTime __stdcall GetTickCount();

	COleDateTime();

	COleDateTime(const COleDateTime& dateSrc);
	COleDateTime(const VARIANT& varSrc);
	COleDateTime(DATE dtSrc);

	COleDateTime(time_t timeSrc);
	COleDateTime(const SYSTEMTIME& systimeSrc);
	COleDateTime(const FILETIME& filetimeSrc);

	COleDateTime(int nYear, int nMonth, int nDay,
		int nHour, int nMin, int nSec);
	COleDateTime(WORD wDosDate, WORD wDosTime);


public:
	enum DateTimeStatus
	{
		valid = 0,
		invalid = 1,    
		null = 2,       
	};

	DATE m_dt;
	DateTimeStatus m_status;

	void SetStatus(DateTimeStatus status);
	DateTimeStatus GetStatus() const;

	int GetYear() const;
	int GetMonth() const;       
	int GetDay() const;         
	int GetHour() const;        
	int GetMinute() const;      
	int GetSecond() const;      
	int GetDayOfWeek() const;   
	int GetDayOfYear() const;   


public:
	const COleDateTime& operator=(const COleDateTime& dateSrc);
	const COleDateTime& operator=(const VARIANT& varSrc);
	const COleDateTime& operator=(DATE dtSrc);

	const COleDateTime& operator=(const time_t& timeSrc);
	const COleDateTime& operator=(const SYSTEMTIME& systimeSrc);
	const COleDateTime& operator=(const FILETIME& filetimeSrc);

	BOOL operator==(const COleDateTime& date) const;
	BOOL operator!=(const COleDateTime& date) const;
	BOOL operator<(const COleDateTime& date) const;
	BOOL operator>(const COleDateTime& date) const;
	BOOL operator<=(const COleDateTime& date) const;
	BOOL operator>=(const COleDateTime& date) const;

	
	COleDateTime operator+(const COleDateTimeSpan& dateSpan) const;
	COleDateTime operator-(const COleDateTimeSpan& dateSpan) const;
	const COleDateTime& operator+=(const COleDateTimeSpan dateSpan);
	const COleDateTime& operator-=(const COleDateTimeSpan dateSpan);

	
	COleDateTimeSpan operator-(const COleDateTime& date) const;

	operator DATE() const;

	BOOL SetDateTime(int nYear, int nMonth, int nDay,
		int nHour, int nMin, int nSec);
	BOOL SetDate(int nYear, int nMonth, int nDay);
	BOOL SetTime(int nHour, int nMin, int nSec);
	BOOL ParseDateTime(LPCTSTR lpszDate, DWORD dwFlags = 0,
		LCID lcid = (((((WORD )(0x01)) << 10) | (WORD )(0x00))));

	
	CString Format(DWORD dwFlags = 0, LCID lcid = (((((WORD )(0x01)) << 10) | (WORD )(0x00)))) const;
	CString Format(LPCTSTR lpszFormat) const;
	CString Format(UINT nFormatID) const;


protected:
	void CheckRange();
	friend COleDateTimeSpan;
};



CDumpContext& __stdcall operator<<(CDumpContext& dc, COleDateTime dateSrc);
#line 1194 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
CArchive& __stdcall operator<<(CArchive& ar, COleDateTime dateSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleDateTime& dateSrc);



class COleDateTimeSpan
{

public:
	COleDateTimeSpan();

	COleDateTimeSpan(double dblSpanSrc);
	COleDateTimeSpan(const COleDateTimeSpan& dateSpanSrc);
	COleDateTimeSpan(long lDays, int nHours, int nMins, int nSecs);


public:
	enum DateTimeSpanStatus
	{
		valid = 0,
		invalid = 1,    
		null = 2,       
	};

	double m_span;
	DateTimeSpanStatus m_status;

	void SetStatus(DateTimeSpanStatus status);
	DateTimeSpanStatus GetStatus() const;

	double GetTotalDays() const;    
	double GetTotalHours() const;   
	double GetTotalMinutes() const; 
	double GetTotalSeconds() const; 

	long GetDays() const;       
	long GetHours() const;      
	long GetMinutes() const;    
	long GetSeconds() const;    


public:
	const COleDateTimeSpan& operator=(double dblSpanSrc);
	const COleDateTimeSpan& operator=(const COleDateTimeSpan& dateSpanSrc);

	BOOL operator==(const COleDateTimeSpan& dateSpan) const;
	BOOL operator!=(const COleDateTimeSpan& dateSpan) const;
	BOOL operator<(const COleDateTimeSpan& dateSpan) const;
	BOOL operator>(const COleDateTimeSpan& dateSpan) const;
	BOOL operator<=(const COleDateTimeSpan& dateSpan) const;
	BOOL operator>=(const COleDateTimeSpan& dateSpan) const;

	
	COleDateTimeSpan operator+(const COleDateTimeSpan& dateSpan) const;
	COleDateTimeSpan operator-(const COleDateTimeSpan& dateSpan) const;
	const COleDateTimeSpan& operator+=(const COleDateTimeSpan dateSpan);
	const COleDateTimeSpan& operator-=(const COleDateTimeSpan dateSpan);
	COleDateTimeSpan operator-() const;

	operator double() const;

	void SetDateTimeSpan(long lDays, int nHours, int nMins, int nSecs);

	
	CString Format(LPCTSTR pFormat) const;
	CString Format(UINT nID) const;


public:
	void CheckRange();
	friend COleDateTime;
};



CDumpContext& __stdcall operator<<(CDumpContext& dc,COleDateTimeSpan dateSpanSrc);
#line 1271 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
CArchive& __stdcall operator<<(CArchive& ar, COleDateTimeSpan dateSpanSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleDateTimeSpan& dateSpanSrc);



void __stdcall AfxSafeArrayInit(COleSafeArray* psa);




typedef const SAFEARRAY* LPCSAFEARRAY;

class COleSafeArray : public tagVARIANT
{

public:
	COleSafeArray();
	COleSafeArray(const SAFEARRAY& saSrc, VARTYPE vtSrc);
	COleSafeArray(LPCSAFEARRAY pSrc, VARTYPE vtSrc);
	COleSafeArray(const COleSafeArray& saSrc);
	COleSafeArray(const VARIANT& varSrc);
	COleSafeArray(LPCVARIANT pSrc);
	COleSafeArray(const COleVariant& varSrc);


public:
	void Clear();
	void Attach(VARIANT& varSrc);
	VARIANT Detach();

	COleSafeArray& operator=(const COleSafeArray& saSrc);
	COleSafeArray& operator=(const VARIANT& varSrc);
	COleSafeArray& operator=(LPCVARIANT pSrc);
	COleSafeArray& operator=(const COleVariant& varSrc);

	BOOL operator==(const SAFEARRAY& saSrc) const;
	BOOL operator==(LPCSAFEARRAY pSrc) const;
	BOOL operator==(const COleSafeArray& saSrc) const;
	BOOL operator==(const VARIANT& varSrc) const;
	BOOL operator==(LPCVARIANT pSrc) const;
	BOOL operator==(const COleVariant& varSrc) const;

	operator LPVARIANT();
	operator LPCVARIANT() const;

	
	void CreateOneDim(VARTYPE vtSrc, DWORD dwElements,
		void* pvSrcData = 0, long nLBound = 0);
	DWORD GetOneDimSize();
	void ResizeOneDim(DWORD dwElements);

	
	void Create(VARTYPE vtSrc, DWORD dwDims, DWORD* rgElements);

	
	void Create(VARTYPE vtSrc, DWORD dwDims, SAFEARRAYBOUND* rgsabounds);
	void AccessData(void** ppvData);
	void UnaccessData();
	void AllocData();
	void AllocDescriptor(DWORD dwDims);
	void Copy(LPSAFEARRAY* ppsa);
	void GetLBound(DWORD dwDim, long* pLBound);
	void GetUBound(DWORD dwDim, long* pUBound);
	void GetElement(long* rgIndices, void* pvData);
	void PtrOfIndex(long* rgIndices, void** ppvData);
	void PutElement(long* rgIndices, void* pvData);
	void Redim(SAFEARRAYBOUND* psaboundNew);
	void Lock();
	void Unlock();
	DWORD GetDim();
	DWORD GetElemSize();
	void Destroy();
	void DestroyData();
	void DestroyDescriptor();


public:
	~COleSafeArray();

	
	DWORD m_dwElementSize;
	DWORD m_dwDims;
};



CDumpContext& __stdcall operator<<(CDumpContext& dc, COleSafeArray saSrc);
#line 1359 "C:\\MSDEV\\MFC\\include\\afxdisp.h"
CArchive& __stdcall operator<<(CArchive& ar, COleSafeArray saSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleSafeArray& saSrc);






void __stdcall DDX_OCText(CDataExchange* pDX, int nIDC, DISPID dispid,
	CString& value);
void __stdcall DDX_OCTextRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	CString& value);
void __stdcall DDX_OCBool(CDataExchange* pDX, int nIDC, DISPID dispid,
	BOOL& value);
void __stdcall DDX_OCBoolRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	BOOL& value);
void __stdcall DDX_OCInt(CDataExchange* pDX, int nIDC, DISPID dispid,
	int &value);
void __stdcall DDX_OCIntRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	int &value);
void __stdcall DDX_OCInt(CDataExchange* pDX, int nIDC, DISPID dispid,
	long &value);
void __stdcall DDX_OCIntRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	long &value);
void __stdcall DDX_OCShort(CDataExchange* pDX, int nIDC, DISPID dispid,
	short& value);
void __stdcall DDX_OCShortRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	short& value);
void __stdcall DDX_OCColor(CDataExchange* pDX, int nIDC, DISPID dispid,
	OLE_COLOR& value);
void __stdcall DDX_OCColorRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	OLE_COLOR& value);
void __stdcall DDX_OCFloat(CDataExchange* pDX, int nIDC, DISPID dispid,
	float& value);
void __stdcall DDX_OCFloatRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	float& value);
void __stdcall DDX_OCFloat(CDataExchange* pDX, int nIDC, DISPID dispid,
	double& value);
void __stdcall DDX_OCFloatRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	double& value);

#line 1401 "C:\\MSDEV\\MFC\\include\\afxdisp.h"





void __cdecl AfxEnableControlContainer(COccManager* pOccManager=0);


#line 1410 "C:\\MSDEV\\MFC\\include\\afxdisp.h"





#pragma pack(pop)
#line 1417 "C:\\MSDEV\\MFC\\include\\afxdisp.h"











#pragma component(minrebuild, on)
#line 1430 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

#pragma component(mintypeinfo, off)
#line 1433 "C:\\MSDEV\\MFC\\include\\afxdisp.h"

#line 1435 "C:\\MSDEV\\MFC\\include\\afxdisp.h"


#line 9 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxcmn.h"






















#pragma component(minrebuild, off)
#line 25 "C:\\MSDEV\\MFC\\include\\afxcmn.h"

#pragma component(mintypeinfo, on)
#line 28 "C:\\MSDEV\\MFC\\include\\afxcmn.h"









































#line 70 "C:\\MSDEV\\MFC\\include\\afxcmn.h"
#line 71 "C:\\MSDEV\\MFC\\include\\afxcmn.h"




#pragma pack(push, 4)
#line 77 "C:\\MSDEV\\MFC\\include\\afxcmn.h"


	


	





		struct IRichEditOle;
		struct IRichEditOleCallback;
	#line 91 "C:\\MSDEV\\MFC\\include\\afxcmn.h"
#line 92 "C:\\MSDEV\\MFC\\include\\afxcmn.h"







	class CToolInfo;


	class CImageList;
	
		
			
				class CDragListBox;
			class CListCtrl;
			class CTreeCtrl;
			class CSpinButtonCtrl;
			class CHeaderCtrl;
			class CSliderCtrl;
			class CProgressCtrl;
			class CHotKeyCtrl;
			class CToolTipCtrl;
			class CTabCtrl;
			class CAnimateCtrl;
			class CToolBarCtrl;
			class CStatusBarCtrl;
			class CRichEditCtrl;










class CToolInfo : public tagTOOLINFOA
#line 132 "C:\\MSDEV\\MFC\\include\\afxcmn.h"
{
public:
	TCHAR szText[256];
};




class CDragListBox : public CListBox
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCDragListBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CDragListBox();


	int ItemFromPt(CPoint pt, BOOL bAutoScroll = 1) const;


	virtual void DrawInsert(int nItem);


	virtual BOOL BeginDrag(CPoint pt);
	virtual void CancelDrag(CPoint pt);
	virtual UINT Dragging(CPoint pt);
	virtual void Dropped(int nSrcIndex, CPoint pt);


public:
	int m_nLast;
	void DrawSingle(int nIndex);
	virtual void PreSubclassWindow();
	virtual ~CDragListBox();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};




class CStatusBarCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCStatusBarCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CStatusBarCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL SetText(LPCTSTR lpszText, int nPane, int nType);
	CString GetText(int nPane, int* pType = 0) const;
	int GetText(LPCTSTR lpszText, int nPane, int* pType = 0) const;
	int GetTextLength(int nPane, int* pType = 0) const;
	BOOL SetParts(int nParts, int* pWidths);
	int GetParts(int nParts, int* pParts) const;
	BOOL GetBorders(int* pBorders) const;
	BOOL GetBorders(int& nHorz, int& nVert, int& nSpacing) const;
	void SetMinHeight(int nMin);
	BOOL SetSimple(BOOL bSimple = 1);
	BOOL GetRect(int nPane, LPRECT lpRect) const;


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);


public:
	virtual ~CStatusBarCtrl();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};




class CListCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCListCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CListCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	COLORREF GetBkColor() const;
	BOOL SetBkColor(COLORREF cr);
	CImageList* GetImageList(int nImageList) const;
	CImageList* SetImageList(CImageList* pImageList, int nImageListType);
	int GetItemCount() const;
	BOOL GetItem(LV_ITEMA* pItem) const;
	BOOL SetItem(const LV_ITEMA* pItem);
	BOOL SetItem(int nItem, int nSubItem, UINT nMask, LPCTSTR lpszItem,
		int nImage, UINT nState, UINT nStateMask, LPARAM lParam);
	UINT GetCallbackMask() const;
	BOOL SetCallbackMask(UINT nMask);
	int GetNextItem(int nItem, int nFlags) const;
	BOOL GetItemRect(int nItem, LPRECT lpRect, UINT nCode) const;
	BOOL SetItemPosition(int nItem, POINT pt);
	BOOL GetItemPosition(int nItem, LPPOINT lpPoint) const;
	int GetStringWidth(LPCTSTR lpsz) const;
	CEdit* GetEditControl() const;
	BOOL GetColumn(int nCol, LV_COLUMNA* pColumn) const;
	BOOL SetColumn(int nCol, const LV_COLUMNA* pColumn);
	int GetColumnWidth(int nCol) const;
	BOOL SetColumnWidth(int nCol, int cx);
	BOOL GetViewRect(LPRECT lpRect) const;
	COLORREF GetTextColor() const;
	BOOL SetTextColor(COLORREF cr);
	COLORREF GetTextBkColor() const;
	BOOL SetTextBkColor(COLORREF cr);
	int GetTopIndex() const;
	int GetCountPerPage() const;
	BOOL GetOrigin(LPPOINT lpPoint) const;
	BOOL SetItemState(int nItem, LV_ITEMA* pItem);
	BOOL SetItemState(int nItem, UINT nState, UINT nMask);
	UINT GetItemState(int nItem, UINT nMask) const;
	CString GetItemText(int nItem, int nSubItem) const;
	int GetItemText(int nItem, int nSubItem, LPTSTR lpszText, int nLen) const;
	BOOL SetItemText(int nItem, int nSubItem, LPCTSTR lpszText);
	void SetItemCount(int nItems);
	BOOL SetItemData(int nItem, DWORD dwData);
	DWORD GetItemData(int nItem) const;
	UINT GetSelectedCount() const;


	int InsertItem(const LV_ITEMA* pItem);
	int InsertItem(int nItem, LPCTSTR lpszItem);
	int InsertItem(int nItem, LPCTSTR lpszItem, int nImage);
	BOOL DeleteItem(int nItem);
	BOOL DeleteAllItems();
	int FindItem(LV_FINDINFOA* pFindInfo, int nStart = -1) const;
	int HitTest(LV_HITTESTINFO* pHitTestInfo) const;
	int HitTest(CPoint pt, UINT* pFlags = 0) const;
	BOOL EnsureVisible(int nItem, BOOL bPartialOK);
	BOOL Scroll(CSize size);
	BOOL RedrawItems(int nFirst, int nLast);
	BOOL Arrange(UINT nCode);
	CEdit* EditLabel(int nItem);
	int InsertColumn(int nCol, const LV_COLUMNA* pColumn);
	int InsertColumn(int nCol, LPCTSTR lpszColumnHeading,
		int nFormat = 0x0000, int nWidth = -1, int nSubItem = -1);
	BOOL DeleteColumn(int nCol);
	CImageList* CreateDragImage(int nItem, LPPOINT lpPoint);
	BOOL Update(int nItem);
	BOOL SortItems(PFNLVCOMPARE pfnCompare, DWORD dwData);


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);


public:
	int InsertItem(UINT nMask, int nItem, LPCTSTR lpszItem, UINT nState,
		UINT nStateMask, int nImage, LPARAM lParam);
	virtual ~CListCtrl();
protected:
	void RemoveImageList(int nImageList);
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
protected:
	
	 void OnNcDestroy();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CTreeCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCTreeCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CTreeCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL GetItemRect(HTREEITEM hItem, LPRECT lpRect, BOOL bTextOnly) const;
	UINT GetCount() const;
	UINT GetIndent() const;
	void SetIndent(UINT nIndent);
	CImageList* GetImageList(UINT nImageList) const;
	CImageList* SetImageList(CImageList* pImageList, int nImageListType);
	HTREEITEM GetNextItem(HTREEITEM hItem, UINT nCode) const;
	HTREEITEM GetChildItem(HTREEITEM hItem) const;
	HTREEITEM GetNextSiblingItem(HTREEITEM hItem) const;
	HTREEITEM GetPrevSiblingItem(HTREEITEM hItem) const;
	HTREEITEM GetParentItem(HTREEITEM hItem) const;
	HTREEITEM GetFirstVisibleItem() const;
	HTREEITEM GetNextVisibleItem(HTREEITEM hItem) const;
	HTREEITEM GetPrevVisibleItem(HTREEITEM hItem) const;
	HTREEITEM GetSelectedItem() const;
	HTREEITEM GetDropHilightItem() const;
	HTREEITEM GetRootItem() const;
	BOOL GetItem(TV_ITEMA* pItem) const;
	CString GetItemText(HTREEITEM hItem) const;
	BOOL GetItemImage(HTREEITEM hItem, int& nImage, int& nSelectedImage) const;
	UINT GetItemState(HTREEITEM hItem, UINT nStateMask) const;
	DWORD GetItemData(HTREEITEM hItem) const;
	BOOL SetItem(TV_ITEMA* pItem);
	BOOL SetItem(HTREEITEM hItem, UINT nMask, LPCTSTR lpszItem, int nImage,
		int nSelectedImage, UINT nState, UINT nStateMask, LPARAM lParam);
	BOOL SetItemText(HTREEITEM hItem, LPCTSTR lpszItem);
	BOOL SetItemImage(HTREEITEM hItem, int nImage, int nSelectedImage);
	BOOL SetItemState(HTREEITEM hItem, UINT nState, UINT nStateMask);
	BOOL SetItemData(HTREEITEM hItem, DWORD dwData);
	BOOL ItemHasChildren(HTREEITEM hItem) const;
	CEdit* GetEditControl() const;
	UINT GetVisibleCount() const;


	HTREEITEM InsertItem(LPTV_INSERTSTRUCTA lpInsertStruct);
	HTREEITEM InsertItem(UINT nMask, LPCTSTR lpszItem, int nImage,
		int nSelectedImage, UINT nState, UINT nStateMask, LPARAM lParam,
		HTREEITEM hParent, HTREEITEM hInsertAfter);
	HTREEITEM InsertItem(LPCTSTR lpszItem, HTREEITEM hParent = ((HTREEITEM)0xFFFF0000),
		HTREEITEM hInsertAfter = ((HTREEITEM)0xFFFF0002));
	HTREEITEM InsertItem(LPCTSTR lpszItem, int nImage, int nSelectedImage,
		HTREEITEM hParent = ((HTREEITEM)0xFFFF0000), HTREEITEM hInsertAfter = ((HTREEITEM)0xFFFF0002));
	BOOL DeleteItem(HTREEITEM hItem);
	BOOL DeleteAllItems();
	BOOL Expand(HTREEITEM hItem, UINT nCode);
	BOOL Select(HTREEITEM hItem, UINT nCode);
	BOOL SelectItem(HTREEITEM hItem);
	BOOL SelectDropTarget(HTREEITEM hItem);
	BOOL SelectSetFirstVisible(HTREEITEM hItem);
	CEdit* EditLabel(HTREEITEM hItem);
	HTREEITEM HitTest(CPoint pt, UINT* pFlags = 0) const;
	HTREEITEM HitTest(TV_HITTESTINFO* pHitTestInfo) const;
	CImageList* CreateDragImage(HTREEITEM hItem);
	BOOL SortChildren(HTREEITEM hItem);
	BOOL EnsureVisible(HTREEITEM hItem);
	BOOL SortChildrenCB(LPTV_SORTCB pSort);


protected:
	void RemoveImageList(int nImageList);
public:
	virtual ~CTreeCtrl();
	
	 void OnDestroy();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CSpinButtonCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCSpinButtonCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSpinButtonCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL SetAccel(int nAccel, UDACCEL* pAccel);
	UINT GetAccel(int nAccel, UDACCEL* pAccel) const;
	int SetBase(int nBase);
	UINT GetBase() const;
	CWnd* SetBuddy(CWnd* pWndBuddy);
	CWnd* GetBuddy() const;
	int SetPos(int nPos);
	int GetPos() const;
	void SetRange(int nLower, int nUpper);
	DWORD GetRange() const;
	void GetRange(int &lower, int& upper) const;


public:
	virtual ~CSpinButtonCtrl();
};




class CSliderCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCSliderCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSliderCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	int GetLineSize() const;
	int SetLineSize(int nSize);
	int GetPageSize() const;
	int SetPageSize(int nSize);
	int GetRangeMax() const;
	int GetRangeMin() const;
	void GetRange(int& nMin, int& nMax) const;
	void SetRangeMin(int nMin, BOOL bRedraw = 0);
	void SetRangeMax(int nMax, BOOL bRedraw = 0);
	void SetRange(int nMin, int nMax, BOOL bRedraw = 0);
	void GetSelection(int& nMin, int& nMax) const;
	void SetSelection(int nMin, int nMax);
	void GetChannelRect(LPRECT lprc) const;
	void GetThumbRect(LPRECT lprc) const;
	int GetPos() const;
	void SetPos(int nPos);
	UINT GetNumTics() const;
	DWORD* GetTicArray() const;
	int GetTic(int nTic) const;
	int GetTicPos(int nTic) const;
	BOOL SetTic(int nTic);
	void SetTicFreq(int nFreq);


	void ClearSel(BOOL bRedraw = 0);
	void VerifyPos();
	void ClearTics(BOOL bRedraw = 0);


public:
	virtual ~CSliderCtrl();
};




class CProgressCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCProgressCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CProgressCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	void SetRange(int nLower, int nUpper);
	int SetPos(int nPos);
	int OffsetPos(int nPos);
	int SetStep(int nStep);


	int StepIt();


public:
	virtual ~CProgressCtrl();
};




class CHeaderCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCHeaderCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CHeaderCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	int GetItemCount() const;
	BOOL GetItem(int nPos, HD_ITEMA* pHeaderItem) const;
	BOOL SetItem(int nPos, HD_ITEMA* pHeaderItem);


	int InsertItem(int nPos, HD_ITEMA* phdi);
	BOOL DeleteItem(int nPos);
	BOOL Layout(HD_LAYOUT* pHeaderLayout);


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);


public:
	virtual ~CHeaderCtrl();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);

};




class CHotKeyCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCHotKeyCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CHotKeyCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	void SetHotKey(WORD wVirtualKeyCode, WORD wModifiers);
	DWORD GetHotKey() const;
	void GetHotKey(WORD &wVirtualKeyCode, WORD &wModifiers) const;


	void SetRules(WORD wInvalidComb, WORD wModifiers);


public:
	virtual ~CHotKeyCtrl();
};




class CToolTipCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCToolTipCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CToolTipCtrl();
	BOOL Create(CWnd* pParentWnd, DWORD dwStyle = 0);


	void GetText(CString& str, CWnd* pWnd, UINT nIDTool = 0) const;
	BOOL GetToolInfo(CToolInfo& ToolInfo, CWnd* pWnd, UINT nIDTool = 0) const;
	void SetToolInfo(LPTOOLINFOA lpToolInfo);
	void SetToolRect(CWnd* pWnd, UINT nIDTool, LPCRECT lpRect);
	int GetToolCount() const;


	void Activate(BOOL bActivate);

	BOOL AddTool(CWnd* pWnd, UINT nIDText, LPCRECT lpRectTool = 0,
		UINT nIDTool = 0);
	BOOL AddTool(CWnd* pWnd, LPCTSTR lpszText = ((LPSTR)-1L),
		LPCRECT lpRectTool = 0, UINT nIDTool = 0);

	void DelTool(CWnd* pWnd, UINT nIDTool = 0);

	BOOL HitTest(CWnd* pWnd, CPoint pt, LPTOOLINFOA lpToolInfo) const;
	void RelayEvent(LPMSG lpMsg);
	void SetDelayTime(UINT nDelay);
	void UpdateTipText(LPCTSTR lpszText, CWnd* pWnd, UINT nIDTool = 0);
	void UpdateTipText(UINT nIDText, CWnd* pWnd, UINT nIDTool = 0);


public:
	void FillInToolInfo(TOOLINFOA& ti, CWnd* pWnd, UINT nIDTool) const;
	virtual ~CToolTipCtrl();
	BOOL DestroyToolTipCtrl();

protected:
	
	 LRESULT OnDisableModal(WPARAM, LPARAM);
	 LRESULT OnWindowFromPoint(WPARAM, LPARAM);
	 LRESULT OnAddTool(WPARAM, LPARAM);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

	CMapStringToPtr m_mapString;

	friend class CWnd;
	friend class CToolBar;
};




class CTabCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCTabCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CTabCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	CImageList* GetImageList() const;
	CImageList* SetImageList(CImageList* pImageList);
	int GetItemCount() const;
	BOOL GetItem(int nItem, TC_ITEMA* pTabCtrlItem) const;
	BOOL SetItem(int nItem, TC_ITEMA* pTabCtrlItem);
	BOOL GetItemRect(int nItem, LPRECT lpRect) const;
	int GetCurSel() const;
	int SetCurSel(int nItem);
	CSize SetItemSize(CSize size);
	void SetPadding(CSize size);
	int GetRowCount() const;
	CToolTipCtrl* GetTooltips() const;
	void SetTooltips(CToolTipCtrl* pWndTip);
	int GetCurFocus() const;


	BOOL InsertItem(int nItem, TC_ITEMA* pTabCtrlItem);
	BOOL DeleteItem(int nItem);
	BOOL DeleteAllItems();
	void AdjustRect(BOOL bLarger, LPRECT lpRect);
	void RemoveImage(int nImage);
	int HitTest(TC_HITTESTINFO* pHitTestInfo) const;


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);


public:
	virtual ~CTabCtrl();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
	
	 void OnDestroy();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CAnimateCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCAnimateCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CAnimateCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL Open(LPCTSTR lpszFileName);
	BOOL Open(UINT nID);
	BOOL Play(UINT nFrom, UINT nTo, UINT nRep);
	BOOL Stop();
	BOOL Close();
	BOOL Seek(UINT nTo);


public:
	virtual ~CAnimateCtrl();
};




class CImageList : public CObject
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCImageList; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	CImageList();
	BOOL Create(int cx, int cy, UINT nFlags, int nInitial, int nGrow);
	BOOL Create(UINT nBitmapID, int cx, int nGrow, COLORREF crMask);
	BOOL Create(LPCTSTR lpszBitmapID, int cx, int nGrow, COLORREF crMask);
	BOOL Create(CImageList& imagelist1, int nImage1, CImageList& imagelist2,
		int nImage2, int dx, int dy);


	HIMAGELIST m_hImageList;            
	operator HIMAGELIST() const;
	HIMAGELIST GetSafeHandle() const;

	static CImageList* __stdcall FromHandle(HIMAGELIST hImageList);
	static CImageList* __stdcall FromHandlePermanent(HIMAGELIST hImageList);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HIMAGELIST hImageList);
	HIMAGELIST Detach();

	int GetImageCount() const;
	COLORREF SetBkColor(COLORREF cr);
	COLORREF GetBkColor() const;
	BOOL GetImageInfo(int nImage, IMAGEINFO* pImageInfo) const;


	BOOL DeleteImageList();

	int Add(CBitmap* pbmImage, CBitmap* pbmMask);
	int Add(CBitmap* pbmImage, COLORREF crMask);
	BOOL Remove(int nImage);
	BOOL Replace(int nImage, CBitmap* pbmImage, CBitmap* pbmMask);
	int  Add(HICON hIcon);
	int  Replace(int nImage, HICON hIcon);
	HICON ExtractIconA(int nImage);
	BOOL Draw(CDC* pDC, int nImage, POINT pt, UINT nStyle);
	BOOL SetOverlayImage(int nImage, int nOverlay);


	BOOL Read(CArchive* pArchive);
	BOOL Write(CArchive* pArchive);
#line 718 "C:\\MSDEV\\MFC\\include\\afxcmn.h"


	BOOL BeginDrag(int nImage, CPoint ptHotSpot);
	static void __stdcall EndDrag();
	static BOOL __stdcall DragMove(CPoint pt);
	BOOL SetDragCursorImage(int nDrag, CPoint ptHotSpot);
	static BOOL __stdcall DragShowNolock(BOOL bShow);
	static CImageList* __stdcall GetDragImage(LPPOINT lpPoint, LPPOINT lpPointHotSpot);
	static BOOL __stdcall DragEnter(CWnd* pWndLock, CPoint point);
	static BOOL __stdcall DragLeave(CWnd* pWndLock);


public:
	virtual ~CImageList();

	virtual void Dump(CDumpContext& dc) const;
	virtual void AssertValid() const;
#line 736 "C:\\MSDEV\\MFC\\include\\afxcmn.h"
};




class CToolBarCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCToolBarCtrl; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	CToolBarCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


public:
	BOOL IsButtonEnabled(int nID) const;
	BOOL IsButtonChecked(int nID) const;
	BOOL IsButtonPressed(int nID) const;
	BOOL IsButtonHidden(int nID) const;
	BOOL IsButtonIndeterminate(int nID) const;
	BOOL SetState(int nID, UINT nState);
	int GetState(int nID) const;
	BOOL GetButton(int nIndex, LPTBBUTTON lpButton) const;
	int GetButtonCount() const;
	BOOL GetItemRect(int nIndex, LPRECT lpRect) const;
	void SetButtonStructSize(int nSize);
	BOOL SetButtonSize(CSize size);
	BOOL SetBitmapSize(CSize size);
	CToolTipCtrl* GetToolTips() const;
	void SetToolTips(CToolTipCtrl* pTip);
	void SetOwner(CWnd* pWnd);
	void SetRows(int nRows, BOOL bLarger, LPRECT lpRect);
	int GetRows() const;
	BOOL SetCmdID(int nIndex, UINT nID);
	UINT GetBitmapFlags() const;


public:
	BOOL EnableButton(int nID, BOOL bEnable = 1);
	BOOL CheckButton(int nID, BOOL bCheck = 1);
	BOOL PressButton(int nID, BOOL bPress = 1);
	BOOL HideButton(int nID, BOOL bHide = 1);
	BOOL Indeterminate(int nID, BOOL bIndeterminate = 1);
	int AddBitmap(int nNumButtons, UINT nBitmapID);
	int AddBitmap(int nNumButtons, CBitmap* pBitmap);
	BOOL AddButtons(int nNumButtons, LPTBBUTTON lpButtons);
	BOOL InsertButton(int nIndex, LPTBBUTTON lpButton);
	BOOL DeleteButton(int nIndex);
	UINT CommandToIndex(UINT nID) const;
	void SaveState(HKEY hKeyRoot, LPCTSTR lpszSubKey,
		LPCTSTR lpszValueName);
	void RestoreState(HKEY hKeyRoot, LPCTSTR lpszSubKey,
		LPCTSTR lpszValueName);

	void Customize();
	int AddString(UINT nStringID);
	int AddStrings(LPCTSTR lpszStrings);
	void AutoSize();


public:
	virtual ~CToolBarCtrl();

protected:
	
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static __declspec(dllimport) const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};





class CRichEditCtrl : public CWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const __declspec(dllimport) CRuntimeClass classCRichEditCtrl; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CRichEditCtrl();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL CanUndo() const;
	int GetLineCount() const;
	BOOL GetModify() const;
	void SetModify(BOOL bModified = 1);
	void GetRect(LPRECT lpRect) const;
	CPoint GetCharPos(long lChar) const;
	void SetOptions(WORD wOp, DWORD dwFlags);

	
	int GetLine(int nIndex, LPTSTR lpszBuffer) const;
	int GetLine(int nIndex, LPTSTR lpszBuffer, int nMaxLength) const;

	BOOL CanPaste(UINT nFormat = 0) const;
	void GetSel(long& nStartChar, long& nEndChar) const;
	void GetSel(CHARRANGE &cr) const;
	void LimitText(long nChars = 0);
	long LineFromChar(long nIndex) const;
	void SetSel(long nStartChar, long nEndChar);
	void SetSel(CHARRANGE &cr);
	DWORD GetDefaultCharFormat(CHARFORMATA &cf) const;
	DWORD GetSelectionCharFormat(CHARFORMATA &cf) const;
	long GetEventMask() const;
	long GetLimitText() const;
	DWORD GetParaFormat(PARAFORMAT &pf) const;
	
	long GetSelText(LPSTR lpBuf) const;
	CString GetSelText() const;
	WORD GetSelectionType() const;
	COLORREF SetBackgroundColor(BOOL bSysColor, COLORREF cr);
	BOOL SetDefaultCharFormat(CHARFORMATA &cf);
	BOOL SetSelectionCharFormat(CHARFORMATA &cf);
	BOOL SetWordCharFormat(CHARFORMATA &cf);
	DWORD SetEventMask(DWORD dwEventMask);
	BOOL SetParaFormat(PARAFORMAT &pf);
	BOOL SetTargetDevice(HDC hDC, long lLineWidth);
	BOOL SetTargetDevice(CDC &dc, long lLineWidth);
	long GetTextLength() const;
	BOOL SetReadOnly(BOOL bReadOnly = 1);
	int GetFirstVisibleLine() const;


	void EmptyUndoBuffer();

	int LineIndex(int nLine = -1) const;
	int LineLength(int nLine = -1) const;
	void LineScroll(int nLines, int nChars = 0);
	void ReplaceSel(LPCTSTR lpszNewText, BOOL bCanUndo = 0);
	void SetRect(LPCRECT lpRect);

	BOOL DisplayBand(LPRECT pDisplayRect);
	long FindTextA(DWORD dwFlags, FINDTEXTEXA* pFindText) const;
	long FormatRange(FORMATRANGE* pfr, BOOL bDisplay = 1);
	void HideSelection(BOOL bHide, BOOL bPerm);
	void PasteSpecial(UINT nClipFormat, DWORD dvAspect = 0, HMETAFILE hMF = 0);
	void RequestResize();
	long StreamIn(int nFormat, EDITSTREAM &es);
	long StreamOut(int nFormat, EDITSTREAM &es);

	
	BOOL Undo();
	void Clear();
	void Copy();
	void Cut();
	void Paste();


	IRichEditOle* GetIRichEditOle() const;
	BOOL SetOLECallback(IRichEditOleCallback* pCallback);


public:
	virtual ~CRichEditCtrl();
};
#line 894 "C:\\MSDEV\\MFC\\include\\afxcmn.h"




#pragma pack(pop)
#line 900 "C:\\MSDEV\\MFC\\include\\afxcmn.h"











#pragma component(minrebuild, on)
#line 913 "C:\\MSDEV\\MFC\\include\\afxcmn.h"

#pragma component(mintypeinfo, off)
#line 916 "C:\\MSDEV\\MFC\\include\\afxcmn.h"

#line 918 "C:\\MSDEV\\MFC\\include\\afxcmn.h"


#line 10 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxtempl.h"














	#line 1 "C:\\MSDEV\\MFC\\include\\afxplex_.h"


















#pragma pack(push, 4)
#line 21 "C:\\MSDEV\\MFC\\include\\afxplex_.h"


#pragma code_seg(".text$" "AFX_COL1")
#line 25 "C:\\MSDEV\\MFC\\include\\afxplex_.h"

struct CPlex     
{
	CPlex* pNext;


#line 32 "C:\\MSDEV\\MFC\\include\\afxplex_.h"
	

	void* data() { return this+1; }

	static CPlex* __stdcall Create(CPlex*& head, UINT nMax, UINT cbElement);
			
			

	void FreeDataChain();       
};


#pragma code_seg()
#line 46 "C:\\MSDEV\\MFC\\include\\afxplex_.h"


#pragma pack(pop)
#line 50 "C:\\MSDEV\\MFC\\include\\afxplex_.h"

#line 52 "C:\\MSDEV\\MFC\\include\\afxplex_.h"


#line 16 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
#line 17 "C:\\MSDEV\\MFC\\include\\afxtempl.h"


#pragma component(minrebuild, off)
#line 21 "C:\\MSDEV\\MFC\\include\\afxtempl.h"

#pragma component(mintypeinfo, on)
#line 24 "C:\\MSDEV\\MFC\\include\\afxtempl.h"


#pragma pack(push, 4)
#line 28 "C:\\MSDEV\\MFC\\include\\afxtempl.h"


static char _szAfxTempl[] = "afxtempl.h";


#line 34 "C:\\MSDEV\\MFC\\include\\afxtempl.h"


#pragma warning(disable: 4114)
#line 38 "C:\\MSDEV\\MFC\\include\\afxtempl.h"










	#line 1 "C:\\MSDEV\\INCLUDE\\new.h"













#pragma once
#line 16 "C:\\MSDEV\\INCLUDE\\new.h"






#line 1 "C:\\MSDEV\\INCLUDE\\new"



#line 1 "C:\\MSDEV\\INCLUDE\\exception"
















#line 1 "C:\\MSDEV\\INCLUDE\\xstddef"




 #line 1 "C:\\MSDEV\\INCLUDE\\yvals.h"




 #pragma warning(4: 4018 4114 4146 4245)
 #pragma warning(4: 4663 4664 4665)
 #pragma warning(disable: 4237 4244 4290)
		
  
  
  







#pragma pack(push,8)
#line 21 "C:\\MSDEV\\INCLUDE\\yvals.h"

		
typedef int bool;

 
#line 27 "C:\\MSDEV\\INCLUDE\\yvals.h"

 
#line 30 "C:\\MSDEV\\INCLUDE\\yvals.h"
 
struct _Bool {
	_Bool()
		: _Val(0) {}
	_Bool(int _V)
		: _Val(_V != 0) {}
	_Bool& operator=(int _V)
		{_Val = _V != 0;
		return (*this); }
	_Bool& operator+=(const _Bool& _X)
		{_Val += _X._Val;	
		return (*this); }
	operator int() const
		{return (_Val); }
private:
	char _Val;
	};
 #line 48 "C:\\MSDEV\\INCLUDE\\yvals.h"
		



		
typedef unsigned short   _Wchart;
 

#line 57 "C:\\MSDEV\\INCLUDE\\yvals.h"
struct _Wchart_unique {
	_Wchart_unique()
		: _Val(0) {}
	_Wchart_unique(_Wchart _V)
		: _Val(_V) {}
	_Wchart_unique(const _Wchart_unique& _R)
		: _Val(_R._Val) {}
	_Wchart_unique& operator=(_Wchart _V)
		{_Val = _V;
		return (*this); }
	operator _Wchart() const
		{return (_Val); }
private:
	_Wchart _Val;
	};
 #line 73 "C:\\MSDEV\\INCLUDE\\yvals.h"
		






		
 
  
  
 


#line 88 "C:\\MSDEV\\INCLUDE\\yvals.h"
		




#pragma pack(pop)
#line 95 "C:\\MSDEV\\INCLUDE\\yvals.h"

#line 97 "C:\\MSDEV\\INCLUDE\\yvals.h"





#line 6 "C:\\MSDEV\\INCLUDE\\xstddef"
#line 7 "C:\\MSDEV\\INCLUDE\\xstddef"
#line 1 "C:\\MSDEV\\INCLUDE\\cstddef"








 #line 1 "C:\\MSDEV\\INCLUDE\\stddef.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\stddef.h"




















































































































#line 10 "C:\\MSDEV\\INCLUDE\\cstddef"
#line 11 "C:\\MSDEV\\INCLUDE\\cstddef"
#line 12 "C:\\MSDEV\\INCLUDE\\cstddef"





#line 8 "C:\\MSDEV\\INCLUDE\\xstddef"
		
 
 
 
 
 
 
 
 
		
 
 
		




 
 
 
 
		
class _Lockit
	{	
public:
	_Lockit()
		{}	
	~_Lockit()
		{}	
	};
		
enum _Uninitialized {_Noinit};
		
void __cdecl _Nomemory();
#line 43 "C:\\MSDEV\\INCLUDE\\xstddef"





#line 18 "C:\\MSDEV\\INCLUDE\\exception"
#line 1 "C:\\MSDEV\\INCLUDE\\eh.h"













#pragma once
#line 16 "C:\\MSDEV\\INCLUDE\\eh.h"






#line 23 "C:\\MSDEV\\INCLUDE\\eh.h"





#pragma pack(push,8)
#line 30 "C:\\MSDEV\\INCLUDE\\eh.h"











































typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_handler)();


struct _EXCEPTION_POINTERS;
typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);
#line 82 "C:\\MSDEV\\INCLUDE\\eh.h"

__declspec(dllimport) void __cdecl terminate(void);
__declspec(dllimport) void __cdecl unexpected(void);

__declspec(dllimport) terminate_function __cdecl set_terminate(terminate_function);
__declspec(dllimport) unexpected_function __cdecl set_unexpected(unexpected_function);

__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(_se_translator_function);
#line 91 "C:\\MSDEV\\INCLUDE\\eh.h"


#pragma pack(pop)
#line 95 "C:\\MSDEV\\INCLUDE\\eh.h"

#line 97 "C:\\MSDEV\\INCLUDE\\eh.h"
#line 19 "C:\\MSDEV\\INCLUDE\\exception"






#pragma pack(push,8)
#line 27 "C:\\MSDEV\\INCLUDE\\exception"



#line 31 "C:\\MSDEV\\INCLUDE\\exception"















typedef const char *__exString;


class __declspec(dllimport) exception
{
public:
    exception();
    exception(const __exString&);
    exception(const exception&);
    exception& operator= (const exception&);
    virtual ~exception();
    virtual __exString what() const;
private:
    __exString _m_what;
    int _m_doFree;
};

		
class bad_exception : public exception {
public:
	bad_exception(const char *_S = "bad exception") throw ()
		: exception(_S) {}
	virtual ~bad_exception() throw ()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};

bool __cdecl uncaught_exception();








#pragma pack(pop)
#line 86 "C:\\MSDEV\\INCLUDE\\exception"

#line 88 "C:\\MSDEV\\INCLUDE\\exception"

#line 5 "C:\\MSDEV\\INCLUDE\\new"






#pragma pack(push,8)
#line 13 "C:\\MSDEV\\INCLUDE\\new"
















		
typedef void (*new_handler)();
struct nothrow_t {};
const nothrow_t nothrow;
		
class bad_alloc : public exception {
public:
	bad_alloc(const char *_S = "bad allocation") throw ()
		: exception(_S) {}
	virtual ~bad_alloc() throw ()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
__declspec(dllimport) new_handler set_new_handler(new_handler) throw ();
extern new_handler _New_hand;
		
void __cdecl operator delete(void *) throw ();
void *__cdecl operator new(size_t) throw (::bad_alloc);
void *__cdecl operator new(size_t, const ::nothrow_t&) throw ();
inline void *__cdecl operator new(size_t, void *_P)
	{return (_P); }


#pragma pack(pop)
#line 57 "C:\\MSDEV\\INCLUDE\\new"

#line 59 "C:\\MSDEV\\INCLUDE\\new"





#line 23 "C:\\MSDEV\\INCLUDE\\new.h"



#line 27 "C:\\MSDEV\\INCLUDE\\new.h"














































#line 74 "C:\\MSDEV\\INCLUDE\\new.h"













__declspec(dllimport) int __cdecl _query_new_mode( void );
__declspec(dllimport) int __cdecl _set_new_mode( int );






__declspec(dllimport) _PNH __cdecl _query_new_handler( void );
__declspec(dllimport) _PNH __cdecl _set_new_handler( _PNH );
__declspec(dllimport) new_handler __cdecl _query_new_pt_handler( void );











#line 110 "C:\\MSDEV\\INCLUDE\\new.h"

#line 112 "C:\\MSDEV\\INCLUDE\\new.h"

#line 114 "C:\\MSDEV\\INCLUDE\\new.h"
#line 49 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
#line 50 "C:\\MSDEV\\MFC\\include\\afxtempl.h"

template<class TYPE>
inline void __stdcall ConstructElements(TYPE* pElements, int nCount)
{
	
do { if (!(nCount == 0 || AfxIsValidAddress(pElements, nCount * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 55)) __asm { int 3 }; } while (0);

	
	memset((void*)pElements, 0, nCount * sizeof(TYPE));

	
	for (; nCount--; pElements++)
		::new((void*)pElements) TYPE;
}

template<class TYPE>
inline void __stdcall DestructElements(TYPE* pElements, int nCount)
{
	
do { if (!(nCount == 0 || AfxIsValidAddress(pElements, nCount * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 69)) __asm { int 3 }; } while (0);

	
	for (; nCount--; pElements++)
		pElements->~TYPE();
}

template<class TYPE>
inline void __stdcall CopyElements(TYPE* pDest, const TYPE* pSrc, int nCount)
{
	
do { if (!(nCount == 0 || AfxIsValidAddress(pDest, nCount * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 80)) __asm { int 3 }; } while (0);
	
do { if (!(nCount == 0 || AfxIsValidAddress(pSrc, nCount * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 82)) __asm { int 3 }; } while (0);

	
	while (nCount--)
		*pDest++ = *pSrc++;
}

template<class TYPE>
void __stdcall SerializeElements(CArchive& ar, TYPE* pElements, int nCount)
{
	
do { if (!(nCount == 0 || AfxIsValidAddress(pElements, nCount * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 93)) __asm { int 3 }; } while (0);

	
	if (ar.IsStoring())
		ar.Write((void*)pElements, nCount * sizeof(TYPE));
	else
		ar.Read((void*)pElements, nCount * sizeof(TYPE));
}


template<class TYPE>
void __stdcall DumpElements(CDumpContext& dc, const TYPE* pElements, int nCount)
{
	
do { if (!(nCount == 0 || AfxIsValidAddress(pElements, nCount * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 107)) __asm { int 3 }; } while (0);
	&dc; 
	pElements;  
	nCount; 

	
}
#line 115 "C:\\MSDEV\\MFC\\include\\afxtempl.h"

template<class TYPE, class ARG_TYPE>
BOOL __stdcall CompareElements(const TYPE* pElement1, const ARG_TYPE* pElement2)
{
	do { if (!(AfxIsValidAddress(pElement1, sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 119)) __asm { int 3 }; } while (0);
	do { if (!(AfxIsValidAddress(pElement2, sizeof(ARG_TYPE))) && AfxAssertFailedLine(_szAfxTempl, 120)) __asm { int 3 }; } while (0);

	return *pElement1 == *pElement2;
}

template<class ARG_KEY>
inline UINT __stdcall HashKey(ARG_KEY key)
{
	
	return ((UINT)(void*)(DWORD)key) >> 4;
}


void __stdcall ConstructElements(CString* pElements, int nCount);
void __stdcall DestructElements(CString* pElements, int nCount);
void __stdcall CopyElements(CString* pDest, const CString* pSrc, int nCount);
void __stdcall SerializeElements(CArchive& ar, CString* pElements, int nCount);
UINT __stdcall HashKey(LPCTSTR key);


class COleVariant;
struct tagVARIANT;


void __stdcall ConstructElements(COleVariant* pElements, int nCount);
void __stdcall DestructElements(COleVariant* pElements, int nCount);
void __stdcall CopyElements(COleVariant* pDest, const COleVariant* pSrc, int nCount);
void __stdcall SerializeElements(CArchive& ar, COleVariant* pElements, int nCount);
void __stdcall DumpElements(CDumpContext& dc, COleVariant* pElements, int nCount);
UINT __stdcall HashKey(const struct tagVARIANT& var);






template<class TYPE, class ARG_TYPE>
class CArray : public CObject
{
public:

	CArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	TYPE GetAt(int nIndex) const;
	void SetAt(int nIndex, ARG_TYPE newElement);
	TYPE& ElementAt(int nIndex);

	
	const TYPE* GetData() const;
	TYPE* GetData();

	
	void SetAtGrow(int nIndex, ARG_TYPE newElement);
	int Add(ARG_TYPE newElement);
	int Append(const CArray& src);
	void Copy(const CArray& src);

	
	TYPE operator[](int nIndex) const;
	TYPE& operator[](int nIndex);

	
	void InsertAt(int nIndex, ARG_TYPE newElement, int nCount = 1);
	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CArray* pNewArray);


protected:
	TYPE* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

public:
	~CArray();
	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 211 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
};




template<class TYPE, class ARG_TYPE>
inline int CArray<TYPE, ARG_TYPE>::GetSize() const
	{ return m_nSize; }
template<class TYPE, class ARG_TYPE>
inline int CArray<TYPE, ARG_TYPE>::GetUpperBound() const
	{ return m_nSize-1; }
template<class TYPE, class ARG_TYPE>
inline void CArray<TYPE, ARG_TYPE>::RemoveAll()
	{ SetSize(0, -1); }
template<class TYPE, class ARG_TYPE>
inline TYPE CArray<TYPE, ARG_TYPE>::GetAt(int nIndex) const
	{ do { if (!(nIndex >= 0 && nIndex < m_nSize) && AfxAssertFailedLine(_szAfxTempl, 227)) __asm { int 3 }; } while (0);
		return m_pData[nIndex]; }
template<class TYPE, class ARG_TYPE>
inline void CArray<TYPE, ARG_TYPE>::SetAt(int nIndex, ARG_TYPE newElement)
	{ do { if (!(nIndex >= 0 && nIndex < m_nSize) && AfxAssertFailedLine(_szAfxTempl, 231)) __asm { int 3 }; } while (0);
		m_pData[nIndex] = newElement; }
template<class TYPE, class ARG_TYPE>
inline TYPE& CArray<TYPE, ARG_TYPE>::ElementAt(int nIndex)
	{ do { if (!(nIndex >= 0 && nIndex < m_nSize) && AfxAssertFailedLine(_szAfxTempl, 235)) __asm { int 3 }; } while (0);
		return m_pData[nIndex]; }
template<class TYPE, class ARG_TYPE>
inline const TYPE* CArray<TYPE, ARG_TYPE>::GetData() const
	{ return (const TYPE*)m_pData; }
template<class TYPE, class ARG_TYPE>
inline TYPE* CArray<TYPE, ARG_TYPE>::GetData()
	{ return (TYPE*)m_pData; }
template<class TYPE, class ARG_TYPE>
inline int CArray<TYPE, ARG_TYPE>::Add(ARG_TYPE newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }
template<class TYPE, class ARG_TYPE>
inline TYPE CArray<TYPE, ARG_TYPE>::operator[](int nIndex) const
	{ return GetAt(nIndex); }
template<class TYPE, class ARG_TYPE>
inline TYPE& CArray<TYPE, ARG_TYPE>::operator[](int nIndex)
	{ return ElementAt(nIndex); }




template<class TYPE, class ARG_TYPE>
CArray<TYPE, ARG_TYPE>::CArray()
{
	m_pData = 0;
	m_nSize = m_nMaxSize = m_nGrowBy = 0;
}

template<class TYPE, class ARG_TYPE>
CArray<TYPE, ARG_TYPE>::~CArray()
{
	(::AfxAssertValidObject(this, _szAfxTempl, 268));

	if (m_pData != 0)
	{
		DestructElements(m_pData, m_nSize);
		delete[] (BYTE*)m_pData;
	}
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::SetSize(int nNewSize, int nGrowBy)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 280));
	do { if (!(nNewSize >= 0) && AfxAssertFailedLine(_szAfxTempl, 281)) __asm { int 3 }; } while (0);

	if (nGrowBy != -1)
		m_nGrowBy = nGrowBy;  

	if (nNewSize == 0)
	{
		
		if (m_pData != 0)
		{
			DestructElements(m_pData, m_nSize);
			delete[] (BYTE*)m_pData;
			m_pData = 0;
		}
		m_nSize = m_nMaxSize = 0;
	}
	else if (m_pData == 0)
	{
		

		do { if (!(nNewSize <= 0xffffffff/sizeof(TYPE)) && AfxAssertFailedLine(_szAfxTempl, 301)) __asm { int 3 }; } while (0);    
#line 303 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
		m_pData = (TYPE*) new(_szAfxTempl, 303) BYTE[nNewSize * sizeof(TYPE)];
		ConstructElements(m_pData, nNewSize);
		m_nSize = m_nMaxSize = nNewSize;
	}
	else if (nNewSize <= m_nMaxSize)
	{
		
		if (nNewSize > m_nSize)
		{
			
			ConstructElements(&m_pData[m_nSize], nNewSize-m_nSize);
		}
		else if (m_nSize > nNewSize)
		{
			
			DestructElements(&m_pData[nNewSize], m_nSize-nNewSize);
		}
		m_nSize = nNewSize;
	}
	else
	{
		
		int nGrowBy = m_nGrowBy;
		if (nGrowBy == 0)
		{
			
			
			nGrowBy = m_nSize / 8;
			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);
		}
		int nNewMax;
		if (nNewSize < m_nMaxSize + nGrowBy)
			nNewMax = m_nMaxSize + nGrowBy;  
		else
			nNewMax = nNewSize;  

		do { if (!(nNewMax >= m_nMaxSize) && AfxAssertFailedLine(_szAfxTempl, 339)) __asm { int 3 }; } while (0);  

		do { if (!(nNewMax <= 0xffffffff/sizeof(TYPE)) && AfxAssertFailedLine(_szAfxTempl, 341)) __asm { int 3 }; } while (0); 
#line 343 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
		TYPE* pNewData = (TYPE*) new(_szAfxTempl, 343) BYTE[nNewMax * sizeof(TYPE)];

		
		memcpy(pNewData, m_pData, m_nSize * sizeof(TYPE));

		
		do { if (!(nNewSize > m_nSize) && AfxAssertFailedLine(_szAfxTempl, 349)) __asm { int 3 }; } while (0);
		ConstructElements(&pNewData[m_nSize], nNewSize-m_nSize);

		
		delete[] (BYTE*)m_pData;
		m_pData = pNewData;
		m_nSize = nNewSize;
		m_nMaxSize = nNewMax;
	}
}

template<class TYPE, class ARG_TYPE>
int CArray<TYPE, ARG_TYPE>::Append(const CArray& src)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 363));
	do { if (!(this != &src) && AfxAssertFailedLine(_szAfxTempl, 364)) __asm { int 3 }; } while (0);   

	int nOldSize = m_nSize;
	SetSize(m_nSize + src.m_nSize);
	CopyElements(m_pData + nOldSize, src.m_pData, src.m_nSize);
	return nOldSize;
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::Copy(const CArray& src)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 375));
	do { if (!(this != &src) && AfxAssertFailedLine(_szAfxTempl, 376)) __asm { int 3 }; } while (0);   

	SetSize(src.m_nSize);
	CopyElements(m_pData, src.m_pData, src.m_nSize);
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::FreeExtra()
{
	(::AfxAssertValidObject(this, _szAfxTempl, 385));

	if (m_nSize != m_nMaxSize)
	{
		

		do { if (!(m_nSize <= 0xffffffff/sizeof(TYPE)) && AfxAssertFailedLine(_szAfxTempl, 391)) __asm { int 3 }; } while (0); 
#line 393 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
		TYPE* pNewData = 0;
		if (m_nSize != 0)
		{
			pNewData = (TYPE*) new(_szAfxTempl, 396) BYTE[m_nSize * sizeof(TYPE)];
			
			memcpy(pNewData, m_pData, m_nSize * sizeof(TYPE));
		}

		
		delete[] (BYTE*)m_pData;
		m_pData = pNewData;
		m_nMaxSize = m_nSize;
	}
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::SetAtGrow(int nIndex, ARG_TYPE newElement)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 411));
	do { if (!(nIndex >= 0) && AfxAssertFailedLine(_szAfxTempl, 412)) __asm { int 3 }; } while (0);

	if (nIndex >= m_nSize)
		SetSize(nIndex+1, -1);
	m_pData[nIndex] = newElement;
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::InsertAt(int nIndex, ARG_TYPE newElement, int nCount )
{
	(::AfxAssertValidObject(this, _szAfxTempl, 422));
	do { if (!(nIndex >= 0) && AfxAssertFailedLine(_szAfxTempl, 423)) __asm { int 3 }; } while (0);    
	do { if (!(nCount > 0) && AfxAssertFailedLine(_szAfxTempl, 424)) __asm { int 3 }; } while (0);     

	if (nIndex >= m_nSize)
	{
		
		SetSize(nIndex + nCount, -1);   
	}
	else
	{
		
		int nOldSize = m_nSize;
		SetSize(m_nSize + nCount, -1);  
		
		DestructElements(&m_pData[nOldSize], nCount);
		
		memmove(&m_pData[nIndex+nCount], &m_pData[nIndex],
			(nOldSize-nIndex) * sizeof(TYPE));

		
		ConstructElements(&m_pData[nIndex], nCount);
	}

	
	do { if (!(nIndex + nCount <= m_nSize) && AfxAssertFailedLine(_szAfxTempl, 447)) __asm { int 3 }; } while (0);
	while (nCount--)
		m_pData[nIndex++] = newElement;
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::RemoveAt(int nIndex, int nCount)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 455));
	do { if (!(nIndex >= 0) && AfxAssertFailedLine(_szAfxTempl, 456)) __asm { int 3 }; } while (0);
	do { if (!(nCount >= 0) && AfxAssertFailedLine(_szAfxTempl, 457)) __asm { int 3 }; } while (0);
	do { if (!(nIndex + nCount <= m_nSize) && AfxAssertFailedLine(_szAfxTempl, 458)) __asm { int 3 }; } while (0);

	
	int nMoveCount = m_nSize - (nIndex + nCount);
	DestructElements(&m_pData[nIndex], nCount);
	if (nMoveCount)
		memcpy(&m_pData[nIndex], &m_pData[nIndex + nCount],
			nMoveCount * sizeof(TYPE));
	m_nSize -= nCount;
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::InsertAt(int nStartIndex, CArray* pNewArray)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 472));
	do { if (!(pNewArray != 0) && AfxAssertFailedLine(_szAfxTempl, 473)) __asm { int 3 }; } while (0);
	(::AfxAssertValidObject(pNewArray, _szAfxTempl, 474));
	do { if (!(nStartIndex >= 0) && AfxAssertFailedLine(_szAfxTempl, 475)) __asm { int 3 }; } while (0);

	if (pNewArray->GetSize() > 0)
	{
		InsertAt(nStartIndex, pNewArray->GetAt(0), pNewArray->GetSize());
		for (int i = 0; i < pNewArray->GetSize(); i++)
			SetAt(nStartIndex + i, pNewArray->GetAt(i));
	}
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::Serialize(CArchive& ar)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 488));

	CObject::Serialize(ar);
	if (ar.IsStoring())
	{
		ar.WriteCount(m_nSize);
	}
	else
	{
		DWORD nOldSize = ar.ReadCount();
		SetSize(nOldSize, -1);
	}
	SerializeElements(ar, m_pData, m_nSize);
}


template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::Dump(CDumpContext& dc) const
{
	CObject::Dump(dc);

	dc << "with " << m_nSize << " elements";
	if (dc.GetDepth() > 0)
	{
		dc << "\n";
		DumpElements(dc, m_pData, m_nSize);
	}

	dc << "\n";
}

template<class TYPE, class ARG_TYPE>
void CArray<TYPE, ARG_TYPE>::AssertValid() const
{
	CObject::AssertValid();

	if (m_pData == 0)
	{
		do { if (!(m_nSize == 0) && AfxAssertFailedLine(_szAfxTempl, 526)) __asm { int 3 }; } while (0);
		do { if (!(m_nMaxSize == 0) && AfxAssertFailedLine(_szAfxTempl, 527)) __asm { int 3 }; } while (0);
	}
	else
	{
		do { if (!(m_nSize >= 0) && AfxAssertFailedLine(_szAfxTempl, 531)) __asm { int 3 }; } while (0);
		do { if (!(m_nMaxSize >= 0) && AfxAssertFailedLine(_szAfxTempl, 532)) __asm { int 3 }; } while (0);
		do { if (!(m_nSize <= m_nMaxSize) && AfxAssertFailedLine(_szAfxTempl, 533)) __asm { int 3 }; } while (0);
		do { if (!(AfxIsValidAddress(m_pData, m_nMaxSize * sizeof(TYPE))) && AfxAssertFailedLine(_szAfxTempl, 534)) __asm { int 3 }; } while (0);
	}
}
#line 538 "C:\\MSDEV\\MFC\\include\\afxtempl.h"




template<class TYPE, class ARG_TYPE>
class CList : public CObject
{
protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		TYPE data;
	};
public:

	CList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	TYPE& GetHead();
	TYPE GetHead() const;
	TYPE& GetTail();
	TYPE GetTail() const;


	
	TYPE RemoveHead();
	TYPE RemoveTail();

	
	POSITION AddHead(ARG_TYPE newElement);
	POSITION AddTail(ARG_TYPE newElement);

	
	void AddHead(CList* pNewList);
	void AddTail(CList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	TYPE& GetNext(POSITION& rPosition); 
	TYPE GetNext(POSITION& rPosition) const; 
	TYPE& GetPrev(POSITION& rPosition); 
	TYPE GetPrev(POSITION& rPosition) const; 

	
	TYPE& GetAt(POSITION position);
	TYPE GetAt(POSITION position) const;
	void SetAt(POSITION pos, ARG_TYPE newElement);
	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, ARG_TYPE newElement);
	POSITION InsertAfter(POSITION position, ARG_TYPE newElement);

	
	POSITION Find(ARG_TYPE searchValue, POSITION startAfter = 0) const;
		
	POSITION FindIndex(int nIndex) const;
		


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CList();
	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 626 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
};




template<class TYPE, class ARG_TYPE>
inline int CList<TYPE, ARG_TYPE>::GetCount() const
	{ return m_nCount; }
template<class TYPE, class ARG_TYPE>
inline BOOL CList<TYPE, ARG_TYPE>::IsEmpty() const
	{ return m_nCount == 0; }
template<class TYPE, class ARG_TYPE>
inline TYPE& CList<TYPE, ARG_TYPE>::GetHead()
	{ do { if (!(m_pNodeHead != 0) && AfxAssertFailedLine(_szAfxTempl, 639)) __asm { int 3 }; } while (0);
		return m_pNodeHead->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE CList<TYPE, ARG_TYPE>::GetHead() const
	{ do { if (!(m_pNodeHead != 0) && AfxAssertFailedLine(_szAfxTempl, 643)) __asm { int 3 }; } while (0);
		return m_pNodeHead->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE& CList<TYPE, ARG_TYPE>::GetTail()
	{ do { if (!(m_pNodeTail != 0) && AfxAssertFailedLine(_szAfxTempl, 647)) __asm { int 3 }; } while (0);
		return m_pNodeTail->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE CList<TYPE, ARG_TYPE>::GetTail() const
	{ do { if (!(m_pNodeTail != 0) && AfxAssertFailedLine(_szAfxTempl, 651)) __asm { int 3 }; } while (0);
		return m_pNodeTail->data; }
template<class TYPE, class ARG_TYPE>
inline POSITION CList<TYPE, ARG_TYPE>::GetHeadPosition() const
	{ return (POSITION) m_pNodeHead; }
template<class TYPE, class ARG_TYPE>
inline POSITION CList<TYPE, ARG_TYPE>::GetTailPosition() const
	{ return (POSITION) m_pNodeTail; }
template<class TYPE, class ARG_TYPE>
inline TYPE& CList<TYPE, ARG_TYPE>::GetNext(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 662)) __asm { int 3 }; } while (0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE CList<TYPE, ARG_TYPE>::GetNext(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 668)) __asm { int 3 }; } while (0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE& CList<TYPE, ARG_TYPE>::GetPrev(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 674)) __asm { int 3 }; } while (0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE CList<TYPE, ARG_TYPE>::GetPrev(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 680)) __asm { int 3 }; } while (0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE& CList<TYPE, ARG_TYPE>::GetAt(POSITION position)
	{ CNode* pNode = (CNode*) position;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 686)) __asm { int 3 }; } while (0);
		return pNode->data; }
template<class TYPE, class ARG_TYPE>
inline TYPE CList<TYPE, ARG_TYPE>::GetAt(POSITION position) const
	{ CNode* pNode = (CNode*) position;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 691)) __asm { int 3 }; } while (0);
		return pNode->data; }
template<class TYPE, class ARG_TYPE>
inline void CList<TYPE, ARG_TYPE>::SetAt(POSITION pos, ARG_TYPE newElement)
	{ CNode* pNode = (CNode*) pos;
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 696)) __asm { int 3 }; } while (0);
		pNode->data = newElement; }

template<class TYPE, class ARG_TYPE>
CList<TYPE, ARG_TYPE>::CList(int nBlockSize)
{
	do { if (!(nBlockSize > 0) && AfxAssertFailedLine(_szAfxTempl, 702)) __asm { int 3 }; } while (0);

	m_nCount = 0;
	m_pNodeHead = m_pNodeTail = m_pNodeFree = 0;
	m_pBlocks = 0;
	m_nBlockSize = nBlockSize;
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::RemoveAll()
{
	(::AfxAssertValidObject(this, _szAfxTempl, 713));

	
	CNode* pNode;
	for (pNode = m_pNodeHead; pNode != 0; pNode = pNode->pNext)
		DestructElements(&pNode->data, 1);

	m_nCount = 0;
	m_pNodeHead = m_pNodeTail = m_pNodeFree = 0;
	m_pBlocks->FreeDataChain();
	m_pBlocks = 0;
}

template<class TYPE, class ARG_TYPE>
CList<TYPE, ARG_TYPE>::~CList()
{
	RemoveAll();
	do { if (!(m_nCount == 0) && AfxAssertFailedLine(_szAfxTempl, 730)) __asm { int 3 }; } while (0);
}
















template<class TYPE, class ARG_TYPE>
CList<TYPE, ARG_TYPE>::CNode*
CList<TYPE, ARG_TYPE>::NewNode(CList::CNode* pPrev, CList::CNode* pNext)
{
	if (m_pNodeFree == 0)
	{
		
		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,
				 sizeof(CNode));

		
		CNode* pNode = (CNode*) pNewBlock->data();
		
		pNode += m_nBlockSize - 1;
		for (int i = m_nBlockSize-1; i >= 0; i--, pNode--)
		{
			pNode->pNext = m_pNodeFree;
			m_pNodeFree = pNode;
		}
	}
	do { if (!(m_pNodeFree != 0) && AfxAssertFailedLine(_szAfxTempl, 768)) __asm { int 3 }; } while (0);  

	CList::CNode* pNode = m_pNodeFree;
	m_pNodeFree = m_pNodeFree->pNext;
	pNode->pPrev = pPrev;
	pNode->pNext = pNext;
	m_nCount++;
	do { if (!(m_nCount > 0) && AfxAssertFailedLine(_szAfxTempl, 775)) __asm { int 3 }; } while (0);  

	ConstructElements(&pNode->data, 1);
	return pNode;
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::FreeNode(CList::CNode* pNode)
{
	DestructElements(&pNode->data, 1);
	pNode->pNext = m_pNodeFree;
	m_pNodeFree = pNode;
	m_nCount--;
	do { if (!(m_nCount >= 0) && AfxAssertFailedLine(_szAfxTempl, 788)) __asm { int 3 }; } while (0);  

	
	if (m_nCount == 0)
		RemoveAll();
}

template<class TYPE, class ARG_TYPE>
POSITION CList<TYPE, ARG_TYPE>::AddHead(ARG_TYPE newElement)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 798));

	CNode* pNewNode = NewNode(0, m_pNodeHead);
	pNewNode->data = newElement;
	if (m_pNodeHead != 0)
		m_pNodeHead->pPrev = pNewNode;
	else
		m_pNodeTail = pNewNode;
	m_pNodeHead = pNewNode;
	return (POSITION) pNewNode;
}

template<class TYPE, class ARG_TYPE>
POSITION CList<TYPE, ARG_TYPE>::AddTail(ARG_TYPE newElement)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 813));

	CNode* pNewNode = NewNode(m_pNodeTail, 0);
	pNewNode->data = newElement;
	if (m_pNodeTail != 0)
		m_pNodeTail->pNext = pNewNode;
	else
		m_pNodeHead = pNewNode;
	m_pNodeTail = pNewNode;
	return (POSITION) pNewNode;
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::AddHead(CList* pNewList)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 828));

	do { if (!(pNewList != 0) && AfxAssertFailedLine(_szAfxTempl, 830)) __asm { int 3 }; } while (0);
	(::AfxAssertValidObject(pNewList, _szAfxTempl, 831));

	
	POSITION pos = pNewList->GetTailPosition();
	while (pos != 0)
		AddHead(pNewList->GetPrev(pos));
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::AddTail(CList* pNewList)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 842));
	do { if (!(pNewList != 0) && AfxAssertFailedLine(_szAfxTempl, 843)) __asm { int 3 }; } while (0);
	(::AfxAssertValidObject(pNewList, _szAfxTempl, 844));

	
	POSITION pos = pNewList->GetHeadPosition();
	while (pos != 0)
		AddTail(pNewList->GetNext(pos));
}

template<class TYPE, class ARG_TYPE>
TYPE CList<TYPE, ARG_TYPE>::RemoveHead()
{
	(::AfxAssertValidObject(this, _szAfxTempl, 855));
	do { if (!(m_pNodeHead != 0) && AfxAssertFailedLine(_szAfxTempl, 856)) __asm { int 3 }; } while (0);  
	do { if (!(AfxIsValidAddress(m_pNodeHead, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 857)) __asm { int 3 }; } while (0);

	CNode* pOldNode = m_pNodeHead;
	TYPE returnValue = pOldNode->data;

	m_pNodeHead = pOldNode->pNext;
	if (m_pNodeHead != 0)
		m_pNodeHead->pPrev = 0;
	else
		m_pNodeTail = 0;
	FreeNode(pOldNode);
	return returnValue;
}

template<class TYPE, class ARG_TYPE>
TYPE CList<TYPE, ARG_TYPE>::RemoveTail()
{
	(::AfxAssertValidObject(this, _szAfxTempl, 874));
	do { if (!(m_pNodeTail != 0) && AfxAssertFailedLine(_szAfxTempl, 875)) __asm { int 3 }; } while (0);  
	do { if (!(AfxIsValidAddress(m_pNodeTail, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 876)) __asm { int 3 }; } while (0);

	CNode* pOldNode = m_pNodeTail;
	TYPE returnValue = pOldNode->data;

	m_pNodeTail = pOldNode->pPrev;
	if (m_pNodeTail != 0)
		m_pNodeTail->pNext = 0;
	else
		m_pNodeHead = 0;
	FreeNode(pOldNode);
	return returnValue;
}

template<class TYPE, class ARG_TYPE>
POSITION CList<TYPE, ARG_TYPE>::InsertBefore(POSITION position, ARG_TYPE newElement)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 893));

	if (position == 0)
		return AddHead(newElement); 

	
	CNode* pOldNode = (CNode*) position;
	CNode* pNewNode = NewNode(pOldNode->pPrev, pOldNode);
	pNewNode->data = newElement;

	if (pOldNode->pPrev != 0)
	{
		do { if (!(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 905)) __asm { int 3 }; } while (0);
		pOldNode->pPrev->pNext = pNewNode;
	}
	else
	{
		do { if (!(pOldNode == m_pNodeHead) && AfxAssertFailedLine(_szAfxTempl, 910)) __asm { int 3 }; } while (0);
		m_pNodeHead = pNewNode;
	}
	pOldNode->pPrev = pNewNode;
	return (POSITION) pNewNode;
}

template<class TYPE, class ARG_TYPE>
POSITION CList<TYPE, ARG_TYPE>::InsertAfter(POSITION position, ARG_TYPE newElement)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 920));

	if (position == 0)
		return AddTail(newElement); 

	
	CNode* pOldNode = (CNode*) position;
	do { if (!(AfxIsValidAddress(pOldNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 927)) __asm { int 3 }; } while (0);
	CNode* pNewNode = NewNode(pOldNode, pOldNode->pNext);
	pNewNode->data = newElement;

	if (pOldNode->pNext != 0)
	{
		do { if (!(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 933)) __asm { int 3 }; } while (0);
		pOldNode->pNext->pPrev = pNewNode;
	}
	else
	{
		do { if (!(pOldNode == m_pNodeTail) && AfxAssertFailedLine(_szAfxTempl, 938)) __asm { int 3 }; } while (0);
		m_pNodeTail = pNewNode;
	}
	pOldNode->pNext = pNewNode;
	return (POSITION) pNewNode;
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::RemoveAt(POSITION position)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 948));

	CNode* pOldNode = (CNode*) position;
	do { if (!(AfxIsValidAddress(pOldNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 951)) __asm { int 3 }; } while (0);

	
	if (pOldNode == m_pNodeHead)
	{
		m_pNodeHead = pOldNode->pNext;
	}
	else
	{
		do { if (!(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 960)) __asm { int 3 }; } while (0);
		pOldNode->pPrev->pNext = pOldNode->pNext;
	}
	if (pOldNode == m_pNodeTail)
	{
		m_pNodeTail = pOldNode->pPrev;
	}
	else
	{
		do { if (!(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 969)) __asm { int 3 }; } while (0);
		pOldNode->pNext->pPrev = pOldNode->pPrev;
	}
	FreeNode(pOldNode);
}

template<class TYPE, class ARG_TYPE>
POSITION CList<TYPE, ARG_TYPE>::FindIndex(int nIndex) const
{
	(::AfxAssertValidObject(this, _szAfxTempl, 978));
	do { if (!(nIndex >= 0) && AfxAssertFailedLine(_szAfxTempl, 979)) __asm { int 3 }; } while (0);

	if (nIndex >= m_nCount)
		return 0;  

	CNode* pNode = m_pNodeHead;
	while (nIndex--)
	{
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 987)) __asm { int 3 }; } while (0);
		pNode = pNode->pNext;
	}
	return (POSITION) pNode;
}

template<class TYPE, class ARG_TYPE>
POSITION CList<TYPE, ARG_TYPE>::Find(ARG_TYPE searchValue, POSITION startAfter) const
{
	(::AfxAssertValidObject(this, _szAfxTempl, 996));

	CNode* pNode = (CNode*) startAfter;
	if (pNode == 0)
	{
		pNode = m_pNodeHead;  
	}
	else
	{
		do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 1005)) __asm { int 3 }; } while (0);
		pNode = pNode->pNext;  
	}

	for (; pNode != 0; pNode = pNode->pNext)
		if (CompareElements(&pNode->data, &searchValue))
			return (POSITION)pNode;
	return 0;
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::Serialize(CArchive& ar)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 1018));

	CObject::Serialize(ar);

	if (ar.IsStoring())
	{
		ar.WriteCount(m_nCount);
		for (CNode* pNode = m_pNodeHead; pNode != 0; pNode = pNode->pNext)
		{
			do { if (!(AfxIsValidAddress(pNode, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 1027)) __asm { int 3 }; } while (0);
			SerializeElements(ar, &pNode->data, 1);
		}
	}
	else
	{
		DWORD nNewCount = ar.ReadCount();
		TYPE newData;
		while (nNewCount--)
		{
			SerializeElements(ar, &newData, 1);
			AddTail(newData);
		}
	}
}


template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::Dump(CDumpContext& dc) const
{
	CObject::Dump(dc);

	dc << "with " << m_nCount << " elements";
	if (dc.GetDepth() > 0)
	{
		POSITION pos = GetHeadPosition();
		while (pos != 0)
		{
			dc << "\n";
			DumpElements(dc, &((CList*)this)->GetNext(pos), 1);
		}
	}

	dc << "\n";
}

template<class TYPE, class ARG_TYPE>
void CList<TYPE, ARG_TYPE>::AssertValid() const
{
	CObject::AssertValid();

	if (m_nCount == 0)
	{
		
		do { if (!(m_pNodeHead == 0) && AfxAssertFailedLine(_szAfxTempl, 1071)) __asm { int 3 }; } while (0);
		do { if (!(m_pNodeTail == 0) && AfxAssertFailedLine(_szAfxTempl, 1072)) __asm { int 3 }; } while (0);
	}
	else
	{
		
		do { if (!(AfxIsValidAddress(m_pNodeHead, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 1077)) __asm { int 3 }; } while (0);
		do { if (!(AfxIsValidAddress(m_pNodeTail, sizeof(CNode))) && AfxAssertFailedLine(_szAfxTempl, 1078)) __asm { int 3 }; } while (0);
	}
}
#line 1082 "C:\\MSDEV\\MFC\\include\\afxtempl.h"




template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
class CMap : public CObject
{
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		KEY key;
		VALUE value;
	};
public:

	CMap(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(ARG_KEY key, VALUE& rValue) const;


	
	VALUE& operator[](ARG_KEY key);

	
	void SetAt(ARG_KEY key, ARG_VALUE newValue);

	
	BOOL RemoveKey(ARG_KEY key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, KEY& rKey, VALUE& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(ARG_KEY, UINT&) const;

public:
	~CMap();
	void Serialize(CArchive&);

	void Dump(CDumpContext&) const;
	void AssertValid() const;
#line 1149 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
};




template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
inline int CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::GetCount() const
	{ return m_nCount; }
template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
inline BOOL CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::IsEmpty() const
	{ return m_nCount == 0; }
template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
inline void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::SetAt(ARG_KEY key, ARG_VALUE newValue)
	{ (*this)[key] = newValue; }
template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
inline POSITION CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
inline UINT CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::GetHashTableSize() const
	{ return m_nHashTableSize; }




template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::CMap(int nBlockSize)
{
	do { if (!(nBlockSize > 0) && AfxAssertFailedLine(_szAfxTempl, 1176)) __asm { int 3 }; } while (0);

	m_pHashTable = 0;
	m_nHashTableSize = 17;  
	m_nCount = 0;
	m_pFreeList = 0;
	m_pBlocks = 0;
	m_nBlockSize = nBlockSize;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::InitHashTable(
	UINT nHashSize, BOOL bAllocNow)



{
	(::AfxAssertValidObject(this, _szAfxTempl, 1193));
	do { if (!(m_nCount == 0) && AfxAssertFailedLine(_szAfxTempl, 1194)) __asm { int 3 }; } while (0);
	do { if (!(nHashSize > 0) && AfxAssertFailedLine(_szAfxTempl, 1195)) __asm { int 3 }; } while (0);

	if (m_pHashTable != 0)
	{
		
		delete[] m_pHashTable;
		m_pHashTable = 0;
	}

	if (bAllocNow)
	{
		m_pHashTable = new(_szAfxTempl, 1206) CAssoc* [nHashSize];
		memset(m_pHashTable, 0, sizeof(CAssoc*) * nHashSize);
	}
	m_nHashTableSize = nHashSize;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::RemoveAll()
{
	(::AfxAssertValidObject(this, _szAfxTempl, 1215));

	if (m_pHashTable != 0)
	{
		
		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)
		{
			CAssoc* pAssoc;
			for (pAssoc = m_pHashTable[nHash]; pAssoc != 0;
			  pAssoc = pAssoc->pNext)
			{
				DestructElements(&pAssoc->value, 1);
				DestructElements(&pAssoc->key, 1);
			}
		}
	}

	
	delete[] m_pHashTable;
	m_pHashTable = 0;

	m_nCount = 0;
	m_pFreeList = 0;
	m_pBlocks->FreeDataChain();
	m_pBlocks = 0;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::~CMap()
{
	RemoveAll();
	do { if (!(m_nCount == 0) && AfxAssertFailedLine(_szAfxTempl, 1246)) __asm { int 3 }; } while (0);
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::CAssoc*
CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::NewAssoc()
{
	if (m_pFreeList == 0)
	{
		
		CPlex* newBlock = CPlex::Create(m_pBlocks, m_nBlockSize, sizeof(CMap::CAssoc));
		
		CMap::CAssoc* pAssoc = (CMap::CAssoc*) newBlock->data();
		
		pAssoc += m_nBlockSize - 1;
		for (int i = m_nBlockSize-1; i >= 0; i--, pAssoc--)
		{
			pAssoc->pNext = m_pFreeList;
			m_pFreeList = pAssoc;
		}
	}
	do { if (!(m_pFreeList != 0) && AfxAssertFailedLine(_szAfxTempl, 1267)) __asm { int 3 }; } while (0);  

	CMap::CAssoc* pAssoc = m_pFreeList;
	m_pFreeList = m_pFreeList->pNext;
	m_nCount++;
	do { if (!(m_nCount > 0) && AfxAssertFailedLine(_szAfxTempl, 1272)) __asm { int 3 }; } while (0);  
	ConstructElements(&pAssoc->key, 1);
	ConstructElements(&pAssoc->value, 1);   
	return pAssoc;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::FreeAssoc(CMap::CAssoc* pAssoc)
{
	DestructElements(&pAssoc->value, 1);
	DestructElements(&pAssoc->key, 1);
	pAssoc->pNext = m_pFreeList;
	m_pFreeList = pAssoc;
	m_nCount--;
	do { if (!(m_nCount >= 0) && AfxAssertFailedLine(_szAfxTempl, 1286)) __asm { int 3 }; } while (0);  

	
	if (m_nCount == 0)
		RemoveAll();
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::CAssoc*
CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::GetAssocAt(ARG_KEY key, UINT& nHash) const

{
	nHash = HashKey(key) % m_nHashTableSize;

	if (m_pHashTable == 0)
		return 0;

	
	CAssoc* pAssoc;
	for (pAssoc = m_pHashTable[nHash]; pAssoc != 0; pAssoc = pAssoc->pNext)
	{
		if (CompareElements(&pAssoc->key, &key))
			return pAssoc;
	}
	return 0;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
BOOL CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::Lookup(ARG_KEY key, VALUE& rValue) const
{
	(::AfxAssertValidObject(this, _szAfxTempl, 1316));

	UINT nHash;
	CAssoc* pAssoc = GetAssocAt(key, nHash);
	if (pAssoc == 0)
		return 0;  

	rValue = pAssoc->value;
	return 1;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
VALUE& CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::operator[](ARG_KEY key)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 1330));

	UINT nHash;
	CAssoc* pAssoc;
	if ((pAssoc = GetAssocAt(key, nHash)) == 0)
	{
		if (m_pHashTable == 0)
			InitHashTable(m_nHashTableSize);

		
		pAssoc = NewAssoc();
		pAssoc->nHashValue = nHash;
		pAssoc->key = key;
		

		
		pAssoc->pNext = m_pHashTable[nHash];
		m_pHashTable[nHash] = pAssoc;
	}
	return pAssoc->value;  
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
BOOL CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::RemoveKey(ARG_KEY key)

{
	(::AfxAssertValidObject(this, _szAfxTempl, 1356));

	if (m_pHashTable == 0)
		return 0;  

	CAssoc** ppAssocPrev;
	ppAssocPrev = &m_pHashTable[HashKey(key) % m_nHashTableSize];

	CAssoc* pAssoc;
	for (pAssoc = *ppAssocPrev; pAssoc != 0; pAssoc = pAssoc->pNext)
	{
		if (CompareElements(&pAssoc->key, &key))
		{
			
			*ppAssocPrev = pAssoc->pNext;  
			FreeAssoc(pAssoc);
			return 1;
		}
		ppAssocPrev = &pAssoc->pNext;
	}
	return 0;  
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::GetNextAssoc(POSITION& rNextPosition,
	KEY& rKey, VALUE& rValue) const
{
	(::AfxAssertValidObject(this, _szAfxTempl, 1383));
	do { if (!(m_pHashTable != 0) && AfxAssertFailedLine(_szAfxTempl, 1384)) __asm { int 3 }; } while (0);  

	CAssoc* pAssocRet = (CAssoc*)rNextPosition;
	do { if (!(pAssocRet != 0) && AfxAssertFailedLine(_szAfxTempl, 1387)) __asm { int 3 }; } while (0);

	if (pAssocRet == (CAssoc*) ((POSITION)-1L))
	{
		
		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)
			if ((pAssocRet = m_pHashTable[nBucket]) != 0)
				break;
		do { if (!(pAssocRet != 0) && AfxAssertFailedLine(_szAfxTempl, 1395)) __asm { int 3 }; } while (0);  
	}

	
	do { if (!(AfxIsValidAddress(pAssocRet, sizeof(CAssoc))) && AfxAssertFailedLine(_szAfxTempl, 1399)) __asm { int 3 }; } while (0);
	CAssoc* pAssocNext;
	if ((pAssocNext = pAssocRet->pNext) == 0)
	{
		
		for (UINT nBucket = pAssocRet->nHashValue + 1;
		  nBucket < m_nHashTableSize; nBucket++)
			if ((pAssocNext = m_pHashTable[nBucket]) != 0)
				break;
	}

	rNextPosition = (POSITION) pAssocNext;

	
	rKey = pAssocRet->key;
	rValue = pAssocRet->value;
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::Serialize(CArchive& ar)
{
	(::AfxAssertValidObject(this, _szAfxTempl, 1420));

	CObject::Serialize(ar);

	if (ar.IsStoring())
	{
		ar.WriteCount(m_nCount);
		if (m_nCount == 0)
			return;  

		do { if (!(m_pHashTable != 0) && AfxAssertFailedLine(_szAfxTempl, 1430)) __asm { int 3 }; } while (0);
		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)
		{
			CAssoc* pAssoc;
			for (pAssoc = m_pHashTable[nHash]; pAssoc != 0;
			  pAssoc = pAssoc->pNext)
			{
				SerializeElements(ar, &pAssoc->key, 1);
				SerializeElements(ar, &pAssoc->value, 1);
			}
		}
	}
	else
	{
		DWORD nNewCount = ar.ReadCount();
		KEY newKey;
		VALUE newValue;
		while (nNewCount--)
		{
			SerializeElements(ar, &newKey, 1);
			SerializeElements(ar, &newValue, 1);
			SetAt(newKey, newValue);
		}
	}
}


template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::Dump(CDumpContext& dc) const
{
	CObject::Dump(dc);

	dc << "with " << m_nCount << " elements";
	if (dc.GetDepth() > 0)
	{
		
		KEY key;
		VALUE val;

		POSITION pos = GetStartPosition();
		while (pos != 0)
		{
			GetNextAssoc(pos, key, val);
			dc << "\n\t[";
			DumpElements(dc, &key, 1);
			dc << "] = ";
			DumpElements(dc, &val, 1);
		}
	}

	dc << "\n";
}

template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
void CMap<KEY, ARG_KEY, VALUE, ARG_VALUE>::AssertValid() const
{
	CObject::AssertValid();

	do { if (!(m_nHashTableSize > 0) && AfxAssertFailedLine(_szAfxTempl, 1488)) __asm { int 3 }; } while (0);
	do { if (!(m_nCount == 0 || m_pHashTable != 0) && AfxAssertFailedLine(_szAfxTempl, 1489)) __asm { int 3 }; } while (0);
		
}
#line 1493 "C:\\MSDEV\\MFC\\include\\afxtempl.h"




template<class BASE_CLASS, class TYPE>
class CTypedPtrArray : public BASE_CLASS
{
public:
	
	TYPE GetAt(int nIndex) const
		{ return (TYPE)BASE_CLASS::GetAt(nIndex); }
	TYPE& ElementAt(int nIndex)
		{ return (TYPE&)BASE_CLASS::ElementAt(nIndex); }
	void SetAt(int nIndex, TYPE ptr)
		{ BASE_CLASS::SetAt(nIndex, ptr); }

	
	void SetAtGrow(int nIndex, TYPE newElement)
	   { BASE_CLASS::SetAtGrow(nIndex, newElement); }
	int Add(TYPE newElement)
	   { return BASE_CLASS::Add(newElement); }
	int Append(const CTypedPtrArray<BASE_CLASS, TYPE>& src)
	   { return BASE_CLASS::Append(src); }
	void Copy(const CTypedPtrArray<BASE_CLASS, TYPE>& src)
		{ BASE_CLASS::Copy(src); }

	
	void InsertAt(int nIndex, TYPE newElement, int nCount = 1)
		{ BASE_CLASS::InsertAt(nIndex, newElement, nCount); }
	void InsertAt(int nStartIndex, CTypedPtrArray<BASE_CLASS, TYPE>* pNewArray)
	   { BASE_CLASS::InsertAt(nStartIndex, pNewArray); }

	
	TYPE operator[](int nIndex) const
		{ return (TYPE)BASE_CLASS::operator[](nIndex); }
	TYPE& operator[](int nIndex)
		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }
};




template<class BASE_CLASS, class TYPE>
class CTypedPtrList : public BASE_CLASS
{
public:

	CTypedPtrList(int nBlockSize = 10)
		: BASE_CLASS(nBlockSize) { }

	
	TYPE& GetHead()
		{ return (TYPE&)BASE_CLASS::GetHead(); }
	TYPE GetHead() const
		{ return (TYPE)BASE_CLASS::GetHead(); }
	TYPE& GetTail()
		{ return (TYPE&)BASE_CLASS::GetTail(); }
	TYPE GetTail() const
		{ return (TYPE)BASE_CLASS::GetTail(); }

	
	TYPE RemoveHead()
		{ return (TYPE)BASE_CLASS::RemoveHead(); }
	TYPE RemoveTail()
		{ return (TYPE)BASE_CLASS::RemoveTail(); }

	
	POSITION AddHead(TYPE newElement)
		{ return BASE_CLASS::AddHead(newElement); }
	POSITION AddTail(TYPE newElement)
		{ return BASE_CLASS::AddTail(newElement); }

	
	void AddHead(CTypedPtrList<BASE_CLASS, TYPE>* pNewList)
		{ BASE_CLASS::AddHead(pNewList); }
	void AddTail(CTypedPtrList<BASE_CLASS, TYPE>* pNewList)
		{ BASE_CLASS::AddTail(pNewList); }

	
	TYPE& GetNext(POSITION& rPosition)
		{ return (TYPE&)BASE_CLASS::GetNext(rPosition); }
	TYPE GetNext(POSITION& rPosition) const
		{ return (TYPE)BASE_CLASS::GetNext(rPosition); }
	TYPE& GetPrev(POSITION& rPosition)
		{ return (TYPE&)BASE_CLASS::GetPrev(rPosition); }
	TYPE GetPrev(POSITION& rPosition) const
		{ return (TYPE)BASE_CLASS::GetPrev(rPosition); }

	
	TYPE& GetAt(POSITION position)
		{ return (TYPE&)BASE_CLASS::GetAt(position); }
	TYPE GetAt(POSITION position) const
		{ return (TYPE)BASE_CLASS::GetAt(position); }
	void SetAt(POSITION pos, TYPE newElement)
		{ BASE_CLASS::SetAt(pos, newElement); }
};




template<class BASE_CLASS, class KEY, class VALUE>
class CTypedPtrMap : public BASE_CLASS
{
public:


	CTypedPtrMap(int nBlockSize = 10)
		: BASE_CLASS(nBlockSize) { }

	
	BOOL Lookup(BASE_CLASS::BASE_ARG_KEY key, VALUE& rValue) const
		{ return BASE_CLASS::Lookup(key, (BASE_CLASS::BASE_VALUE&)rValue); }

	
	VALUE& operator[](BASE_CLASS::BASE_ARG_KEY key)
		{ return (VALUE&)BASE_CLASS::operator[](key); }

	
	void SetAt(KEY key, VALUE newValue)
		{ BASE_CLASS::SetAt(key, newValue); }

	
	BOOL RemoveKey(KEY key)
		{ return BASE_CLASS::RemoveKey(key); }

	
	void GetNextAssoc(POSITION& rPosition, KEY& rKey, VALUE& rValue) const
		{ BASE_CLASS::GetNextAssoc(rPosition, (BASE_CLASS::BASE_KEY&)rKey,
			(BASE_CLASS::BASE_VALUE&)rValue); }
};













#pragma pack(pop)
#line 1638 "C:\\MSDEV\\MFC\\include\\afxtempl.h"


#pragma component(minrebuild, on)
#line 1642 "C:\\MSDEV\\MFC\\include\\afxtempl.h"

#pragma component(mintypeinfo, off)
#line 1645 "C:\\MSDEV\\MFC\\include\\afxtempl.h"

#line 1647 "C:\\MSDEV\\MFC\\include\\afxtempl.h"


#line 11 ".\\inc\\stdafx.h"
#line 5 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 ".\\inc\\fotobrow.h"










#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\resource.h"














































































































































































































































































































































#line 12 ".\\inc\\fotobrow.h"


#line 1 ".\\inc\\editbar.h"








#line 1 ".\\inc\\searchbx.h"








class CSearchBox : public CComboBox
{

public:
	CSearchBox();


public:


public:


	
	
	public:
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	


public:
	virtual ~CSearchBox();

	
protected:
	
		
	

	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};


#line 43 ".\\inc\\searchbx.h"
#line 10 ".\\inc\\editbar.h"
#line 1 ".\\inc\\listerbx.h"








class CListerBox : public CComboBox
{

public:
	CListerBox();


public:


public:


	
	
	public:
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	


public:
	virtual ~CListerBox();

	
protected:
	
		
	

	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};


#line 43 ".\\inc\\listerbx.h"
#line 11 ".\\inc\\editbar.h"




class CEditBar : public CToolBar
{

public:
	BOOL m_bColor;
	CSearchBox m_SearchBox;


	CEditBar();
	BOOL Init(CWnd* pParentWnd, BOOL bColor, BOOL bToolTips);
	void SetColor(BOOL Yes);
	BOOL SetHorizontal();
	BOOL SetVertical();
	int AddBundleString(const char *);


public:


public:


	
	
	


public:
	CRect m_rectInsideVert;
	CRect m_rectInsideHorz;
	CSize m_sizeVert;
	CSize m_sizeHorz;

	virtual ~CEditBar();
	virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz);

	
protected:
	
	 void OnSize(UINT nType, int cx, int cy);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};


#line 61 ".\\inc\\editbar.h"
#line 15 ".\\inc\\fotobrow.h"
#line 1 ".\\inc\\dib.h"








class CDIB : public CObject
{
    protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static  CRuntimeClass classCDIB; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject(); friend CArchive& __stdcall operator>>(CArchive& ar, CDIB* &pOb);
public:
    CDIB();
    ~CDIB();

    BITMAPINFO* GetBitmapInfoAddress()
        {return m_pBMI;}                        
    void* GetBitsAddress()
        {return m_pBits;}                       
    RGBQUAD* GetClrTabAddress()
        {return (LPRGBQUAD)(((BYTE*)(m_pBMI)) 
            + sizeof(BITMAPINFOHEADER));}       
    int GetNumClrEntries();                     
    BOOL Create(int width, int height);         
    BOOL Create(BITMAPINFO* pBMI, BYTE *pBits); 
    void* GetPixelAddress(int x, int y);
    virtual BOOL Load(CFile* fp);               
    virtual BOOL Load(char* pszFileName = 0);
    virtual void Serialize(CArchive& ar);
    virtual void Draw(CDC* pDC, int x, int y);
    virtual void DrawZoom(CDC* pDC, int x, int y, int srcx, int srcy);
    virtual int GetWidth() {return DibWidth();}   
    virtual int GetHeight() {return DibHeight();} 
    virtual int MapColorsToPalette(CPalette *pPal);
    virtual void GetRect(CRect* pRect);
    virtual void CopyBits(CDIB* pDIB, 
                          int xd, int yd,
                          int w,  int h,
                          int xs, int ys,
                          COLORREF clrTrans = 0xFFFFFFFF);
	void SetScale(float scale) { m_scale = scale; }

protected:
    BITMAPINFO* m_pBMI;         
    BYTE* m_pBits;              
    BOOL  m_bMyBits;            
	float m_scale;
private:
    int DibWidth()
        {return m_pBMI->bmiHeader.biWidth;}
    int DibHeight() 
        {return m_pBMI->bmiHeader.biHeight;}
    int StorageWidth()
        {return (m_pBMI->bmiHeader.biWidth + 3) & ~3;}
};

#line 58 ".\\inc\\dib.h"
#line 16 ".\\inc\\fotobrow.h"
#line 1 ".\\inc\\dibpal.h"








#line 1 ".\\inc\\dib.h"

























































#line 10 ".\\inc\\dibpal.h"

class CDIBPal : public CPalette
{
public:
    CDIBPal();
    ~CDIBPal();
    BOOL Create(CDIB* pDIB);            
    int GetNumColors();                 
                                        
    void Draw(CDC* pDC, CRect* pRect, BOOL bBkgnd = 0); 
    BOOL SetSysPalColors();
};

#line 24 ".\\inc\\dibpal.h"

#line 17 ".\\inc\\fotobrow.h"
#line 1 ".\\inc\\fotogdoc.h"









class CFotogDoc : public CDocument
{
protected:
	CFotogDoc();           
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const  CRuntimeClass classCFotogDoc; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
	CPalette *m_pal;


public:


public:
	CPalette * GetPalette() { return m_pal; }


	
	
	public:
	virtual void OnFinalRelease();
	virtual void OnCloseDocument();
	virtual BOOL OnOpenDocument(LPCTSTR lpszPathName);
	protected:
	virtual BOOL OnNewDocument();
	


public:
	virtual ~CFotogDoc();
	virtual void Serialize(CArchive& ar);   

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 43 ".\\inc\\fotogdoc.h"

	
protected:
	
		
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
	
	
		
	
	private: static const AFX_DISPMAP_ENTRY _dispatchEntries[]; static UINT _dispatchEntryCount; static DWORD _dwStockPropMask; protected: static  const AFX_DISPMAP dispatchMap; static const AFX_DISPMAP* __stdcall _GetBaseDispatchMap(); virtual const AFX_DISPMAP* GetDispatchMap() const;
};

#line 58 ".\\inc\\fotogdoc.h"
#line 18 ".\\inc\\fotobrow.h"

#line 1 ".\\inc\\common.h"



#pragma warning (disable : 4244)
#pragma pack (4)
struct EnvStrings
{
	char dbPath[256];
	char imgPath[256];
	char projectID[256];
	char imageReductionFactor[256];
};

typedef struct {
	char name[60];
	double x,y,z;
	double dx,dy,dz,dist;
	char sz_x[30], sz_y[30], sz_z[30];
	char sz_dx[30], sz_dy[30], sz_dz[30];
	char sz_dist[30];
	double std_dev_x, std_dev_y, std_dev_z;
	double ray_miss_dist;

} GridRowData;

typedef struct {
	char name[60];
	double east_begin, north_begin, height_begin;
	double east_end, north_end, height_end;
	char sz_east_begin[30], sz_north_begin[30], sz_height_begin[30];
	char sz_east_end[30], sz_north_end[30], sz_height_end[30];
	long dba;
} ColumnData;

typedef struct {
	char name[60];
	double SW_east, SW_north, SW_height;
	double NE_east, NE_north, NE_height;
	char szSW_east[30], szSW_north[30], szSW_height[30];
	char szNE_east[30], szNE_north[30], szNE_height[30];
	long dba;
} ZoneData;
#pragma pack ()



#line 1 ".\\inc\\../triton/tritont.hpp"



#line 1 ".\\inc\\../triton/triton.hpp"



#line 1 "c:\\rom32\\ominc\\storedb.hpp"











#line 1 "c:\\rom32\\ominc\\vpp.hpp"



























#line 29 "c:\\rom32\\ominc\\vpp.hpp"










#line 1 "c:\\rom32\\ominc\\mscdef.hpp"










#line 12 "c:\\rom32\\ominc\\mscdef.hpp"









#line 22 "c:\\rom32\\ominc\\mscdef.hpp"












#line 35 "c:\\rom32\\ominc\\mscdef.hpp"








#line 44 "c:\\rom32\\ominc\\mscdef.hpp"
#line 45 "c:\\rom32\\ominc\\mscdef.hpp"

















typedef  int  jmp_buf[9];


extern "C" int  __cdecl setjmp(jmp_buf);
extern "C" void __cdecl longjmp(jmp_buf, int);
#line 40 "c:\\rom32\\ominc\\vpp.hpp"
#line 41 "c:\\rom32\\ominc\\vpp.hpp"

























#line 67 "c:\\rom32\\ominc\\vpp.hpp"

#line 69 "c:\\rom32\\ominc\\vpp.hpp"

extern "C" {
#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 72 "c:\\rom32\\ominc\\vpp.hpp"
};





#line 79 "c:\\rom32\\ominc\\vpp.hpp"



#line 83 "c:\\rom32\\ominc\\vpp.hpp"



































#line 119 "c:\\rom32\\ominc\\vpp.hpp"





#line 125 "c:\\rom32\\ominc\\vpp.hpp"
#line 126 "c:\\rom32\\ominc\\vpp.hpp"




#line 131 "c:\\rom32\\ominc\\vpp.hpp"
#line 132 "c:\\rom32\\ominc\\vpp.hpp"








#line 141 "c:\\rom32\\ominc\\vpp.hpp"
#line 142 "c:\\rom32\\ominc\\vpp.hpp"




#line 147 "c:\\rom32\\ominc\\vpp.hpp"
#line 148 "c:\\rom32\\ominc\\vpp.hpp"

extern "C" {
#line 1 "c:\\rdm32\\winclude\\vista.h"















#line 17 "c:\\rdm32\\winclude\\vista.h"

























































































































































typedef short DB_SHORT;




typedef unsigned short  DB_USHORT;
typedef unsigned int    DB_UINT;
typedef unsigned long   DB_ULONG;
typedef int             DB_BOOLEAN;



















































#line 231 "c:\\rdm32\\winclude\\vista.h"


























#line 258 "c:\\rdm32\\winclude\\vista.h"
#line 259 "c:\\rdm32\\winclude\\vista.h"
#line 260 "c:\\rdm32\\winclude\\vista.h"












#line 273 "c:\\rdm32\\winclude\\vista.h"






#line 280 "c:\\rdm32\\winclude\\vista.h"







#line 1 "C:\\MSDEV\\INCLUDE\\windows.h"


































































































































































































#line 288 "c:\\rdm32\\winclude\\vista.h"
#line 1 "C:\\MSDEV\\INCLUDE\\windowsx.h"














extern "C" {            
#line 17 "C:\\MSDEV\\INCLUDE\\windowsx.h"


















































































#line 100 "C:\\MSDEV\\INCLUDE\\windowsx.h"
















































































































































































































































































#line 373 "C:\\MSDEV\\INCLUDE\\windowsx.h"






































































































































































































































































































































































































































































































































































#line 924 "C:\\MSDEV\\INCLUDE\\windowsx.h"




































































































#line 1025 "C:\\MSDEV\\INCLUDE\\windowsx.h"






































































#line 1096 "C:\\MSDEV\\INCLUDE\\windowsx.h"

























































#line 1154 "C:\\MSDEV\\INCLUDE\\windowsx.h"


















































































































































}                       
#line 1302 "C:\\MSDEV\\INCLUDE\\windowsx.h"

#line 1304 "C:\\MSDEV\\INCLUDE\\windowsx.h"
#line 289 "c:\\rdm32\\winclude\\vista.h"

#line 291 "c:\\rdm32\\winclude\\vista.h"






















#line 314 "c:\\rdm32\\winclude\\vista.h"






















#line 337 "c:\\rdm32\\winclude\\vista.h"








































































































#pragma pack(1)








#line 451 "c:\\rdm32\\winclude\\vista.h"

typedef struct lock_desc
{
   HANDLE handle;
   short lock_cnt;
   char type;              
} lock_desc;


#pragma pack()







#line 469 "c:\\rdm32\\winclude\\vista.h"
















#pragma pack(1)








#line 495 "c:\\rdm32\\winclude\\vista.h"

typedef struct
{
   char  *ptr;
   lock_desc ld;
} CHAR_P;
typedef struct
{
   DB_ULONG  *ptr;
   lock_desc ld;
} DB_ADDR_P;


typedef struct
{
   struct TASK_S  *ptr;
   lock_desc ld;
} TASK_P;
typedef struct
{
   void  *ptr;
   lock_desc ld;
} QTASK_P;

typedef struct DB_TASK_S
{
   TASK_P v;
   QTASK_P q;
}  DB_TASK;







#pragma pack()








#line 541 "c:\\rdm32\\winclude\\vista.h"











#line 553 "c:\\rdm32\\winclude\\vista.h"
















extern DB_TASK Currtask;








#pragma pack(1)








#line 588 "c:\\rdm32\\winclude\\vista.h"


typedef struct lock_request
{
   int item;                           
   char type;                          
}  LOCK_REQUEST;



#pragma pack()







#line 607 "c:\\rdm32\\winclude\\vista.h"





















extern "C"
{
#line 631 "c:\\rdm32\\winclude\\vista.h"

typedef void ( __stdcall * GFREEPROC) (HANDLE);

typedef void ( __stdcall  * ERRORPROC) (int ,char  *);

#line 1 "c:\\rdm32\\winclude\\dproto.h"


















int   __stdcall d_decode_dba(DB_ULONG ,short  * ,unsigned long  *);
int   __stdcall d_encode_dba(short ,unsigned long ,DB_ULONG  *);
int   __stdcall d_trbound(void);
int   __stdcall d_trlog(int ,long ,const char  * ,int);
int   __stdcall d_trmark(void);
int   __stdcall d_troff(void);
int   __stdcall d_tron(void);



#line 30 "c:\\rdm32\\winclude\\dproto.h"











#line 637 "c:\\rdm32\\winclude\\vista.h"
#line 1 "c:\\rdm32\\winclude\\lockcomm.h"











typedef int (__stdcall  * COMM_FUNC)(int ,DB_TASK  *);

typedef struct COMM_TYPES_S
{
   char  *name;
   COMM_FUNC comm_func;
} COMM_TYPES;


int __stdcall lmcnonet_lockcomm(int ,DB_TASK  *);
int __stdcall lmcusrt_lockcomm(int ,DB_TASK  *);
int __stdcall lmcnetbt_lockcomm(int ,DB_TASK  *);
int __stdcall lmcit_lockcomm(int ,DB_TASK  *);
int __stdcall lmcgt_lockcomm(int ,DB_TASK  *);
int __stdcall lmcspxt_lockcomm(int ,DB_TASK  *);
int __stdcall tcpt_lockcomm(int ,DB_TASK  *);
int __stdcall ipt_lockcomm(int ,DB_TASK  *);
int __stdcall semt_lockcomm(int ,DB_TASK  *);
int __stdcall lmcvt_lockcomm(int ,DB_TASK  *);
int __stdcall lmcqt_lockcomm(int ,DB_TASK  *);
int __stdcall lmcnovt_lockcomm(int ,DB_TASK  *);










extern const COMM_TYPES lockcomm_type[13];

























































































































































#line 198 "c:\\rdm32\\winclude\\lockcomm.h"






























#line 229 "c:\\rdm32\\winclude\\lockcomm.h"












#line 638 "c:\\rdm32\\winclude\\vista.h"

#line 1 "c:\\rdm32\\winclude\\task.h"











int   __stdcall dt_checkid(char  * ,DB_TASK  *);
int   __stdcall dt_close(DB_TASK  *);
int   __stdcall dt_closeall(DB_TASK  *);
int   __stdcall dt_closetask(DB_TASK  *);
int   __stdcall   dt_cmstat(int ,DB_TASK  * ,int);
int   __stdcall   dt_cmtype(int ,int  * ,DB_TASK  * ,int);
int   __stdcall   dt_costat(int ,DB_TASK  * ,int);
int   __stdcall   dt_connect(int ,DB_TASK  * ,int);
int   __stdcall   dt_cotype(int ,int  * ,DB_TASK  * ,int);
int   __stdcall   dt_crget(DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_crread(long ,void  * ,DB_TASK  * ,int);
int   __stdcall   dt_crset(DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_crstat(DB_TASK  * ,int);
int   __stdcall   dt_crtype(int  * ,DB_TASK  * ,int);
int   __stdcall   dt_crwrite(long ,void  * ,DB_TASK  * ,int);
int   __stdcall   dt_csmget(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_csmread(int ,long ,void  * ,DB_TASK  * ,int);
int   __stdcall   dt_csmset(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_csmwrite(int ,long ,const void  * ,DB_TASK  * ,int);
int   __stdcall   dt_csoget(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_csoread(int ,long ,void  * ,DB_TASK  * ,int);
int   __stdcall   dt_csoset(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_csowrite(int ,long ,const void  * ,DB_TASK  * ,int);
int   __stdcall   dt_csstat(int ,DB_TASK  * ,int);
int   __stdcall   dt_ctscm(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_ctsco(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_ctscr(DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall dt_ctbpath(const char  * ,DB_TASK  *);
int   __stdcall   dt_curkey(DB_TASK  * ,int);
int   __stdcall dt_dbdpath(const char  * ,DB_TASK  *);
int   __stdcall dt_dbfpath(const char  * ,DB_TASK  *);
int   __stdcall dt_dblog(const char  * ,DB_TASK  *);
int   __stdcall dt_dbtaf(const char  * ,DB_TASK  *);
int   __stdcall dt_dbtmp(const char  * ,DB_TASK  *);
int   __stdcall dt_dbnum(const char  * ,DB_TASK  *);
int   __stdcall dt_dbuserid(const char  * ,DB_TASK  *);
int   __stdcall   dt_delete(DB_TASK  * ,int);
int   __stdcall dt_destroy(const char  * ,DB_TASK  *);
int   __stdcall   dt_discon(int ,DB_TASK  * ,int);
int   __stdcall   dt_disdel(DB_TASK  * ,int);
int   __stdcall   dt_fillnew(int ,const void  * ,DB_TASK  * ,int);
int   __stdcall   dt_findco(int ,DB_TASK  * ,int);
int   __stdcall   dt_findfm(int ,DB_TASK  * ,int);
int   __stdcall   dt_findlm(int ,DB_TASK  * ,int);
int   __stdcall   dt_findnm(int ,DB_TASK  * ,int);
int   __stdcall   dt_findpm(int ,DB_TASK  * ,int);
int   __stdcall   dt_fldnum(int  * ,long ,DB_TASK  * ,int);
int   __stdcall dt_freeall(DB_TASK  *);
int   __stdcall   dt_gtscm(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_gtsco(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_gtscr(DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_gtscs(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall dt_iclose(DB_TASK  * ,int);
int   __stdcall   dt_initialize(DB_TASK  * ,int);
int   __stdcall   dt_initfile(DB_SHORT ,DB_TASK  * ,int);
int   __stdcall dt_internals(DB_TASK  * ,int ,int ,int ,void  * ,unsigned);
int   __stdcall dt_iopen(const char  * ,DB_TASK  *);
int   __stdcall   dt_ismember(int ,DB_TASK  * ,int);
int   __stdcall   dt_isowner(int ,DB_TASK  * ,int);
int   __stdcall   dt_keybuild(DB_TASK  * ,int);
int   __stdcall   dt_keydel(long ,DB_TASK  * ,int);
int   __stdcall   dt_keyexist(long ,DB_TASK  * ,int);
int   __stdcall   dt_keyfind(long ,const void  * ,DB_TASK  * ,int);
int   __stdcall   dt_keyfree(long ,DB_TASK  * ,int);
int   __stdcall   dt_keyfrst(long ,DB_TASK  * ,int);
int   __stdcall   dt_keylast(long ,DB_TASK  * ,int);
int   __stdcall   dt_keylock(long ,char  * ,DB_TASK  * ,int);
int   __stdcall   dt_keylstat(long ,char  * ,DB_TASK  * ,int);
int   __stdcall   dt_keynext(long ,DB_TASK  * ,int);
int   __stdcall   dt_keyprev(long ,DB_TASK  * ,int);
int   __stdcall dt_keyread(void  * ,DB_TASK  *);
int   __stdcall   dt_keystore(long ,DB_TASK  * ,int);
int   __stdcall dt_lmstat(char  * ,int  * ,DB_TASK  *);
int   __stdcall   dt_lock(int ,LOCK_REQUEST  * ,DB_TASK  * ,int);
int   __stdcall dt_lockcomm(int ,DB_TASK  *);
int   __stdcall dt_lockmgr(const char  * ,DB_TASK  *);
int   __stdcall   dt_makenew(int ,DB_TASK  * ,int);
int   __stdcall dt_mapchar(unsigned char ,unsigned char ,const char  * ,unsigned char ,DB_TASK  *);
int   __stdcall   dt_members(int ,long  * ,DB_TASK  * ,int);
int   __stdcall dt_newcache(DB_TASK  * ,int);
int   __stdcall dt_off_opt(unsigned long ,DB_TASK  *);
int   __stdcall dt_on_opt(unsigned long ,DB_TASK  *);
int   __stdcall dt_open(const char  * ,const char  * ,DB_TASK  *);
int   __stdcall dt_opentask(DB_TASK  *);
int   __stdcall dt_rdmini(const char  * ,DB_TASK  *);
int   __stdcall   dt_recfree(int ,DB_TASK  * ,int);
int   __stdcall   dt_recfrst(int ,DB_TASK  * ,int);
int   __stdcall   dt_reclast(int ,DB_TASK  * ,int);
int   __stdcall   dt_reclock(int ,char  * ,DB_TASK  * ,int);
int   __stdcall   dt_reclstat(int ,char  * ,DB_TASK  * ,int);
int   __stdcall   dt_recnext(DB_TASK  * ,int);
int   __stdcall   dt_recnum(int  * ,int  ,DB_TASK  * ,int);
int   __stdcall dt_recover(const char  * ,DB_TASK  *);
int   __stdcall   dt_recprev(DB_TASK  * ,int);
int   __stdcall   dt_recread(void  * ,DB_TASK  * ,int);
int   __stdcall   dt_recset(int ,DB_TASK  * ,int);
int   __stdcall dt_recstat(DB_ULONG ,DB_ULONG ,DB_TASK  * ,int);
int   __stdcall   dt_recwrite(const void  * ,DB_TASK  * ,int);
int   __stdcall dt_renfile(const char  * ,DB_SHORT ,const char  * ,DB_TASK  *);
int   __stdcall dt_renclean(DB_TASK  *);
int   __stdcall dt_rlbclr(DB_TASK  * ,int);
int   __stdcall dt_rlbset(DB_TASK  * ,int);
int   __stdcall dt_rlbtst(DB_TASK  * ,int);
int   __stdcall dt_setdb(int ,DB_TASK  *);
int   __stdcall   dt_setfree(int ,DB_TASK  * ,int);
int   __stdcall dt_setfiles(int ,DB_TASK  *);
int   __stdcall   dt_setkey(long ,const void  * ,DB_TASK  * ,int);
int   __stdcall   dt_setlock(int ,char  * ,DB_TASK  * ,int);
int   __stdcall   dt_setlstat(int ,char  * ,DB_TASK  * ,int);
int   __stdcall   dt_setmm(int ,int ,DB_TASK  * ,int);
int   __stdcall   dt_setmo(int ,int ,DB_TASK  * ,int);
int   __stdcall   dt_setmr(int ,DB_TASK  * ,int);
int   __stdcall   dt_setnum(int  * ,int  ,DB_TASK  * ,int);
int   __stdcall   dt_setom(int ,int ,DB_TASK  * ,int);
int   __stdcall   dt_setoo(int ,int ,DB_TASK  * ,int);
int   __stdcall   dt_setor(int ,DB_TASK  * ,int);
int   __stdcall dt_setpages(int ,int ,DB_TASK  *);
int   __stdcall   dt_setrm(int ,DB_TASK  * ,int);
int   __stdcall   dt_setro(int ,DB_TASK  * ,int);
int   __stdcall dt_set_dberr(ERRORPROC ,DB_TASK  *);
int   __stdcall dt_sharecache(DB_TASK  * ,DB_TASK  *);
int   __stdcall   dt_stscm(int ,DB_ULONG ,DB_TASK  * ,int);
int   __stdcall   dt_stsco(int ,DB_ULONG ,DB_TASK  * ,int);
int   __stdcall   dt_stscr(DB_ULONG ,DB_TASK  * ,int);
int   __stdcall   dt_stscs(int ,DB_ULONG ,DB_TASK  * ,int);
int   __stdcall dt_timeout(int ,DB_TASK  *);
int   __stdcall dt_trabort(DB_TASK  *);
int   __stdcall dt_trbegin(const char  * ,DB_TASK  *);
int   __stdcall dt_trend(DB_TASK  *);
int   __stdcall   dt_utscm(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_utsco(int ,DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_utscr(DB_ULONG  * ,DB_TASK  * ,int);
int   __stdcall   dt_utscs(int ,DB_ULONG  * ,DB_TASK  * ,int);


int   __stdcall dt_rdcurr(DB_ADDR_P  * ,int  * ,DB_TASK  * ,int);
int   __stdcall dt_rerdcurr(DB_ADDR_P  * ,DB_TASK  * ,int);
int   __stdcall dt_wrcurr(DB_ADDR_P ,DB_TASK  * ,int);













































































































































#line 292 "c:\\rdm32\\winclude\\task.h"











#line 640 "c:\\rdm32\\winclude\\vista.h"


}
#line 644 "c:\\rdm32\\winclude\\vista.h"

#line 646 "c:\\rdm32\\winclude\\vista.h"












#line 151 "c:\\rom32\\ominc\\vpp.hpp"
}


#line 155 "c:\\rom32\\ominc\\vpp.hpp"








			      


#line 167 "c:\\rom32\\ominc\\vpp.hpp"
#line 168 "c:\\rom32\\ominc\\vpp.hpp"


			



enum T_F { False=0, True };
#line 176 "c:\\rom32\\ominc\\vpp.hpp"

const int Fail = -1;





    
    
    
    



enum NavCtrl { FIRST=1, LAST, NEXT, PREV, RESET, NEW };
			      

















typedef DB_ULONG  * PDB_ADDR; typedef DB_ULONG  & RDB_ADDR;;

typedef char  * Pchar; typedef char  & Rchar;;
typedef int  * Pint; typedef int  & Rint;;
typedef long  * Plong; typedef long  & Rlong;;
typedef double  * Pdouble; typedef double  & Rdouble;;
typedef float  * Pfloat; typedef float  & Rfloat;;
typedef short  * Pshort; typedef short  & Rshort;;
typedef void  * Pvoid;

#line 1 "c:\\rom32\\ominc\\verrout.hpp"











    
    
class ErrOutput
{   public:
        int  Out( Pchar );
};

#line 20 "c:\\rom32\\ominc\\verrout.hpp"
#line 220 "c:\\rom32\\ominc\\vpp.hpp"



#line 224 "c:\\rom32\\ominc\\vpp.hpp"
extern ErrOutput Err;
#line 226 "c:\\rom32\\ominc\\vpp.hpp"



#line 230 "c:\\rom32\\ominc\\vpp.hpp"
#line 13 "c:\\rom32\\ominc\\storedb.hpp"
#line 1 "c:\\rom32\\ominc\\vistaobj.hpp"













#line 15 "c:\\rom32\\ominc\\vistaobj.hpp"

#line 1 "c:\\rom32\\ominc\\rdmstobj.hpp"













class __declspec(dllexport) StoreObj; typedef StoreObj  * PStoreObj; typedef StoreObj  & RStoreObj;

class __declspec(dllexport) RDXDbAddr
{
protected:
    DB_ULONG dba;    

public:




    void   Encode( short file, unsigned long slot);   
    void   Decode( Pshort file, unsigned long  *slot); 
							
#line 30 "c:\\rom32\\ominc\\rdmstobj.hpp"
};

class __declspec(dllexport) RDXLockObj
{
public:
    int xLock(char, const RStoreObj);
    int xFreeLock(const RStoreObj);
    char xLockStatus(const RStoreObj);
};

#line 41 "c:\\rom32\\ominc\\rdmstobj.hpp"

#line 17 "c:\\rom32\\ominc\\vistaobj.hpp"
#line 18 "c:\\rom32\\ominc\\vistaobj.hpp"
#line 19 "c:\\rom32\\ominc\\vistaobj.hpp"


class __declspec(dllexport) DbAddr; typedef DbAddr  * PDbAddr; typedef DbAddr  & RDbAddr;;
class __declspec(dllexport) VistaDb; typedef VistaDb  * PVistaDb; typedef VistaDb  & RVistaDb;;

class __declspec(dllexport) DbAddr : public RDXDbAddr
{
protected:
    DbAddr()        { dba = 0; }
public:
    DbAddr(long a)  { dba = a; }
    DbAddr(DB_SHORT file, long slot);	
    DB_ULONG   GetDba()   const       { return dba;   }
    void      SetDba(DB_ULONG dbaddr)    { dba = dbaddr; }
};  

    
    
    
    
    
    
    
    
    

class __declspec(dllexport) VistaObj; typedef VistaObj  * PVistaObj; typedef VistaObj  & RVistaObj;;

class __declspec(dllexport) VistaObj : public DbAddr, public RDXLockObj
{
   PVistaDb   _pdb;

protected:
   int status;             
   VistaObj( PVistaDb pdb = 0 ) { 
     status = 0; 
     _pdb = pdb;
   }  
public:
   void      SetStatus(int s) { status = s; }    
   int       GetStatus()      { return status; }
   virtual   ~VistaObj(){}
   virtual PVistaDb  _GetDb();         
  					       
   virtual PVistaDb  GetDb() { return ( _pdb ? _pdb : _GetDb()); } 
   virtual PVistaDb  SetDb( PVistaDb pdb = 0 ) { return ( _pdb = pdb ); } 

   virtual void            NewObj()=0;        
   virtual void            Write() =0;        
					      
   virtual void            Delete() =0;       
                                              
   
					      
   virtual int        RecType();         
   virtual Pvoid           RecData();         
   virtual long            TotalSize();       
   virtual void            SetDefaultValues();
   virtual void            Read();
   virtual Pchar            RecName() { return ""; }
};

#line 82 "c:\\rom32\\ominc\\vistaobj.hpp"
#line 14 "c:\\rom32\\ominc\\storedb.hpp"
#line 1 "c:\\rom32\\ominc\\vistadb.hpp"










#line 1 "c:\\rom32\\ominc\\vtask.hpp"











#line 1 "c:\\rom32\\ominc\\vpp.hpp"





































































































































































































































#line 13 "c:\\rom32\\ominc\\vtask.hpp"
#line 1 "C:\\MSDEV\\INCLUDE\\malloc.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\malloc.h"






#line 25 "C:\\MSDEV\\INCLUDE\\malloc.h"







#pragma pack(push,8)
#line 34 "C:\\MSDEV\\INCLUDE\\malloc.h"


extern "C" {
#line 38 "C:\\MSDEV\\INCLUDE\\malloc.h"













































#line 84 "C:\\MSDEV\\INCLUDE\\malloc.h"
























typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;

#line 115 "C:\\MSDEV\\INCLUDE\\malloc.h"








__declspec(dllimport) unsigned int * __cdecl __p__amblksiz(void);





#line 130 "C:\\MSDEV\\INCLUDE\\malloc.h"

#line 132 "C:\\MSDEV\\INCLUDE\\malloc.h"




__declspec(dllimport) void *  __cdecl calloc(size_t, size_t);
__declspec(dllimport) void    __cdecl free(void *);
__declspec(dllimport) void *  __cdecl malloc(size_t);
__declspec(dllimport) void *  __cdecl realloc(void *, size_t);


#line 143 "C:\\MSDEV\\INCLUDE\\malloc.h"



void *          __cdecl _alloca(size_t);
__declspec(dllimport) void *  __cdecl _expand(void *, size_t);

__declspec(dllimport) size_t  __cdecl _get_sbh_threshold(void);
__declspec(dllimport) int     __cdecl _set_sbh_threshold(size_t);
__declspec(dllimport) int     __cdecl _heapadd(void *, size_t);
__declspec(dllimport) int     __cdecl _heapchk(void);
__declspec(dllimport) int     __cdecl _heapmin(void);
__declspec(dllimport) int     __cdecl _heapset(unsigned int);
__declspec(dllimport) int     __cdecl _heapwalk(_HEAPINFO *);
__declspec(dllimport) size_t  __cdecl _heapused(size_t *, size_t *);
#line 158 "C:\\MSDEV\\INCLUDE\\malloc.h"
__declspec(dllimport) size_t  __cdecl _msize(void *);




#line 164 "C:\\MSDEV\\INCLUDE\\malloc.h"



#line 168 "C:\\MSDEV\\INCLUDE\\malloc.h"

#line 170 "C:\\MSDEV\\INCLUDE\\malloc.h"






















}
#line 194 "C:\\MSDEV\\INCLUDE\\malloc.h"



#pragma pack(pop)
#line 199 "C:\\MSDEV\\INCLUDE\\malloc.h"

#line 201 "C:\\MSDEV\\INCLUDE\\malloc.h"
#line 14 "c:\\rom32\\ominc\\vtask.hpp"
#line 1 "C:\\MSDEV\\INCLUDE\\string.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\string.h"



















































































































































































































































































#line 15 "c:\\rom32\\ominc\\vtask.hpp"



#line 19 "c:\\rom32\\ominc\\vtask.hpp"

#line 1 "c:\\rom32\\ominc\\rdmtask.hpp"














#line 1 "C:\\MSDEV\\INCLUDE\\malloc.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\malloc.h"























































































































































































#line 16 "c:\\rom32\\ominc\\rdmtask.hpp"
#line 1 "C:\\MSDEV\\INCLUDE\\string.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\string.h"



















































































































































































































































































#line 17 "c:\\rom32\\ominc\\rdmtask.hpp"

inline  Pchar DupStr(Pchar  * dst, const Pchar src)
{ 
    if( src )
    {
       if(*dst) 
           free(*dst); 

       *dst = strdup(src); 
    }

    return(*dst); 
}

inline void FreeStr(Pchar s)
{ 
    if(s) 
        free(s); 
}

class __declspec(dllexport) ActivateTask
{
private:
    Pchar dbd; 
    Pchar dbf; 
    Pchar taf; 
    Pchar log; 
    Pchar uid; 

    void Clr();

protected:
    Pchar SetDbdPath(Pchar p) { return DupStr(&dbd, p); }
    Pchar SetDbfPath(Pchar p) { return DupStr(&dbf, p); }
    Pchar SetTafPath(Pchar p) { return DupStr(&taf, p); }
    Pchar SetLogPath(Pchar p) { return DupStr(&log, p); }
    Pchar SetUID(Pchar p) { return DupStr(&uid, p); }

public:
    Pchar GetDbdPath() { return dbd; }
    Pchar GetDbfPath() { return dbf; }
    Pchar GetTafPath() { return taf; }
    Pchar GetLogPath() { return log; }
    Pchar GetUID() { return uid; }

    ActivateTask( 
                 Pchar srv = (Pchar)0, 
                 Pchar usr = (Pchar)0, 
                 Pchar pwd = (Pchar)0 
                )
                { 
		    uid = dbd = dbf = taf = log = 0;
                }

    ~ActivateTask() 
                {
                }
};

class __declspec(dllexport) ActivateTask; typedef ActivateTask  * PActivateTask; typedef ActivateTask  & RActivateTask;;
class __declspec(dllexport) RDXTask; typedef RDXTask  * PRDXTask; typedef RDXTask  & RRDXTask;;

typedef DB_TASK  * PDB_TASK; typedef DB_TASK  & RDB_TASK;;

class __declspec(dllexport) RDXTask
{
private:
    PDB_TASK  pThisTask;
    int     status;

    void Clr();

    T_F OpenTask();

protected:
    void SetStatus(int s){ status = s;    }

public:

    void   SetPaths( Pchar dbd=0, 
                    Pchar dbf=0, 
                    Pchar taf=0, 
                    Pchar log=0, 
                    Pchar uid=0 ); 
    PDB_TASK  DbTask() { return pThisTask; }

    RDXTask();
    RDXTask(RActivateTask);
    ~RDXTask(); 

    T_F      Okay()          { return (status == 0)? True:False; }
    int      GetStatus()     { return status; }


     int dbdpath  ( Pchar  pc)
     {    
	return :: dt_dbdpath    ( pc, pThisTask );
     }

     int dbfpath  ( Pchar  pc)
     {    
	return :: dt_dbfpath    ( pc, pThisTask );
     }

     int dblog    ( Pchar  pc)
     {    
	return :: dt_dblog      ( pc, pThisTask );
     }

     int dbtaf    ( Pchar  pc)
     {    
	return :: dt_dbtaf       ( pc, pThisTask );
     }

     int dbuserid ( Pchar  pc)
     {    
	return :: dt_dbuserid   ( pc, pThisTask );
     }
    
     int checkid   ( Pchar a)
     {    
	return  :: dt_checkid    (a, pThisTask );
     }
    
     int internals (int topic, int id, int elm, Pvoid ptr, unsigned int size)
     {
    	return :: dt_internals(pThisTask, topic, id, elm, ptr, size);
     }


     int destroy   ( Pchar  pc)
     {    
	return  :: dt_destroy     ( pc, pThisTask );
     }

     int freeall  ()
     {    
	return  :: dt_freeall     ( pThisTask );
     }

     int lockcomm( int locktype)
     {
    	return :: dt_lockcomm       ( locktype, pThisTask);
     }

     int lockmgr( Pchar  id)
     {
        return :: dt_lockmgr       ( id, pThisTask);
     }

#line 168 "c:\\rom32\\ominc\\rdmtask.hpp"
     int off_opt  ( int of)
     {    
	return  :: dt_off_opt     ( of, pThisTask );
     }

     int on_opt   ( unsigned long of )
     {    
	return  :: dt_on_opt      ( of, pThisTask );
     }

















     int recover  ( Pchar  pc)
     {    
	return  :: dt_recover    ( pc, pThisTask );
     }

#line 200 "c:\\rom32\\ominc\\rdmtask.hpp"
     int renfile  ( Pchar  pc, DB_SHORT fid, Pchar  pcc)
     {    
	return  :: dt_renfile    ( pc, fid, pcc, pThisTask );
     }

     int renclean()
     {
	return  :: dt_renclean( pThisTask );
     }

     int setpages   (int dbpages, int ovpages)
     {    
	return  :: dt_setpages ( dbpages, ovpages, pThisTask );
     }

     int setfiles   (int numfiles)
     {    
	return  :: dt_setfiles (numfiles, pThisTask );
     }

     int set_dberr    (ERRORPROC ep)
     {    
	return  :: dt_set_dberr (ep, pThisTask );
     }


     int timeout  ( int sec)
     {    
	return  :: dt_timeout    ( sec, pThisTask );
     }

     int trabort  ()
     {    
	return  :: dt_trabort    ( pThisTask );
     }

     int trbegin    (const Pchar  pc)
     {    
	return  :: dt_trbegin    ( pc, pThisTask );
     }

     int trend    ()
     {    
	return  :: dt_trend      ( pThisTask );
     }

#line 247 "c:\\rom32\\ominc\\rdmtask.hpp"







#line 255 "c:\\rom32\\ominc\\rdmtask.hpp"
};

#line 258 "c:\\rom32\\ominc\\rdmtask.hpp"
#line 21 "c:\\rom32\\ominc\\vtask.hpp"
#line 22 "c:\\rom32\\ominc\\vtask.hpp"
#line 23 "c:\\rom32\\ominc\\vtask.hpp"




class __declspec(dllexport) VistaDb; typedef VistaDb  * PVistaDb; typedef VistaDb  & RVistaDb;;
class __declspec(dllexport) VistaTask; typedef VistaTask  * PVistaTask; typedef VistaTask  & RVistaTask;;



class __declspec(dllexport) TransAction;
class __declspec(dllexport) TransAction; typedef TransAction  * PTransAction; typedef TransAction  & RTransAction;;

enum DbStat { Active = 0, Inactive };

class __declspec(dllexport) VistaTask : public RDXTask
{
friend class TransAction;

private:
    char    OpenType[3];    

    int     DbCount[2];            
    PVistaDb  pDbs[2][15];     

    PTransAction ActTransact;                 

    T_F     Swap(PVistaDb  ,DbStat,DbStat);   
    int     PosInArray   (PVistaDb  , DbStat);
    T_F     AddInactive  (PVistaDb  pDb);     
    PVistaDb  FindDb     ( Pchar name);       
    T_F     RemoveVistaDb( PVistaDb   );      

    void SetTransact(PTransAction p)          
                       { ActTransact = p; }                 
    static PVistaTask pCurrTask;            

protected:
friend VistaDb;                             

    T_F       ActivateDb  ( PVistaDb   );   
    T_F       DeactivateDb( PVistaDb   );   
    Pchar     GetOpenType() { return OpenType; }

    T_F       ActivateAll();                
    T_F       DeactivateAll();       
    static void SetCurrTask(PVistaTask T);

public:
    VistaTask( Pchar opentype );
    VistaTask( Pchar opentype, RActivateTask a );
    ~VistaTask(); 

    PVistaDb  GetDb ( Pchar dbname );     
                                          
    int  GetDbNames(DbStat, Pchar);       
                                          

    T_F   SetUpDb ( Pchar dbname, 
                    PVistaDb  pDb);          
                                                   
    PTransAction GetTransact() { return ActTransact; }  
							
    int GetDbTotNumber() { return DbCount[0]+DbCount[1]; } 
						

    static PVistaTask GetCurrTask();
    virtual void  MakeCurrent();
};

#line 93 "c:\\rom32\\ominc\\vtask.hpp"
#line 12 "c:\\rom32\\ominc\\vistadb.hpp"

typedef unsigned long ULONG;

class __declspec(dllexport) VistaDb; typedef VistaDb  * PVistaDb; typedef VistaDb  & RVistaDb;;        
class __declspec(dllexport) StoreTask; typedef StoreTask  * PStoreTask; typedef StoreTask  & RStoreTask;;        



#line 21 "c:\\rom32\\ominc\\vistadb.hpp"

#line 1 "c:\\rom32\\ominc\\rdmdb.hpp"











#line 1 "c:\\rom32\\ominc\\vpp.hpp"





































































































































































































































#line 13 "c:\\rom32\\ominc\\rdmdb.hpp"

typedef int Rec;
typedef int Set;
typedef long Field;
typedef unsigned long ULONG;

class __declspec(dllexport) VistaTask; typedef VistaTask  * PVistaTask; typedef VistaTask  & RVistaTask;
typedef DB_TASK  * PDB_TASK; typedef DB_TASK  & RDB_TASK;

class __declspec(dllexport) RDXDb
{    
private:
    int         Dbn;        
    PDB_TASK    pDbTask;    

    int         DbStatus;

protected:
    T_F  FirstOpen(Pchar Otype, Pchar DbName);
    T_F  IncrOpen(Pchar Otype, Pchar DbName);
    int  iClose();

    void Init( PVistaTask pVT, Pchar  name );

    void SetDbn(int newdbn)  { Dbn = newdbn ; }

public:
    virtual ~RDXDb();

    int GetDbn() { return Dbn; }
    int   GetDbStatus() { return DbStatus; }

    void  GetSetEntry ( Pvoid pSt, int setnum );  
    void  GetRecEntry ( Pvoid pRt, int recnum );  
    void  GetFldEntry ( Pvoid pFte,long fldnum ); 

    void  GetMembEntry( Pvoid pMt, int membix );  
    void  GetDbEntry( Pvoid pDbe );         

    int GetRecFromIndex( int );   
                                



int recstat    ( DB_ULONG dba, ULONG rts)
{    
	return DbStatus =    :: dt_recstat    ( dba, rts, pDbTask, Dbn );
}


int rlbclr        ( )
{    
	return DbStatus =    :: dt_rlbclr      ( pDbTask, Dbn );
}

int rlbset        ( )
{    
	return DbStatus =    :: dt_rlbset      ( pDbTask, Dbn );
}

int rlbtst        ( )
{    
	return DbStatus =    :: dt_rlbtst      ( pDbTask, Dbn );
}
#line 78 "c:\\rom32\\ominc\\rdmdb.hpp"









int cmstat        ( Set s )
{    
	return DbStatus =    :: dt_cmstat      ( s, pDbTask, Dbn );
}

int cmtype        ( Set s, Rec  * pr )
{    
	return DbStatus =    :: dt_cmtype      ( s, pr , pDbTask, Dbn );
}

int connect    ( Set s )
{    
	return DbStatus =    :: dt_connect     ( s, pDbTask, Dbn );
}

int costat        ( Set s)
{    
	return DbStatus =    :: dt_costat      ( s, pDbTask, Dbn );
}

int cotype        ( Set s, Pint  pt)
{    
	return DbStatus =    :: dt_cotype      ( s, pt, pDbTask, Dbn );
}

int crget        ( PDB_ADDR  pdba)
{    
	return DbStatus =    :: dt_crget       ( pdba, pDbTask, Dbn );
}

int crread        ( Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_crread      ( f,( Pchar )pv , pDbTask, Dbn );
}

int crset        ( PDB_ADDR  pdba)
{    
	return DbStatus =    :: dt_crset       ( pdba, pDbTask, Dbn );
}

int crstat        (  )
{    
	return DbStatus =    :: dt_crstat      ( pDbTask, Dbn );
}

int crtype        ( Pint  pt ) 
{    
	return DbStatus =    :: dt_crtype      ( pt, pDbTask, Dbn );
}

int crwrite    ( Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_crwrite    ( f, ( Pchar ) pv, pDbTask, Dbn );
}

int csmget        ( Set s, PDB_ADDR  pdba)
{    
	return DbStatus =    :: dt_csmget        ( s, pdba, pDbTask, Dbn );
}

int csmread    ( Set s, Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_csmread  ( s, f, ( Pchar )pv, pDbTask, Dbn );
}

int csmset        ( Set s, PDB_ADDR  pdba)
{    
	return DbStatus =    :: dt_csmset        ( s, pdba, pDbTask, Dbn );
}

int csmwrite    ( Set s, Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_csmwrite( s, f, ( Pchar )pv , pDbTask, Dbn );
}

int csoget        ( Set s, PDB_ADDR  pdba)
{    
	return DbStatus =    :: dt_csoget        ( s, pdba, pDbTask, Dbn );
}

int csoread    ( Set s, Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_csoread ( s, f, ( Pchar ) pv, pDbTask, Dbn );
}

int csoset        ( Set s, PDB_ADDR  pdba)
{    
	return DbStatus =    :: dt_csoset      ( s, pdba, pDbTask, Dbn );
}

int csowrite    ( Set s, Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_csowrite ( s, f,( Pchar ) pv, pDbTask, Dbn );
}

int csstat        ( Set s)
{    
	return DbStatus =    :: dt_csstat      ( s, pDbTask, Dbn );
}

int ctbpath        ( Pchar pc )
{    
	return DbStatus =    :: dt_ctbpath      ( pc, pDbTask );
}

int ctscm        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_ctscm       ( s, pts, pDbTask, Dbn );
}

int ctsco        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_ctsco       ( s, pts, pDbTask, Dbn );
}

int ctscr        ( ULONG  * pts)
{    
	return DbStatus =    :: dt_ctscr       ( pts, pDbTask, Dbn );
}

int curkey        ( )
{    
	return DbStatus =    :: dt_curkey      ( pDbTask, Dbn );
}

int d_delete        ( )
{    
	return DbStatus =    :: dt_delete      ( pDbTask, Dbn );
}

int disdel        ( )
{    
	return DbStatus =    :: dt_disdel      ( pDbTask, Dbn );
}

int recnext    ( )
{    
	return DbStatus =    :: dt_recnext     ( pDbTask, Dbn );
}

int recprev    ( )
{    
	return DbStatus =    :: dt_recprev     ( pDbTask, Dbn );
}

int discon        ( Set s )
{    
	return DbStatus =    :: dt_discon      ( s, pDbTask, Dbn );
}

int fillnew    ( Rec r, Pvoid  pv)
{    
	return DbStatus =    :: dt_fillnew    ( r, ( Pchar ) pv, pDbTask, Dbn );
}

int findco        ( Set s)
{    
	return DbStatus =    :: dt_findco      ( s, pDbTask, Dbn );
}

int findfm        ( Set s)
{    
	return DbStatus =    :: dt_findfm      ( s, pDbTask, Dbn );
}

int findlm        ( Set s )
{    
	return DbStatus =    :: dt_findlm      ( s , pDbTask, Dbn );
}

int findnm        ( Set s )
{    
	return DbStatus =    :: dt_findnm      ( s , pDbTask, Dbn );
}

int findpm        ( Set s)
{    
	return DbStatus =    :: dt_findpm      ( s, pDbTask, Dbn );
}

int gtscm        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_gtscm       ( s, pts, pDbTask, Dbn );
}

int gtsco        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_gtsco       ( s, pts, pDbTask, Dbn );
}

int gtscr        ( ULONG  * pts )
{    
	return DbStatus =    :: dt_gtscr       ( pts , pDbTask, Dbn );
}

int gtscs        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_gtscs       ( s, pts, pDbTask, Dbn );
}

int initialize    ( )
{    
	return DbStatus =    :: dt_initialize  ( pDbTask, Dbn );
}

int initfile    ( DB_SHORT fid)
{    
	return DbStatus =    :: dt_initfile  ( fid, pDbTask, Dbn );
}

int ismember    ( Set s )
{    
	return DbStatus =    :: dt_ismember    ( s, pDbTask, Dbn );
}

int isowner    ( Set s )
{    
	return DbStatus =    :: dt_isowner     ( s, pDbTask, Dbn );
}


int keybuild    ( )
{    
	return DbStatus =    :: dt_keybuild    ( pDbTask, Dbn );
}

#line 314 "c:\\rom32\\ominc\\rdmdb.hpp"
int keydel        ( Field f )
{    
	return DbStatus =    :: dt_keydel      ( f, pDbTask, Dbn );
}

int keyexist    ( Field f )
{    
	return DbStatus =    :: dt_keyexist    ( f, pDbTask, Dbn );
}

int keyfind    ( Field f, Pvoid  pv)
{
    return DbStatus =    :: dt_keyfind     ( f, ( Pchar ) pv, pDbTask, Dbn );
}


int keyfree    ( Field f )
{    
	return DbStatus =    :: dt_keyfree     ( f, pDbTask, Dbn );
}

#line 336 "c:\\rom32\\ominc\\rdmdb.hpp"
int keyfrst    ( Field f )
{    
	return DbStatus =    :: dt_keyfrst     ( f, pDbTask, Dbn );
}

int keylast    ( Field f)
{    
	return DbStatus =    :: dt_keylast     ( f, pDbTask, Dbn );
}


int keylock    ( Field f, Pchar  pc )    
{    
	return DbStatus =    :: dt_keylock     ( f, pc, pDbTask, Dbn );
}

int keylstat    ( Field f, Pchar  pc)
{    
	return DbStatus =    :: dt_keylstat    ( f, pc, pDbTask, Dbn );
}

#line 358 "c:\\rom32\\ominc\\rdmdb.hpp"
int keynext    ( Field f )
{    
	return DbStatus =    :: dt_keynext     ( f, pDbTask, Dbn );
}

int keyprev    ( Field f )
{    
	return DbStatus =    :: dt_keyprev     ( f, pDbTask, Dbn );
}

int keyread    ( Pvoid pv )
{    
	return DbStatus =    :: dt_keyread    ( ( Pchar )pv, pDbTask );
}

int keystore    ( Field f )
{    
	return DbStatus =    :: dt_keystore    ( f, pDbTask, Dbn );
}

    

int internals (int topic, int id, int elm, Pvoid ptr, unsigned int size)
{
	return :: dt_internals(pDbTask, topic, id, elm, ptr, size);
}


int lock        ( int knt, LOCK_REQUEST  * plr )
{    
	return DbStatus =    :: dt_lock      ( knt, plr, pDbTask, Dbn );
}

#line 392 "c:\\rom32\\ominc\\rdmdb.hpp"
int makenew    ( Rec r )
{    
	return DbStatus =    :: dt_makenew     ( r, pDbTask, Dbn );
}

int members    ( Set s, Plong  pl)
{    
	return DbStatus =    :: dt_members     ( s, pl, pDbTask, Dbn );
}


int recfree    ( Rec r)
{    
	return DbStatus =    :: dt_recfree     ( r, pDbTask, Dbn );
}

#line 409 "c:\\rom32\\ominc\\rdmdb.hpp"
int recfrst    ( Rec r )
{    
	return DbStatus =    :: dt_recfrst     ( r, pDbTask, Dbn );
}

int reclast    ( Rec r )
{    
	return DbStatus =    :: dt_reclast     ( r, pDbTask, Dbn );
}


int reclock    ( Rec r, Pchar  pc )
{    
	return DbStatus =    :: dt_reclock     ( r, pc , pDbTask, Dbn );
}

int reclstat    ( Rec r, Pchar  pc)
{    
	return DbStatus =    :: dt_reclstat    ( r, pc, pDbTask, Dbn );
}

#line 431 "c:\\rom32\\ominc\\rdmdb.hpp"
int recread    ( Pvoid  pv )
{    
	return DbStatus =    :: dt_recread     ( ( Pchar ) pv, pDbTask, Dbn );
}

int recset        ( Rec r)
{    
	return DbStatus =    :: dt_recset      ( r, pDbTask, Dbn );
}

int recwrite    ( Pvoid  pv )
{    
	return DbStatus =    :: dt_recwrite    ( ( Pchar ) pv, pDbTask, Dbn );
}


int setfree    ( Set s )
{    
	return DbStatus =    :: dt_setfree     ( s, pDbTask, Dbn );
}

#line 453 "c:\\rom32\\ominc\\rdmdb.hpp"
int setkey        ( Field f, Pvoid  pv)
{    
	return DbStatus =    :: dt_setkey     ( f, ( Pchar ) pv, pDbTask, Dbn );
}


int setlock    ( Set s, Pvoid  pv )
{    
	return DbStatus =    :: dt_setlock    ( s, ( Pchar ) pv, pDbTask, Dbn );
}

int setlstat    ( Set s, Pvoid  pv )
{    
	return DbStatus =    :: dt_setlstat   ( s, ( Pchar ) pv, pDbTask, Dbn );
}

#line 470 "c:\\rom32\\ominc\\rdmdb.hpp"
int setmm        ( Set s1, Set s2 )
{    
	return DbStatus =    :: dt_setmm       ( s1, s2, pDbTask, Dbn );
}

int setmo        ( Set s1, Set s2 )
{    
	return DbStatus =    :: dt_setmo       ( s1, s2, pDbTask, Dbn );
}

int setmr        ( Set s )
{    
	return DbStatus =    :: dt_setmr       ( s, pDbTask, Dbn );
}

int setom        ( Set s1, Set s2 )
{    
	return DbStatus =    :: dt_setom       ( s1, s2, pDbTask, Dbn );
}

int setoo        ( Set s1, Set s2 )
{    
	return DbStatus =    :: dt_setoo       ( s1, s2, pDbTask, Dbn );
}

int setor        ( Set s )
{    
	return DbStatus =    :: dt_setor       ( s, pDbTask, Dbn );
}

int setrm        ( Set s )
{    
	return DbStatus =    :: dt_setrm       ( s, pDbTask, Dbn );
}

int setro        ( Set s )
{    
	return DbStatus =    :: dt_setro       ( s, pDbTask, Dbn );
}

int stscm        ( Set s, ULONG ts )
{    
	return DbStatus =    :: dt_stscm       ( s, ts, pDbTask, Dbn );
}

int stsco        ( Set s, ULONG ts )
{    
	return DbStatus =    :: dt_stsco       ( s, ts, pDbTask, Dbn );
}

int stscr        ( ULONG ts )
{    
	return DbStatus =    :: dt_stscr       ( ts, pDbTask, Dbn );
}

int stscs        ( Set s, ULONG ts )
{    
	return DbStatus =    :: dt_stscs       ( s, ts, pDbTask, Dbn );
}

int utscm        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_utscm       ( s, pts, pDbTask, Dbn );
}

int utsco        ( Set s, ULONG  * pts )
{    
	return DbStatus =    :: dt_utsco       ( s, pts, pDbTask, Dbn );
}

int utscr        ( ULONG  * pts)
{    
	return DbStatus =    :: dt_utscr       ( pts, pDbTask, Dbn );
}

int utscs        ( Set s, ULONG  * pts)
{    
	return DbStatus =    :: dt_utscs       ( s, pts, pDbTask, Dbn );
}

#line 551 "c:\\rom32\\ominc\\rdmdb.hpp"
};

#line 554 "c:\\rom32\\ominc\\rdmdb.hpp"

#line 23 "c:\\rom32\\ominc\\vistadb.hpp"
#line 24 "c:\\rom32\\ominc\\vistadb.hpp"
#line 25 "c:\\rom32\\ominc\\vistadb.hpp"

enum OpenStat { Closed, Opened };
enum VistaPlusErr { StillUsed=100,AlreadyClosed,AlreadyOpen, CouldNotActivate };

class __declspec(dllexport) VistaDb : public RDXDb
{    
private:
    PVistaTask  pVTask;     
    char        DbName[100];
    OpenStat    OpenClosed; 
    int         UseCount;   
protected:



friend VistaTask;        

    unsigned int QueryOpened;   
				
    Pchar   GetName()           { return DbName; }

    
    VistaDb( PVistaTask pVT, Pchar  name );

    void  Init( PVistaTask pVT, Pchar  name );   
    void  SetOpenStat(OpenStat s) { OpenClosed = s; }
     

    VistaDb();  
                
public:
    virtual ~VistaDb();











    T_F   Close   ();        
    T_F   Open    ();        
    T_F   IsOpen  () { return (T_F)OpenClosed; }

    virtual void  MakeCurrent() { }
    PVistaTask    GetTask() { return pVTask; }     
						   
};


#line 79 "c:\\rom32\\ominc\\vistadb.hpp"
#line 15 "c:\\rom32\\ominc\\storedb.hpp"


class __declspec(dllexport) StoreDb;
class __declspec(dllexport) StoreDb; typedef StoreDb  * PStoreDb; typedef StoreDb  & RStoreDb;;

    
    
    
        

class __declspec(dllexport) StoreDb: public VistaDb
{   
protected:
    StoreDb(Pchar name, PStoreDb  * ppdb); 
    StoreDb(PStoreDb * ppdb);             
public:
    void   SetName(char  *);        
};

    
    
    
        
        
        
        

class __declspec(dllexport) StoreTask; typedef StoreTask  * PStoreTask; typedef StoreTask  & RStoreTask;;

class __declspec(dllexport) StoreTask : public VistaTask
{   
public:

            
    StoreTask(): VistaTask("o") { }

    StoreTask( Pchar mode ): VistaTask( mode ) { }

    StoreTask(RActivateTask a): VistaTask("o", a) { }
       
            
    StoreTask(Pchar mode, RActivateTask a): VistaTask(mode, a) { }
    void   UseEnv( int uniq = 0 );

};


    
    
    


    
    
    
    





    
    
    
    




    
    
    


    
    
    






































#line 131 "c:\\rom32\\ominc\\storedb.hpp"

#line 133 "c:\\rom32\\ominc\\storedb.hpp"
#line 5 ".\\inc\\../triton/triton.hpp"
#line 1 "c:\\rom32\\ominc\\storeobj.hpp"










#line 1 "c:\\rom32\\ominc\\vpp.hpp"





































































































































































































































#line 12 "c:\\rom32\\ominc\\storeobj.hpp"

#line 1 "c:\\rom32\\ominc\\vistaobj.hpp"

















































































#line 14 "c:\\rom32\\ominc\\storeobj.hpp"
#line 1 "c:\\rom32\\ominc\\navmacro.hpp"












    
    
    
    
    







































































    



























































































#line 182 "c:\\rom32\\ominc\\navmacro.hpp"





    
    


















#line 15 "c:\\rom32\\ominc\\storeobj.hpp"

class __declspec(dllexport) VistaDb;
class __declspec(dllexport) VistaTask;
class __declspec(dllexport) StoreDb;


class __declspec(dllexport) StoreObj; typedef StoreObj  * PStoreObj; typedef StoreObj  & RStoreObj;;

class __declspec(dllexport) RelationalNav; typedef RelationalNav  * PRelationalNav; typedef RelationalNav  & RRelationalNav;;
class __declspec(dllexport) DirectNav; typedef DirectNav  * PDirectNav; typedef DirectNav  & RDirectNav;;
class __declspec(dllexport) NetworkNav; typedef NetworkNav  * PNetworkNav; typedef NetworkNav  & RNetworkNav;;
class __declspec(dllexport) SetObj; typedef SetObj  * PSetObj; typedef SetObj  & RSetObj;;
class __declspec(dllexport) KeyObj; typedef KeyObj  * PKeyObj; typedef KeyObj  & RKeyObj;;
class __declspec(dllexport) Navigator; typedef Navigator  * PNavigator; typedef Navigator  & RNavigator;;
class __declspec(dllexport) OMAutoLoad; typedef OMAutoLoad  * POMAutoLoad; typedef OMAutoLoad  & ROMAutoLoad;;
class __declspec(dllexport) Polymorph; typedef Polymorph  * PPolymorph; typedef Polymorph  & RPolymorph;;
class __declspec(dllexport) OmObjMgr; typedef OmObjMgr  * POmObjMgr; typedef OmObjMgr  & ROmObjMgr;;



class __declspec(dllexport) SetObj; typedef SetObj  * PSetObj; typedef SetObj  & RSetObj;;
    
    
    
class __declspec(dllexport) SetObj                             
{
    int SetNum;                               
public:
    SetObj(int s) { SetNum = s; }
    int Num() const   { return SetNum; }
};

    
    
    
    
    

class __declspec(dllexport) StoreObj : public VistaObj
{
        
    friend RelationalNav;
    friend DirectNav;
    friend NetworkNav;
    friend OMAutoLoad;
    friend Polymorph;
    friend OmObjMgr;
protected:
    Navigator  *pNav;	  
    Pvoid   RecData();            

        
        
        
   long   MemCount(RStoreObj ,int set); 
   void   CsmSet(int);      
   void   CrGet();               
   void   CrSet();               
   int    MakeOwner(int set); 


        
        
        

        
        
   void   Read();    

   T_F   NotRead()   { return (status == 100)? True:False; }

        
        
        
     StoreObj(const RSetObj, PVistaDb pdb = 0);
     StoreObj(const RKeyObj, PVistaDb pdb = 0);
     StoreObj(PVistaDb pdb = 0);               

public:
   T_F   DisConFrom(RStoreObj rO, int set);
   T_F   ConnectTo(RStoreObj rO, int set);

   StoreObj(RStoreObj );      
   ~StoreObj();

   virtual PVistaDb  _GetDb()=0;  

   T_F    Okay()   { return (status == 0)? True:False; }
   void   NewObj();        
   void   Write();         
   void   Delete();        

   RStoreObj  operator=(RStoreObj );    

   RStoreObj  operator[](NavCtrl nc);   
   RStoreObj  operator[](const RKeyObj k )     { return Find(k);  }
   RStoreObj  operator[](const RDbAddr d )     { return GotoDirect(d);  }

        
        
        

   RStoreObj  Find(const RKeyObj );  


                                     
   RStoreObj  operator++(int);       
   RStoreObj  operator--(int);       
#line 124 "c:\\rom32\\ominc\\storeobj.hpp"
                                     
                                     
   RStoreObj  operator++();          
   RStoreObj  operator--();          

   virtual PStoreObj   Clone();
   RStoreObj  First() { return Goto(FIRST); }
   RStoreObj  Last()  { return Goto(LAST);  }
   RStoreObj  Next()  { return Goto(NEXT);  }
   RStoreObj  Prev()  { return Goto(PREV);  }

   RStoreObj  First( const RKeyObj k ) { return Goto( k, FIRST ); }
   RStoreObj  Last( const RKeyObj k )  { return Goto( k, LAST );  }
   RStoreObj  Next( const RKeyObj k )  { return Goto( k, NEXT );  }
   RStoreObj  Prev( const RKeyObj k )  { return Goto( k, PREV );  }

   RStoreObj    Goto( const RKeyObj, NavCtrl );

   RStoreObj    Goto(NavCtrl);      

        
        
        

    RStoreObj    GotoMember(RStoreObj rOwner,int Set, NavCtrl nc);
    RStoreObj    GotoMember(int set, NavCtrl nc);

            
            
            
            
   RStoreObj   FromMember(PStoreObj pM, int set);
   RStoreObj   FromOwner (PStoreObj pO, int set);
   T_F         IsMember(int set);
   T_F         IsOwner(int set);

        
        
        

   RStoreObj  GotoDirect(const RDbAddr );   

        
        
        
   T_F   Lock( Pchar );
   T_F   FreeLock();
   T_F   ReadLock()       { return Lock("r"); }
   T_F   WriteLock()      { return Lock("w"); }
   T_F   ExclusiveLock()  { return Lock("x"); }
   T_F   KeepLock()       { return Lock("k"); }
   char  LockStatus();

   void  GetRecEntry( Pvoid pRte);    

private:
    long double alignmentFix;
   };

#line 184 "c:\\rom32\\ominc\\storeobj.hpp"
#line 6 ".\\inc\\../triton/triton.hpp"
#line 1 "c:\\rom32\\ominc\\keyobj.hpp"













class __declspec(dllexport) KeyObj; typedef KeyObj  * PKeyObj; typedef KeyObj  & RKeyObj;;

class __declspec(dllexport) KeyObj
{
    long KeyFld;

    Pvoid pVal;
public:
    KeyObj(long k)  { KeyFld = k; }

        
    KeyObj(long k, Pchar   pc) { KeyFld = k; pVal = (Pvoid ) pc; }
    KeyObj(long k, Rint    v)  { KeyFld = k; pVal = (Pvoid ) &v; }
    KeyObj(long k, Rlong   v)  { KeyFld = k; pVal = (Pvoid ) &v; }
    KeyObj(long k, Rdouble v)  { KeyFld = k; pVal = (Pvoid ) &v; }
    KeyObj(long k, Rfloat  v)  { KeyFld = k; pVal = (Pvoid ) &v; }
    
    KeyObj(long k, Pvoid   pv) { KeyFld = k; pVal = (Pvoid ) pv; }

    RKeyObj  Set( Pchar   pc) { pVal = (Pvoid ) pc; return *this; }
    RKeyObj  Set( Rint    v)  { pVal = (Pvoid ) &v; return *this; }
    RKeyObj  Set( Rlong   v)  { pVal = (Pvoid ) &v; return *this; }
    RKeyObj  Set( Rdouble v)  { pVal = (Pvoid ) &v; return *this; }
    RKeyObj  Set( Rfloat  v)  { pVal = (Pvoid ) &v; return *this; }
    
    RKeyObj  Set(Pvoid   pv) { pVal =  pv; return *this; }

    long Fld()          const { return KeyFld; }
    T_F      HasValue()     const { return (pVal) ? True : False; }
    Pvoid Value()   const { return pVal; }
};

#line 47 "c:\\rom32\\ominc\\keyobj.hpp"
#line 7 ".\\inc\\../triton/triton.hpp"
#line 1 "c:\\rom32\\ominc\\poly.hpp"



































    
    
    
    
    
    
    
    
    
    

class __declspec(dllexport) ObjInfo; typedef ObjInfo  * PObjInfo; typedef ObjInfo  & RObjInfo;;

class __declspec(dllexport) ObjInfo 
{   friend Polymorph;
private:
    PStoreObj pSO;           
    int Rtype;          
protected:
    ObjInfo()                { pSO= 0;    Rtype = 0;  }
public:
    void Set(RStoreObj SO)   { pSO= (PStoreObj ) &SO;  Rtype = SO.RecType(); }
    T_F  NotSet()            { return (!pSO) ? True : False ;  }
    int RecType()       { return Rtype;        }
    PStoreObj  GetObj()      { return pSO;          }
};

class __declspec(dllexport) Polymorph; typedef Polymorph  * PPolymorph; typedef Polymorph  & RPolymorph;;

class __declspec(dllexport) Polymorph : public StoreObj
{
private:
protected:
    int set;
    PObjInfo pCurr;         
    PObjInfo pInfo;         
    int      Num;           
    void     Read();        
    T_F Select(int Rtype);  
    PObjInfo  GetInfo()      { return (PObjInfo) pInfo; }
        
    Polymorph(int Set, PVistaDb pdb = 0 ); 
						
    void Init();            
        
        
        
        
    Polymorph(int Set, int NumOfMembers, PVistaDb pdb = 0);

public:
    ~Polymorph();

        
        
    T_F Register(RStoreObj );

        
        
    PStoreObj operator->()   { return pCurr->GetObj();  } 
    PStoreObj GetObj()       { return pCurr->GetObj();  }
    PStoreObj GetObj(int Rtype);
    
    int  RecType()      { return pCurr->RecType(); }

        
        
    void Sync(); 
};

#line 107 "c:\\rom32\\ominc\\poly.hpp"
#line 8 ".\\inc\\../triton/triton.hpp"

#line 1 ".\\inc\\../triton/triton_defines.h"











#line 13 ".\\inc\\../triton/triton_defines.h"
#line 10 ".\\inc\\../triton/triton.hpp"
#line 1 ".\\inc\\../triton/triton.h"








struct Transform {
   double a[16];
};

struct Classes {
   long type;
   char name[32];
   char description[64];
};

struct Groups {
   char name[32];
   char description[64];
};

struct Properties {
   struct {
      float red;
      float green;
      float blue;
   } color;
   struct {
      double x1;
      double y1;
      double z1;
      double x2;
      double y2;
      double z2;
   } range;
};

struct Box {
   double xlen;
   double ylen;
   double zlen;
   long index;
};

struct CirTorus {
   double outerRadius;
   double innerRadius;
   double angle;
   long index;
};

struct Cone {
   double topRadius;
   double bottomRadius;
   double height;
   double xOffset;
   double yOffset;
   long index;
};

struct Cylinder {
   double radius;
   double height;
   long index;
};

struct RectTorus {
   double outerRadius;
   double innerRadius;
   double height;
   double angle;
   long index;
};

struct Sphere {
   double diameter;
   double height;
   double radius;
   long index;
};

struct Pyramid {
   double height;
   double baseWidth;
   double BaseDepth;
   double TopWidth;
   double TopDepth;
   double WidthOffset;
   double DepthOffset;
   long index;
};

struct Complex {
   long num_faces;
   long index;
};

struct Faces {
   long num_vertices;
};

struct Vertices {
   double xpos;
   double ypos;
   double zpos;
};

struct Point {
   double xpos;
   double ypos;
   double zpos;
   long index;
};

struct Line {
   double x1;
   double y1;
   double z1;
   double x2;
   double y2;
   double z2;
   long index;
};































































































































































































#line 318 ".\\inc\\../triton/triton.h"
#line 11 ".\\inc\\../triton/triton.hpp"












































































































































































































#line 216 ".\\inc\\../triton/triton.hpp"

class __declspec(dllexport) triton : public StoreDb
{
public:
   triton() : StoreDb("triton", (PStoreDb  *)&DbPtr) {}

   void OpenMe()
   {
	Open();
   }
  
   static StoreDb  * DbPtr; void MakeCurrent() { DbPtr = this; };
};

class __declspec(dllexport) TransformObj; typedef TransformObj  * PTransformObj; typedef TransformObj  & RTransformObj;
class __declspec(dllexport) ClassesObj; typedef ClassesObj  * PClassesObj; typedef ClassesObj  & RClassesObj;
class __declspec(dllexport) GroupsObj; typedef GroupsObj  * PGroupsObj; typedef GroupsObj  & RGroupsObj;
class __declspec(dllexport) PropertiesObj; typedef PropertiesObj  * PPropertiesObj; typedef PropertiesObj  & RPropertiesObj;
class __declspec(dllexport) BoxObj; typedef BoxObj  * PBoxObj; typedef BoxObj  & RBoxObj;
class __declspec(dllexport) CirTorusObj; typedef CirTorusObj  * PCirTorusObj; typedef CirTorusObj  & RCirTorusObj;
class __declspec(dllexport) ConeObj; typedef ConeObj  * PConeObj; typedef ConeObj  & RConeObj;
class __declspec(dllexport) CylinderObj; typedef CylinderObj  * PCylinderObj; typedef CylinderObj  & RCylinderObj;
class __declspec(dllexport) RectTorusObj; typedef RectTorusObj  * PRectTorusObj; typedef RectTorusObj  & RRectTorusObj;
class __declspec(dllexport) SphereObj; typedef SphereObj  * PSphereObj; typedef SphereObj  & RSphereObj;
class __declspec(dllexport) PyramidObj; typedef PyramidObj  * PPyramidObj; typedef PyramidObj  & RPyramidObj;
class __declspec(dllexport) ComplexObj; typedef ComplexObj  * PComplexObj; typedef ComplexObj  & RComplexObj;
class __declspec(dllexport) FacesObj; typedef FacesObj  * PFacesObj; typedef FacesObj  & RFacesObj;
class __declspec(dllexport) VerticesObj; typedef VerticesObj  * PVerticesObj; typedef VerticesObj  & RVerticesObj;
class __declspec(dllexport) PointObj; typedef PointObj  * PPointObj; typedef PointObj  & RPointObj;
class __declspec(dllexport) LineObj; typedef LineObj  * PLineObj; typedef LineObj  & RLineObj;
class __declspec(dllexport) systemObj; typedef systemObj  * PsystemObj; typedef systemObj  & RsystemObj;
class __declspec(dllexport) Classes_type_KeyObj; typedef Classes_type_KeyObj  * PClasses_type_KeyObj; typedef Classes_type_KeyObj  & RClasses_type_KeyObj;
class __declspec(dllexport) Classes_name_KeyObj; typedef Classes_name_KeyObj  * PClasses_name_KeyObj; typedef Classes_name_KeyObj  & RClasses_name_KeyObj;
class __declspec(dllexport) Groups_name_KeyObj; typedef Groups_name_KeyObj  * PGroups_name_KeyObj; typedef Groups_name_KeyObj  & RGroups_name_KeyObj;

class __declspec(dllexport) TransformObj : public StoreObj, public Transform
{
public:
   TransformObj() {}
   virtual ~TransformObj() {}
   int RecType() { return 10000; }
   Pchar  RecName() { return "Transform"; }

   Pvoid RecData() { return StoreObj::RecData(); }
   long RecDataSize() { return sizeof(struct Transform); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   TransformObj  &operator[](NavCtrl nc) { return (TransformObj  &)StoreObj::operator[](nc); } TransformObj  &operator[](const RKeyObj k ) { return (TransformObj  &)StoreObj::operator[](k ); } TransformObj  &operator[](const RDbAddr d ) { return (TransformObj  &)StoreObj::operator[](d ); } TransformObj  &operator++() { return (TransformObj  &)StoreObj::operator++(); } TransformObj  &operator--() { return (TransformObj  &)StoreObj::operator--(); } TransformObj  &operator++(int) { return (TransformObj  &)StoreObj::operator++(); } TransformObj  &operator--(int) { return (TransformObj  &)StoreObj::operator--(); };
   ClassesObj  &operator>>(ClassesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20003); return x; } ClassesObj  &OwnerUsingSet(ClassesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ClassesObj  &m, int set = 20003) { return MemCount((StoreObj  &)m, set); };
};


class __declspec(dllexport) ClassesObj : public StoreObj, public Classes
{
public:
   ClassesObj() {}
   ClassesObj(RSetObj set) : StoreObj(set) {}
   ClassesObj(RKeyObj key) : StoreObj(key) {}
   ClassesObj(RsystemObj) : StoreObj(SetObj(20000)) {}
   ClassesObj(RClassesObj) : StoreObj(SetObj(20001)) {}
   ClassesObj(RTransformObj) : StoreObj(SetObj(20003)) {}
   ClassesObj(RGroupsObj) : StoreObj(SetObj(20004)) {}
   ClassesObj(RPropertiesObj) : StoreObj(SetObj(20005)) {}
   virtual ~ClassesObj() {}
   int RecType() { return 10001; }
   Pchar  RecName() { return "Classes"; }

   Pvoid RecData() { return StoreObj::RecData(); }
   long RecDataSize() { return sizeof(struct Classes); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   ClassesObj  &operator[](NavCtrl nc) { return (ClassesObj  &)StoreObj::operator[](nc); } ClassesObj  &operator[](const RKeyObj k ) { return (ClassesObj  &)StoreObj::operator[](k ); } ClassesObj  &operator[](const RDbAddr d ) { return (ClassesObj  &)StoreObj::operator[](d ); } ClassesObj  &operator++() { return (ClassesObj  &)StoreObj::operator++(); } ClassesObj  &operator--() { return (ClassesObj  &)StoreObj::operator--(); } ClassesObj  &operator++(int) { return (ClassesObj  &)StoreObj::operator++(); } ClassesObj  &operator--(int) { return (ClassesObj  &)StoreObj::operator--(); };
   ClassesObj  &operator>>(ClassesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20001); return x; } ClassesObj  &OwnerUsingSet(ClassesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ClassesObj  &m, int set = 20001) { return MemCount((StoreObj  &)m, set); };
   ConeObj  &operator>>(ConeObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } ConeObj  &OwnerUsingSet(ConeObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ConeObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   CylinderObj  &operator>>(CylinderObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } CylinderObj  &OwnerUsingSet(CylinderObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(CylinderObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   SphereObj  &operator>>(SphereObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } SphereObj  &OwnerUsingSet(SphereObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(SphereObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   BoxObj  &operator>>(BoxObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } BoxObj  &OwnerUsingSet(BoxObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(BoxObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   ComplexObj  &operator>>(ComplexObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } ComplexObj  &OwnerUsingSet(ComplexObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ComplexObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   CirTorusObj  &operator>>(CirTorusObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } CirTorusObj  &OwnerUsingSet(CirTorusObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(CirTorusObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   RectTorusObj  &operator>>(RectTorusObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } RectTorusObj  &OwnerUsingSet(RectTorusObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(RectTorusObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   PyramidObj  &operator>>(PyramidObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } PyramidObj  &OwnerUsingSet(PyramidObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(PyramidObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   LineObj  &operator>>(LineObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } LineObj  &OwnerUsingSet(LineObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(LineObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   PointObj  &operator>>(PointObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } PointObj  &OwnerUsingSet(PointObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(PointObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   T_F Connect(systemObj  &x, int set = 20000) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(systemObj  &rO, NavCtrl nc, int set = 20000) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(systemObj &o, int set = 20000) { return (DisConFrom((StoreObj &)o, set)); } int Set(systemObj  &) { return 20000; } systemObj  &operator<<(systemObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20000); return y; } systemObj  &MemberUsingSet(systemObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(ClassesObj  &x, int set = 20001) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20001) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20001) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20001; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20001); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(TransformObj  &x, int set = 20003) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(TransformObj  &rO, NavCtrl nc, int set = 20003) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(TransformObj &o, int set = 20003) { return (DisConFrom((StoreObj &)o, set)); } int Set(TransformObj  &) { return 20003; } TransformObj  &operator<<(TransformObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20003); return y; } TransformObj  &MemberUsingSet(TransformObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(GroupsObj  &x, int set = 20004) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(GroupsObj  &rO, NavCtrl nc, int set = 20004) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(GroupsObj &o, int set = 20004) { return (DisConFrom((StoreObj &)o, set)); } int Set(GroupsObj  &) { return 20004; } GroupsObj  &operator<<(GroupsObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20004); return y; } GroupsObj  &MemberUsingSet(GroupsObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(PropertiesObj  &x, int set = 20005) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(PropertiesObj  &rO, NavCtrl nc, int set = 20005) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(PropertiesObj &o, int set = 20005) { return (DisConFrom((StoreObj &)o, set)); } int Set(PropertiesObj  &) { return 20005; } PropertiesObj  &operator<<(PropertiesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20005); return y; } PropertiesObj  &MemberUsingSet(PropertiesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) GroupsObj : public StoreObj, public Groups
{
public:
   GroupsObj() {}
   GroupsObj(RKeyObj key) : StoreObj(key) {}
   virtual ~GroupsObj() {}
   int RecType() { return 10002; }
   Pchar  RecName() { return "Groups"; }

   Pvoid RecData() { return StoreObj::RecData(); }
   long RecDataSize() { return sizeof(struct Groups); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   GroupsObj  &operator[](NavCtrl nc) { return (GroupsObj  &)StoreObj::operator[](nc); } GroupsObj  &operator[](const RKeyObj k ) { return (GroupsObj  &)StoreObj::operator[](k ); } GroupsObj  &operator[](const RDbAddr d ) { return (GroupsObj  &)StoreObj::operator[](d ); } GroupsObj  &operator++() { return (GroupsObj  &)StoreObj::operator++(); } GroupsObj  &operator--() { return (GroupsObj  &)StoreObj::operator--(); } GroupsObj  &operator++(int) { return (GroupsObj  &)StoreObj::operator++(); } GroupsObj  &operator--(int) { return (GroupsObj  &)StoreObj::operator--(); };
   ClassesObj  &operator>>(ClassesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20004); return x; } ClassesObj  &OwnerUsingSet(ClassesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ClassesObj  &m, int set = 20004) { return MemCount((StoreObj  &)m, set); };
};


class __declspec(dllexport) PropertiesObj : public StoreObj, public Properties
{
public:
   PropertiesObj() {}
   virtual ~PropertiesObj() {}
   int RecType() { return 10003; }
   Pchar  RecName() { return "Properties"; }

   Pvoid RecData() { return StoreObj::RecData(); }
   long RecDataSize() { return sizeof(struct Properties); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   PropertiesObj  &operator[](NavCtrl nc) { return (PropertiesObj  &)StoreObj::operator[](nc); } PropertiesObj  &operator[](const RKeyObj k ) { return (PropertiesObj  &)StoreObj::operator[](k ); } PropertiesObj  &operator[](const RDbAddr d ) { return (PropertiesObj  &)StoreObj::operator[](d ); } PropertiesObj  &operator++() { return (PropertiesObj  &)StoreObj::operator++(); } PropertiesObj  &operator--() { return (PropertiesObj  &)StoreObj::operator--(); } PropertiesObj  &operator++(int) { return (PropertiesObj  &)StoreObj::operator++(); } PropertiesObj  &operator--(int) { return (PropertiesObj  &)StoreObj::operator--(); };
   ClassesObj  &operator>>(ClassesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20005); return x; } ClassesObj  &OwnerUsingSet(ClassesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ClassesObj  &m, int set = 20005) { return MemCount((StoreObj  &)m, set); };
};

class __declspec(dllexport) ElementObj: public StoreObj
{
private:
	int mode;
	char dbastr[25];
public:
	ElementObj():StoreObj(SetObj(20002)){}

	virtual long RecDataSize() = 0;

	Pvoid RecData() {return (void *)((char *)this+sizeof(*this));}

	PVistaDb  _GetDb() { return triton::DbPtr; };
};

class __declspec(dllexport) BoxObj : public ElementObj, public Box
{
public:
   BoxObj() {}

   virtual ~BoxObj() {}
   int RecType() { return 10004; }
   Pchar  RecName() { return "Box"; }


   long RecDataSize() { return sizeof(struct Box); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   BoxObj  &operator[](NavCtrl nc) { return (BoxObj  &)StoreObj::operator[](nc); } BoxObj  &operator[](const RKeyObj k ) { return (BoxObj  &)StoreObj::operator[](k ); } BoxObj  &operator[](const RDbAddr d ) { return (BoxObj  &)StoreObj::operator[](d ); } BoxObj  &operator++() { return (BoxObj  &)StoreObj::operator++(); } BoxObj  &operator--() { return (BoxObj  &)StoreObj::operator--(); } BoxObj  &operator++(int) { return (BoxObj  &)StoreObj::operator++(); } BoxObj  &operator--(int) { return (BoxObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) CirTorusObj : public ElementObj, public CirTorus
{
public:
   CirTorusObj() {}

   virtual ~CirTorusObj() {}
   int RecType() { return 10005; }
   Pchar  RecName() { return "CirTorus"; }


   long RecDataSize() { return sizeof(struct CirTorus); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   CirTorusObj  &operator[](NavCtrl nc) { return (CirTorusObj  &)StoreObj::operator[](nc); } CirTorusObj  &operator[](const RKeyObj k ) { return (CirTorusObj  &)StoreObj::operator[](k ); } CirTorusObj  &operator[](const RDbAddr d ) { return (CirTorusObj  &)StoreObj::operator[](d ); } CirTorusObj  &operator++() { return (CirTorusObj  &)StoreObj::operator++(); } CirTorusObj  &operator--() { return (CirTorusObj  &)StoreObj::operator--(); } CirTorusObj  &operator++(int) { return (CirTorusObj  &)StoreObj::operator++(); } CirTorusObj  &operator--(int) { return (CirTorusObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) ConeObj : public ElementObj, public Cone
{
public:
   ConeObj() {}

   virtual ~ConeObj() {}
   int RecType() { return 10006; }
   Pchar  RecName() { return "Cone"; }


   long RecDataSize() { return sizeof(struct Cone); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   ConeObj  &operator[](NavCtrl nc) { return (ConeObj  &)StoreObj::operator[](nc); } ConeObj  &operator[](const RKeyObj k ) { return (ConeObj  &)StoreObj::operator[](k ); } ConeObj  &operator[](const RDbAddr d ) { return (ConeObj  &)StoreObj::operator[](d ); } ConeObj  &operator++() { return (ConeObj  &)StoreObj::operator++(); } ConeObj  &operator--() { return (ConeObj  &)StoreObj::operator--(); } ConeObj  &operator++(int) { return (ConeObj  &)StoreObj::operator++(); } ConeObj  &operator--(int) { return (ConeObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) CylinderObj : public ElementObj, public Cylinder
{
public:
   CylinderObj() {}

   virtual ~CylinderObj() {}
   int RecType() { return 10007; }
   Pchar  RecName() { return "Cylinder"; }


   long RecDataSize() { return sizeof(struct Cylinder); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   CylinderObj  &operator[](NavCtrl nc) { return (CylinderObj  &)StoreObj::operator[](nc); } CylinderObj  &operator[](const RKeyObj k ) { return (CylinderObj  &)StoreObj::operator[](k ); } CylinderObj  &operator[](const RDbAddr d ) { return (CylinderObj  &)StoreObj::operator[](d ); } CylinderObj  &operator++() { return (CylinderObj  &)StoreObj::operator++(); } CylinderObj  &operator--() { return (CylinderObj  &)StoreObj::operator--(); } CylinderObj  &operator++(int) { return (CylinderObj  &)StoreObj::operator++(); } CylinderObj  &operator--(int) { return (CylinderObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) RectTorusObj : public ElementObj, public RectTorus
{
public:
   RectTorusObj() {}

   virtual ~RectTorusObj() {}
   int RecType() { return 10008; }
   Pchar  RecName() { return "RectTorus"; }


   long RecDataSize() { return sizeof(struct RectTorus); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   RectTorusObj  &operator[](NavCtrl nc) { return (RectTorusObj  &)StoreObj::operator[](nc); } RectTorusObj  &operator[](const RKeyObj k ) { return (RectTorusObj  &)StoreObj::operator[](k ); } RectTorusObj  &operator[](const RDbAddr d ) { return (RectTorusObj  &)StoreObj::operator[](d ); } RectTorusObj  &operator++() { return (RectTorusObj  &)StoreObj::operator++(); } RectTorusObj  &operator--() { return (RectTorusObj  &)StoreObj::operator--(); } RectTorusObj  &operator++(int) { return (RectTorusObj  &)StoreObj::operator++(); } RectTorusObj  &operator--(int) { return (RectTorusObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) SphereObj : public ElementObj, public Sphere
{
public:
   SphereObj() {}

   virtual ~SphereObj() {}
   int RecType() { return 10009; }
   Pchar  RecName() { return "Sphere"; }


   long RecDataSize() { return sizeof(struct Sphere); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   SphereObj  &operator[](NavCtrl nc) { return (SphereObj  &)StoreObj::operator[](nc); } SphereObj  &operator[](const RKeyObj k ) { return (SphereObj  &)StoreObj::operator[](k ); } SphereObj  &operator[](const RDbAddr d ) { return (SphereObj  &)StoreObj::operator[](d ); } SphereObj  &operator++() { return (SphereObj  &)StoreObj::operator++(); } SphereObj  &operator--() { return (SphereObj  &)StoreObj::operator--(); } SphereObj  &operator++(int) { return (SphereObj  &)StoreObj::operator++(); } SphereObj  &operator--(int) { return (SphereObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) PyramidObj : public ElementObj, public Pyramid
{
public:
   PyramidObj() {}

   virtual ~PyramidObj() {}
   int RecType() { return 10010; }
   Pchar  RecName() { return "Pyramid"; }


   long RecDataSize() { return sizeof(struct Pyramid); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   PyramidObj  &operator[](NavCtrl nc) { return (PyramidObj  &)StoreObj::operator[](nc); } PyramidObj  &operator[](const RKeyObj k ) { return (PyramidObj  &)StoreObj::operator[](k ); } PyramidObj  &operator[](const RDbAddr d ) { return (PyramidObj  &)StoreObj::operator[](d ); } PyramidObj  &operator++() { return (PyramidObj  &)StoreObj::operator++(); } PyramidObj  &operator--() { return (PyramidObj  &)StoreObj::operator--(); } PyramidObj  &operator++(int) { return (PyramidObj  &)StoreObj::operator++(); } PyramidObj  &operator--(int) { return (PyramidObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) ComplexObj : public ElementObj, public Complex
{
public:
   ComplexObj() {}

   virtual ~ComplexObj() {}
   int RecType() { return 10011; }
   Pchar  RecName() { return "Complex"; }


   long RecDataSize() { return sizeof(struct Complex); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   ComplexObj  &operator[](NavCtrl nc) { return (ComplexObj  &)StoreObj::operator[](nc); } ComplexObj  &operator[](const RKeyObj k ) { return (ComplexObj  &)StoreObj::operator[](k ); } ComplexObj  &operator[](const RDbAddr d ) { return (ComplexObj  &)StoreObj::operator[](d ); } ComplexObj  &operator++() { return (ComplexObj  &)StoreObj::operator++(); } ComplexObj  &operator--() { return (ComplexObj  &)StoreObj::operator--(); } ComplexObj  &operator++(int) { return (ComplexObj  &)StoreObj::operator++(); } ComplexObj  &operator--(int) { return (ComplexObj  &)StoreObj::operator--(); };
   FacesObj  &operator>>(FacesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20006); return x; } FacesObj  &OwnerUsingSet(FacesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(FacesObj  &m, int set = 20006) { return MemCount((StoreObj  &)m, set); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) FacesObj : public ElementObj, public Faces
{
public:
   FacesObj() {}

   virtual ~FacesObj() {}
   int RecType() { return 10012; }
   Pchar  RecName() { return "Faces"; }


   long RecDataSize() { return sizeof(struct Faces); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   FacesObj  &operator[](NavCtrl nc) { return (FacesObj  &)StoreObj::operator[](nc); } FacesObj  &operator[](const RKeyObj k ) { return (FacesObj  &)StoreObj::operator[](k ); } FacesObj  &operator[](const RDbAddr d ) { return (FacesObj  &)StoreObj::operator[](d ); } FacesObj  &operator++() { return (FacesObj  &)StoreObj::operator++(); } FacesObj  &operator--() { return (FacesObj  &)StoreObj::operator--(); } FacesObj  &operator++(int) { return (FacesObj  &)StoreObj::operator++(); } FacesObj  &operator--(int) { return (FacesObj  &)StoreObj::operator--(); };
   VerticesObj  &operator>>(VerticesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20007); return x; } VerticesObj  &OwnerUsingSet(VerticesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(VerticesObj  &m, int set = 20007) { return MemCount((StoreObj  &)m, set); };
   T_F Connect(ComplexObj  &x, int set = 20006) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ComplexObj  &rO, NavCtrl nc, int set = 20006) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ComplexObj &o, int set = 20006) { return (DisConFrom((StoreObj &)o, set)); } int Set(ComplexObj  &) { return 20006; } ComplexObj  &operator<<(ComplexObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20006); return y; } ComplexObj  &MemberUsingSet(ComplexObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) VerticesObj : public ElementObj, public Vertices
{
public:
   VerticesObj() {}

   virtual ~VerticesObj() {}
   int RecType() { return 10013; }
   Pchar  RecName() { return "Vertices"; }


   long RecDataSize() { return sizeof(struct Vertices); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   VerticesObj  &operator[](NavCtrl nc) { return (VerticesObj  &)StoreObj::operator[](nc); } VerticesObj  &operator[](const RKeyObj k ) { return (VerticesObj  &)StoreObj::operator[](k ); } VerticesObj  &operator[](const RDbAddr d ) { return (VerticesObj  &)StoreObj::operator[](d ); } VerticesObj  &operator++() { return (VerticesObj  &)StoreObj::operator++(); } VerticesObj  &operator--() { return (VerticesObj  &)StoreObj::operator--(); } VerticesObj  &operator++(int) { return (VerticesObj  &)StoreObj::operator++(); } VerticesObj  &operator--(int) { return (VerticesObj  &)StoreObj::operator--(); };
   T_F Connect(FacesObj  &x, int set = 20007) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(FacesObj  &rO, NavCtrl nc, int set = 20007) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(FacesObj &o, int set = 20007) { return (DisConFrom((StoreObj &)o, set)); } int Set(FacesObj  &) { return 20007; } FacesObj  &operator<<(FacesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20007); return y; } FacesObj  &MemberUsingSet(FacesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) PointObj : public ElementObj, public Point
{
public:
   PointObj() {}

   virtual ~PointObj() {}
   int RecType() { return 10014; }
   Pchar  RecName() { return "Point"; }


   long RecDataSize() { return sizeof(struct Point); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   PointObj  &operator[](NavCtrl nc) { return (PointObj  &)StoreObj::operator[](nc); } PointObj  &operator[](const RKeyObj k ) { return (PointObj  &)StoreObj::operator[](k ); } PointObj  &operator[](const RDbAddr d ) { return (PointObj  &)StoreObj::operator[](d ); } PointObj  &operator++() { return (PointObj  &)StoreObj::operator++(); } PointObj  &operator--() { return (PointObj  &)StoreObj::operator--(); } PointObj  &operator++(int) { return (PointObj  &)StoreObj::operator++(); } PointObj  &operator--(int) { return (PointObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) LineObj : public ElementObj, public Line
{
public:
   LineObj() {}

   virtual ~LineObj() {}
    int RecType() { return 10015; }
   Pchar  RecName() { return "Line"; }


   long RecDataSize() { return sizeof(struct Line); }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   LineObj  &operator[](NavCtrl nc) { return (LineObj  &)StoreObj::operator[](nc); } LineObj  &operator[](const RKeyObj k ) { return (LineObj  &)StoreObj::operator[](k ); } LineObj  &operator[](const RDbAddr d ) { return (LineObj  &)StoreObj::operator[](d ); } LineObj  &operator++() { return (LineObj  &)StoreObj::operator++(); } LineObj  &operator--() { return (LineObj  &)StoreObj::operator--(); } LineObj  &operator++(int) { return (LineObj  &)StoreObj::operator++(); } LineObj  &operator--(int) { return (LineObj  &)StoreObj::operator--(); };
   T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) systemObj : public StoreObj
{
public:
   systemObj() {}
   int RecType() { return 9999; }
   Pchar  RecName() { return "system"; }

   PVistaDb  _GetDb() { return triton::DbPtr; };
   ClassesObj  &operator>>(ClassesObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20000); return x; } ClassesObj  &OwnerUsingSet(ClassesObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(ClassesObj  &m, int set = 20000) { return MemCount((StoreObj  &)m, set); };
};

class AllElements:public Polymorph
{
    private:
	 BoxObj		Box;
	 CirTorusObj	CirTorus;
	 ConeObj	Cone;
	 CylinderObj	Cylinder;
	 RectTorusObj	RectTorus;
	 SphereObj	Sphere;
	 PyramidObj	Pyramid;
	 ComplexObj	Complex;
	 PointObj	Point;
	 LineObj	Line;
	 
	 int		*rtn;
    public:
	AllElements();
	~AllElements(); 

	ElementObj *GetElement(){ return (ElementObj *)GetObj(); }
	
	long RecDataSize() { return GetElement()->RecDataSize(); }
	Pvoid RecData() { return GetElement()->RecData(); }


















	
	PVistaDb  _GetDb() { return triton::DbPtr; };
	T_F Connect(ClassesObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(ClassesObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(ClassesObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(ClassesObj  &) { return 20002; } ClassesObj  &operator<<(ClassesObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } ClassesObj  &MemberUsingSet(ClassesObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};

class __declspec(dllexport) Classes_type_KeyObj : public KeyObj
{
private:
   long type;

public:
   Classes_type_KeyObj() : KeyObj(1000L, (Pvoid) &type) {}
   virtual ~Classes_type_KeyObj() {}
};


class __declspec(dllexport) Classes_name_KeyObj : public KeyObj
{
private:
   char name[32];

public:
   Classes_name_KeyObj() : KeyObj(1001L, (Pvoid) &name[0]) {}
   virtual ~Classes_name_KeyObj() {}
};


class __declspec(dllexport) Groups_name_KeyObj : public KeyObj
{
private:
   char name[32];

public:
   Groups_name_KeyObj() : KeyObj(2000L, (Pvoid) &name[0]) {}
   virtual ~Groups_name_KeyObj() {}
};



#line 666 ".\\inc\\../triton/triton.hpp"
#line 5 ".\\inc\\../triton/tritont.hpp"

class TritonTask:public StoreTask
{
	public:
		TritonTask(char *path)
		{
			SetPaths(path,
					 path,
					 0, 0,
					 "pm3mgt");
			lockcomm(3);

			m_triton.OpenMe();
		}
		triton m_triton;
};




#line 26 ".\\inc\\../triton/tritont.hpp"
#line 48 ".\\inc\\common.h"
#line 1 ".\\inc\\../rvqlite/rvqlite1.hpp"







































#line 1 "c:\\rom32\\ominc\\storedb.hpp"




































































































































#line 41 ".\\inc\\../rvqlite/rvqlite1.hpp"
#line 1 "c:\\rom32\\ominc\\storeobj.hpp"























































































































































































#line 42 ".\\inc\\../rvqlite/rvqlite1.hpp"
#line 1 "c:\\rom32\\ominc\\keyobj.hpp"














































#line 43 ".\\inc\\../rvqlite/rvqlite1.hpp"

typedef struct RECORD_ENTRY_S
{
   DB_SHORT rt_file;                   

   DB_SHORT rt_len;                    
   DB_SHORT rt_data;                   
   DB_SHORT rt_fields;                 
   DB_SHORT rt_fdtot;                  
   DB_SHORT rt_flags;                  


} RECORD_ENTRY;

#line 1 ".\\inc\\../rvqlite/rvqLite.h"











































#pragma pack (1)

struct equip {
   char name[60];
   char type[24];
   char area[6];
   char po_no[16];
   char descrip[64];
};

struct engdoc {
   char docno[16];
   char descrip[64];
   char assoc_appl[32];
   char datafile[120];
};

struct progress {
   char discip[32];
   char status[32];
};

struct mproc {
   char name[24];
   char descrip[64];
   char assoc_appl[32];
   char datafile[120];
   long interval;
   long last_done;
   long sched;
   long due;
};

struct mhist {
   char report_no[24];
   long servicedate;
   char assoc_appl[32];
   char datafile[120];
};

struct parts {
   char cat_no[16];
   char descrip[64];
   char millstoreloc[16];
   int in_stock;
   int reorder_at;
   int reorder_qty;
};

struct vendor {
   int vendcode;
   char add_1[32];
   char add_2[32];
   char city[26];
   char cnt_in[30];
   char em_phone[12];
   char ico_name[32];
   char maj_prod[48];
   char name_cde[6];
   char phone[12];
   char state[4];
   char vnd_name[32];
   char zip[12];
   char cat_code[2];
   char sta_code[4];
};

struct commsys {
   char name[32];
   long sch_flush;
   long prj_flush;
   long act_flush;
   long sch_turnkey;
   long prj_turnkey;
   long act_turnkey;
};

struct image_ptr {
   long dba;
};

struct image_equip_box {
   long left;
   long bottom;
   long right;
   long top;
};
#pragma pack ()




















































































































































































#line 313 ".\\inc\\../rvqlite/rvqLite.h"
#line 58 ".\\inc\\../rvqlite/rvqlite1.hpp"












class __declspec(dllexport) rvqLiteDb : public StoreDb
{
public:
   rvqLiteDb() : StoreDb((PStoreDb  *)&DbPtr) {}
   static StoreDb  * DbPtr; void MakeCurrent() { DbPtr = this; };
};

class rvqLiteTask : public StoreTask
{
public:
    rvqLiteDb *thervqLiteDb;
public:
    rvqLiteTask();
	rvqLiteTask(char *user);
    ~rvqLiteTask();
    
    T_F openDatabase( Pchar name );
    T_F closeDatabase();
    T_F initializeDatabase(Pchar name);
};

class __declspec(dllexport) equipObj; typedef equipObj  * PequipObj; typedef equipObj  & RequipObj;
class __declspec(dllexport) engdocObj; typedef engdocObj  * PengdocObj; typedef engdocObj  & RengdocObj;
class __declspec(dllexport) progressObj; typedef progressObj  * PprogressObj; typedef progressObj  & RprogressObj;
class __declspec(dllexport) mprocObj; typedef mprocObj  * PmprocObj; typedef mprocObj  & RmprocObj;
class __declspec(dllexport) mhistObj; typedef mhistObj  * PmhistObj; typedef mhistObj  & RmhistObj;
class __declspec(dllexport) mhist_mproc_intObj; typedef mhist_mproc_intObj  * Pmhist_mproc_intObj; typedef mhist_mproc_intObj  & Rmhist_mproc_intObj;
class __declspec(dllexport) partsObj; typedef partsObj  * PpartsObj; typedef partsObj  & RpartsObj;
class __declspec(dllexport) eq_parts_intObj; typedef eq_parts_intObj  * Peq_parts_intObj; typedef eq_parts_intObj  & Req_parts_intObj;
class __declspec(dllexport) parts_docs_intObj; typedef parts_docs_intObj  * Pparts_docs_intObj; typedef parts_docs_intObj  & Rparts_docs_intObj;
class __declspec(dllexport) vendorObj; typedef vendorObj  * PvendorObj; typedef vendorObj  & RvendorObj;
class __declspec(dllexport) commsysObj; typedef commsysObj  * PcommsysObj; typedef commsysObj  & RcommsysObj;
class __declspec(dllexport) eq_docs_intObj; typedef eq_docs_intObj  * Peq_docs_intObj; typedef eq_docs_intObj  & Req_docs_intObj;
class __declspec(dllexport) eq_mproc_intObj; typedef eq_mproc_intObj  * Peq_mproc_intObj; typedef eq_mproc_intObj  & Req_mproc_intObj;
class __declspec(dllexport) equip_name_KeyObj; typedef equip_name_KeyObj  * Pequip_name_KeyObj; typedef equip_name_KeyObj  & Requip_name_KeyObj;
class __declspec(dllexport) engdoc_docno_KeyObj; typedef engdoc_docno_KeyObj  * Pengdoc_docno_KeyObj; typedef engdoc_docno_KeyObj  & Rengdoc_docno_KeyObj;
class __declspec(dllexport) image_ptrObj; typedef image_ptrObj  * Pimage_ptrObj; typedef image_ptrObj  & Rimage_ptrObj;
class __declspec(dllexport) image_equip_boxObj; typedef image_equip_boxObj  * Pimage_equip_boxObj; typedef image_equip_boxObj  & Rimage_equip_boxObj;
class __declspec(dllexport) mproc_name_KeyObj; typedef mproc_name_KeyObj  * Pmproc_name_KeyObj; typedef mproc_name_KeyObj  & Rmproc_name_KeyObj;
class __declspec(dllexport) parts_cat_no_KeyObj; typedef parts_cat_no_KeyObj  * Pparts_cat_no_KeyObj; typedef parts_cat_no_KeyObj  & Rparts_cat_no_KeyObj;
class __declspec(dllexport) vendor_vendcode_KeyObj; typedef vendor_vendcode_KeyObj  * Pvendor_vendcode_KeyObj; typedef vendor_vendcode_KeyObj  & Rvendor_vendcode_KeyObj;
class __declspec(dllexport) commsys_name_KeyObj; typedef commsys_name_KeyObj  * Pcommsys_name_KeyObj; typedef commsys_name_KeyObj  & Rcommsys_name_KeyObj;
class __declspec(dllexport) image_ptr_dba_KeyObj; typedef image_ptr_dba_KeyObj  * Pimage_ptr_dba_KeyObj; typedef image_ptr_dba_KeyObj  & Rimage_ptr_dba_KeyObj;

class __declspec(dllexport) equipObj : public StoreObj, public equip
{
public:
   equipObj() : StoreObj(KeyObj(0L, name)) {}
   virtual ~equipObj() {}
   int RecType() { return 10000; }
   Pchar  RecName() { return "equip"; }

   virtual void Delete();
   int IsInUse();
   long TotalSize() { return( sizeof(equip) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   equipObj  &operator[](NavCtrl nc) { return (equipObj  &)StoreObj::operator[](nc); } equipObj  &operator[](const RKeyObj k ) { return (equipObj  &)StoreObj::operator[](k ); } equipObj  &operator[](const RDbAddr d ) { return (equipObj  &)StoreObj::operator[](d ); } equipObj  &operator++() { return (equipObj  &)StoreObj::operator++(); } equipObj  &operator--() { return (equipObj  &)StoreObj::operator--(); } equipObj  &operator++(int) { return (equipObj  &)StoreObj::operator++(); } equipObj  &operator--(int) { return (equipObj  &)StoreObj::operator--(); };
   eq_docs_intObj  &operator>>(eq_docs_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20000); return x; } eq_docs_intObj  &OwnerUsingSet(eq_docs_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(eq_docs_intObj  &m, int set = 20000) { return MemCount((StoreObj  &)m, set); };
   progressObj  &operator>>(progressObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20002); return x; } progressObj  &OwnerUsingSet(progressObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(progressObj  &m, int set = 20002) { return MemCount((StoreObj  &)m, set); };
   eq_mproc_intObj  &operator>>(eq_mproc_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20003); return x; } eq_mproc_intObj  &OwnerUsingSet(eq_mproc_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(eq_mproc_intObj  &m, int set = 20003) { return MemCount((StoreObj  &)m, set); };
   mhistObj  &operator>>(mhistObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20005); return x; } mhistObj  &OwnerUsingSet(mhistObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(mhistObj  &m, int set = 20005) { return MemCount((StoreObj  &)m, set); };
   eq_parts_intObj  &operator>>(eq_parts_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20008); return x; } eq_parts_intObj  &OwnerUsingSet(eq_parts_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(eq_parts_intObj  &m, int set = 20008) { return MemCount((StoreObj  &)m, set); };
   equipObj  &operator>>(equipObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20015); return x; } equipObj  &OwnerUsingSet(equipObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(equipObj  &m, int set = 20015) { return MemCount((StoreObj  &)m, set); };
   image_equip_boxObj  &operator>>(image_equip_boxObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20017); return x; } image_equip_boxObj  &OwnerUsingSet(image_equip_boxObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(image_equip_boxObj  &m, int set = 20017) { return MemCount((StoreObj  &)m, set); };
   T_F Connect(commsysObj  &x, int set = 20014) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(commsysObj  &rO, NavCtrl nc, int set = 20014) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(commsysObj &o, int set = 20014) { return (DisConFrom((StoreObj &)o, set)); } int Set(commsysObj  &) { return 20014; } commsysObj  &operator<<(commsysObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20014); return y; } commsysObj  &MemberUsingSet(commsysObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(equipObj  &x, int set = 20015) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20015) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20015) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20015; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20015); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(vendorObj  &x, int set = 20013) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(vendorObj  &rO, NavCtrl nc, int set = 20013) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(vendorObj &o, int set = 20013) { return (DisConFrom((StoreObj &)o, set)); } int Set(vendorObj  &) { return 20013; } vendorObj  &operator<<(vendorObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20013); return y; } vendorObj  &MemberUsingSet(vendorObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) engdocObj : public StoreObj, public engdoc
{
public:
   engdocObj() : StoreObj(KeyObj(1000L, docno)) {}
   virtual ~engdocObj() {}
   int RecType() { return 10001; }
   Pchar  RecName() { return "engdoc"; }

   long TotalSize() { return( sizeof(engdoc) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   engdocObj  &operator[](NavCtrl nc) { return (engdocObj  &)StoreObj::operator[](nc); } engdocObj  &operator[](const RKeyObj k ) { return (engdocObj  &)StoreObj::operator[](k ); } engdocObj  &operator[](const RDbAddr d ) { return (engdocObj  &)StoreObj::operator[](d ); } engdocObj  &operator++() { return (engdocObj  &)StoreObj::operator++(); } engdocObj  &operator--() { return (engdocObj  &)StoreObj::operator--(); } engdocObj  &operator++(int) { return (engdocObj  &)StoreObj::operator++(); } engdocObj  &operator--(int) { return (engdocObj  &)StoreObj::operator--(); };
   eq_docs_intObj  &operator>>(eq_docs_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20001); return x; } eq_docs_intObj  &OwnerUsingSet(eq_docs_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(eq_docs_intObj  &m, int set = 20001) { return MemCount((StoreObj  &)m, set); };
   parts_docs_intObj  &operator>>(parts_docs_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20011); return x; } parts_docs_intObj  &OwnerUsingSet(parts_docs_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(parts_docs_intObj  &m, int set = 20011) { return MemCount((StoreObj  &)m, set); };
};


class __declspec(dllexport) progressObj : public StoreObj, public progress
{
public:
   progressObj() : StoreObj(SetObj(20002)) {}
   virtual ~progressObj() {}
   int RecType() { return 10002; }
   Pchar  RecName() { return "progress"; }

   long TotalSize() { return( sizeof(progress) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   progressObj  &operator[](NavCtrl nc) { return (progressObj  &)StoreObj::operator[](nc); } progressObj  &operator[](const RKeyObj k ) { return (progressObj  &)StoreObj::operator[](k ); } progressObj  &operator[](const RDbAddr d ) { return (progressObj  &)StoreObj::operator[](d ); } progressObj  &operator++() { return (progressObj  &)StoreObj::operator++(); } progressObj  &operator--() { return (progressObj  &)StoreObj::operator--(); } progressObj  &operator++(int) { return (progressObj  &)StoreObj::operator++(); } progressObj  &operator--(int) { return (progressObj  &)StoreObj::operator--(); };
   T_F Connect(equipObj  &x, int set = 20002) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20002) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20002) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20002; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20002); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) mprocObj : public StoreObj, public mproc
{
public:
   mprocObj() : StoreObj(KeyObj(3000L, name)) {}
   virtual ~mprocObj() {}
   int RecType() { return 10003; }
   Pchar  RecName() { return "mproc"; }

   long TotalSize() { return( sizeof(mproc) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   mprocObj  &operator[](NavCtrl nc) { return (mprocObj  &)StoreObj::operator[](nc); } mprocObj  &operator[](const RKeyObj k ) { return (mprocObj  &)StoreObj::operator[](k ); } mprocObj  &operator[](const RDbAddr d ) { return (mprocObj  &)StoreObj::operator[](d ); } mprocObj  &operator++() { return (mprocObj  &)StoreObj::operator++(); } mprocObj  &operator--() { return (mprocObj  &)StoreObj::operator--(); } mprocObj  &operator++(int) { return (mprocObj  &)StoreObj::operator++(); } mprocObj  &operator--(int) { return (mprocObj  &)StoreObj::operator--(); };
   eq_mproc_intObj  &operator>>(eq_mproc_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20004); return x; } eq_mproc_intObj  &OwnerUsingSet(eq_mproc_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(eq_mproc_intObj  &m, int set = 20004) { return MemCount((StoreObj  &)m, set); };
   mhist_mproc_intObj  &operator>>(mhist_mproc_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20006); return x; } mhist_mproc_intObj  &OwnerUsingSet(mhist_mproc_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(mhist_mproc_intObj  &m, int set = 20006) { return MemCount((StoreObj  &)m, set); };
};


class __declspec(dllexport) mhistObj : public StoreObj, public mhist
{
public:
   mhistObj() : StoreObj(KeyObj(4000L, report_no)) {}
   virtual ~mhistObj() {}
   int RecType() { return 10004; }
   Pchar  RecName() { return "mhist"; }

   long TotalSize() { return( sizeof(mhist) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   mhistObj  &operator[](NavCtrl nc) { return (mhistObj  &)StoreObj::operator[](nc); } mhistObj  &operator[](const RKeyObj k ) { return (mhistObj  &)StoreObj::operator[](k ); } mhistObj  &operator[](const RDbAddr d ) { return (mhistObj  &)StoreObj::operator[](d ); } mhistObj  &operator++() { return (mhistObj  &)StoreObj::operator++(); } mhistObj  &operator--() { return (mhistObj  &)StoreObj::operator--(); } mhistObj  &operator++(int) { return (mhistObj  &)StoreObj::operator++(); } mhistObj  &operator--(int) { return (mhistObj  &)StoreObj::operator--(); };
   mhist_mproc_intObj  &operator>>(mhist_mproc_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20007); return x; } mhist_mproc_intObj  &OwnerUsingSet(mhist_mproc_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(mhist_mproc_intObj  &m, int set = 20007) { return MemCount((StoreObj  &)m, set); };
   T_F Connect(equipObj  &x, int set = 20005) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20005) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20005) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20005; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20005); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) mhist_mproc_intObj : public StoreObj
{
public:
   mhist_mproc_intObj() {}
   mhist_mproc_intObj(RSetObj set) : StoreObj(set) {}
   mhist_mproc_intObj(RmprocObj) : StoreObj(SetObj(20006)) {}
   mhist_mproc_intObj(RmhistObj) : StoreObj(SetObj(20007)) {}
   virtual ~mhist_mproc_intObj() {}
   int RecType() { return 10005; }
   Pchar  RecName() { return "mhist_mproc_int"; }


   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   mhist_mproc_intObj  &operator[](NavCtrl nc) { return (mhist_mproc_intObj  &)StoreObj::operator[](nc); } mhist_mproc_intObj  &operator[](const RKeyObj k ) { return (mhist_mproc_intObj  &)StoreObj::operator[](k ); } mhist_mproc_intObj  &operator[](const RDbAddr d ) { return (mhist_mproc_intObj  &)StoreObj::operator[](d ); } mhist_mproc_intObj  &operator++() { return (mhist_mproc_intObj  &)StoreObj::operator++(); } mhist_mproc_intObj  &operator--() { return (mhist_mproc_intObj  &)StoreObj::operator--(); } mhist_mproc_intObj  &operator++(int) { return (mhist_mproc_intObj  &)StoreObj::operator++(); } mhist_mproc_intObj  &operator--(int) { return (mhist_mproc_intObj  &)StoreObj::operator--(); };
   T_F Connect(mprocObj  &x, int set = 20006) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(mprocObj  &rO, NavCtrl nc, int set = 20006) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(mprocObj &o, int set = 20006) { return (DisConFrom((StoreObj &)o, set)); } int Set(mprocObj  &) { return 20006; } mprocObj  &operator<<(mprocObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20006); return y; } mprocObj  &MemberUsingSet(mprocObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(mhistObj  &x, int set = 20007) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(mhistObj  &rO, NavCtrl nc, int set = 20007) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(mhistObj &o, int set = 20007) { return (DisConFrom((StoreObj &)o, set)); } int Set(mhistObj  &) { return 20007; } mhistObj  &operator<<(mhistObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20007); return y; } mhistObj  &MemberUsingSet(mhistObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) partsObj : public StoreObj, public parts
{
public:
   partsObj() : StoreObj(KeyObj(6000L, cat_no)) {}
   partsObj(RvendorObj) : StoreObj(SetObj(20012)) {}
   virtual ~partsObj() {}
   int RecType() { return 10006; }
   Pchar  RecName() { return "parts"; }

   long TotalSize() { return( sizeof(parts) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   partsObj  &operator[](NavCtrl nc) { return (partsObj  &)StoreObj::operator[](nc); } partsObj  &operator[](const RKeyObj k ) { return (partsObj  &)StoreObj::operator[](k ); } partsObj  &operator[](const RDbAddr d ) { return (partsObj  &)StoreObj::operator[](d ); } partsObj  &operator++() { return (partsObj  &)StoreObj::operator++(); } partsObj  &operator--() { return (partsObj  &)StoreObj::operator--(); } partsObj  &operator++(int) { return (partsObj  &)StoreObj::operator++(); } partsObj  &operator--(int) { return (partsObj  &)StoreObj::operator--(); };
   eq_parts_intObj  &operator>>(eq_parts_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20009); return x; } eq_parts_intObj  &OwnerUsingSet(eq_parts_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(eq_parts_intObj  &m, int set = 20009) { return MemCount((StoreObj  &)m, set); };
   parts_docs_intObj  &operator>>(parts_docs_intObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20010); return x; } parts_docs_intObj  &OwnerUsingSet(parts_docs_intObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(parts_docs_intObj  &m, int set = 20010) { return MemCount((StoreObj  &)m, set); };
   T_F Connect(vendorObj  &x, int set = 20012) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(vendorObj  &rO, NavCtrl nc, int set = 20012) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(vendorObj &o, int set = 20012) { return (DisConFrom((StoreObj &)o, set)); } int Set(vendorObj  &) { return 20012; } vendorObj  &operator<<(vendorObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20012); return y; } vendorObj  &MemberUsingSet(vendorObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) eq_parts_intObj : public StoreObj
{
public:
   eq_parts_intObj() {}
   eq_parts_intObj(RSetObj set) : StoreObj(set) {}
   eq_parts_intObj(RequipObj) : StoreObj(SetObj(20008)) {}
   eq_parts_intObj(RpartsObj) : StoreObj(SetObj(20009)) {}
   virtual ~eq_parts_intObj() {}
   int RecType() { return 10007; }
   Pchar  RecName() { return "eq_parts_int"; }


   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   eq_parts_intObj  &operator[](NavCtrl nc) { return (eq_parts_intObj  &)StoreObj::operator[](nc); } eq_parts_intObj  &operator[](const RKeyObj k ) { return (eq_parts_intObj  &)StoreObj::operator[](k ); } eq_parts_intObj  &operator[](const RDbAddr d ) { return (eq_parts_intObj  &)StoreObj::operator[](d ); } eq_parts_intObj  &operator++() { return (eq_parts_intObj  &)StoreObj::operator++(); } eq_parts_intObj  &operator--() { return (eq_parts_intObj  &)StoreObj::operator--(); } eq_parts_intObj  &operator++(int) { return (eq_parts_intObj  &)StoreObj::operator++(); } eq_parts_intObj  &operator--(int) { return (eq_parts_intObj  &)StoreObj::operator--(); };
   T_F Connect(equipObj  &x, int set = 20008) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20008) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20008) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20008; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20008); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(partsObj  &x, int set = 20009) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(partsObj  &rO, NavCtrl nc, int set = 20009) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(partsObj &o, int set = 20009) { return (DisConFrom((StoreObj &)o, set)); } int Set(partsObj  &) { return 20009; } partsObj  &operator<<(partsObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20009); return y; } partsObj  &MemberUsingSet(partsObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) parts_docs_intObj : public StoreObj
{
public:
   parts_docs_intObj() {}
   parts_docs_intObj(RSetObj set) : StoreObj(set) {}
   parts_docs_intObj(RpartsObj) : StoreObj(SetObj(20010)) {}
   parts_docs_intObj(RengdocObj) : StoreObj(SetObj(20011)) {}
   virtual ~parts_docs_intObj() {}
   int RecType() { return 10008; }
   Pchar  RecName() { return "parts_docs_int"; }


   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   parts_docs_intObj  &operator[](NavCtrl nc) { return (parts_docs_intObj  &)StoreObj::operator[](nc); } parts_docs_intObj  &operator[](const RKeyObj k ) { return (parts_docs_intObj  &)StoreObj::operator[](k ); } parts_docs_intObj  &operator[](const RDbAddr d ) { return (parts_docs_intObj  &)StoreObj::operator[](d ); } parts_docs_intObj  &operator++() { return (parts_docs_intObj  &)StoreObj::operator++(); } parts_docs_intObj  &operator--() { return (parts_docs_intObj  &)StoreObj::operator--(); } parts_docs_intObj  &operator++(int) { return (parts_docs_intObj  &)StoreObj::operator++(); } parts_docs_intObj  &operator--(int) { return (parts_docs_intObj  &)StoreObj::operator--(); };
   T_F Connect(partsObj  &x, int set = 20010) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(partsObj  &rO, NavCtrl nc, int set = 20010) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(partsObj &o, int set = 20010) { return (DisConFrom((StoreObj &)o, set)); } int Set(partsObj  &) { return 20010; } partsObj  &operator<<(partsObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20010); return y; } partsObj  &MemberUsingSet(partsObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(engdocObj  &x, int set = 20011) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(engdocObj  &rO, NavCtrl nc, int set = 20011) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(engdocObj &o, int set = 20011) { return (DisConFrom((StoreObj &)o, set)); } int Set(engdocObj  &) { return 20011; } engdocObj  &operator<<(engdocObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20011); return y; } engdocObj  &MemberUsingSet(engdocObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) vendorObj : public StoreObj, public vendor
{
public:
   vendorObj() : StoreObj(KeyObj(9000L, vendcode)) {}
   virtual ~vendorObj() {}
   int RecType() { return 10009; }
   Pchar  RecName() { return "vendor"; }

   long TotalSize() { return( sizeof(vendor) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   vendorObj  &operator[](NavCtrl nc) { return (vendorObj  &)StoreObj::operator[](nc); } vendorObj  &operator[](const RKeyObj k ) { return (vendorObj  &)StoreObj::operator[](k ); } vendorObj  &operator[](const RDbAddr d ) { return (vendorObj  &)StoreObj::operator[](d ); } vendorObj  &operator++() { return (vendorObj  &)StoreObj::operator++(); } vendorObj  &operator--() { return (vendorObj  &)StoreObj::operator--(); } vendorObj  &operator++(int) { return (vendorObj  &)StoreObj::operator++(); } vendorObj  &operator--(int) { return (vendorObj  &)StoreObj::operator--(); };
   partsObj  &operator>>(partsObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20012); return x; } partsObj  &OwnerUsingSet(partsObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(partsObj  &m, int set = 20012) { return MemCount((StoreObj  &)m, set); };
   equipObj  &operator>>(equipObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20013); return x; } equipObj  &OwnerUsingSet(equipObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(equipObj  &m, int set = 20013) { return MemCount((StoreObj  &)m, set); };
};

class __declspec(dllexport) commsysObj : public StoreObj, public commsys
{
public:
    commsysObj() : StoreObj(KeyObj(10000L, name)) {}
    virtual ~commsysObj() {}
    int RecType() { return 10010; }
    Pchar  RecName() { return "commsys"; }
    
    long TotalSize() { return( sizeof(commsys) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };
    
    virtual void Delete();
    PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
    commsysObj  &operator[](NavCtrl nc) { return (commsysObj  &)StoreObj::operator[](nc); } commsysObj  &operator[](const RKeyObj k ) { return (commsysObj  &)StoreObj::operator[](k ); } commsysObj  &operator[](const RDbAddr d ) { return (commsysObj  &)StoreObj::operator[](d ); } commsysObj  &operator++() { return (commsysObj  &)StoreObj::operator++(); } commsysObj  &operator--() { return (commsysObj  &)StoreObj::operator--(); } commsysObj  &operator++(int) { return (commsysObj  &)StoreObj::operator++(); } commsysObj  &operator--(int) { return (commsysObj  &)StoreObj::operator--(); };
    equipObj  &operator>>(equipObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20014); return x; } equipObj  &OwnerUsingSet(equipObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(equipObj  &m, int set = 20014) { return MemCount((StoreObj  &)m, set); };
};


class __declspec(dllexport) eq_docs_intObj : public StoreObj
{
public:
   eq_docs_intObj() {}
   eq_docs_intObj(RSetObj set) : StoreObj(set) {}
   eq_docs_intObj(RequipObj) : StoreObj(SetObj(20000)) {}
   eq_docs_intObj(RengdocObj) : StoreObj(SetObj(20001)) {}
   virtual ~eq_docs_intObj() {}
   int RecType() { return 10011; }
   Pchar  RecName() { return "eq_docs_int"; }


   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   eq_docs_intObj  &operator[](NavCtrl nc) { return (eq_docs_intObj  &)StoreObj::operator[](nc); } eq_docs_intObj  &operator[](const RKeyObj k ) { return (eq_docs_intObj  &)StoreObj::operator[](k ); } eq_docs_intObj  &operator[](const RDbAddr d ) { return (eq_docs_intObj  &)StoreObj::operator[](d ); } eq_docs_intObj  &operator++() { return (eq_docs_intObj  &)StoreObj::operator++(); } eq_docs_intObj  &operator--() { return (eq_docs_intObj  &)StoreObj::operator--(); } eq_docs_intObj  &operator++(int) { return (eq_docs_intObj  &)StoreObj::operator++(); } eq_docs_intObj  &operator--(int) { return (eq_docs_intObj  &)StoreObj::operator--(); };
   T_F Connect(equipObj  &x, int set = 20000) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20000) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20000) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20000; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20000); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(engdocObj  &x, int set = 20001) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(engdocObj  &rO, NavCtrl nc, int set = 20001) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(engdocObj &o, int set = 20001) { return (DisConFrom((StoreObj &)o, set)); } int Set(engdocObj  &) { return 20001; } engdocObj  &operator<<(engdocObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20001); return y; } engdocObj  &MemberUsingSet(engdocObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};


class __declspec(dllexport) eq_mproc_intObj : public StoreObj
{
public:
   eq_mproc_intObj() {}
   eq_mproc_intObj(RSetObj set) : StoreObj(set) {}
   eq_mproc_intObj(RequipObj) : StoreObj(SetObj(20003)) {}
   eq_mproc_intObj(RmprocObj) : StoreObj(SetObj(20004)) {}
   virtual ~eq_mproc_intObj() {}
   int RecType() { return 10012; }
   Pchar  RecName() { return "eq_mproc_int"; }


   
   virtual void Delete();
   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   eq_mproc_intObj  &operator[](NavCtrl nc) { return (eq_mproc_intObj  &)StoreObj::operator[](nc); } eq_mproc_intObj  &operator[](const RKeyObj k ) { return (eq_mproc_intObj  &)StoreObj::operator[](k ); } eq_mproc_intObj  &operator[](const RDbAddr d ) { return (eq_mproc_intObj  &)StoreObj::operator[](d ); } eq_mproc_intObj  &operator++() { return (eq_mproc_intObj  &)StoreObj::operator++(); } eq_mproc_intObj  &operator--() { return (eq_mproc_intObj  &)StoreObj::operator--(); } eq_mproc_intObj  &operator++(int) { return (eq_mproc_intObj  &)StoreObj::operator++(); } eq_mproc_intObj  &operator--(int) { return (eq_mproc_intObj  &)StoreObj::operator--(); };
   T_F Connect(equipObj  &x, int set = 20003) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20003) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20003) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20003; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20003); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(mprocObj  &x, int set = 20004) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(mprocObj  &rO, NavCtrl nc, int set = 20004) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(mprocObj &o, int set = 20004) { return (DisConFrom((StoreObj &)o, set)); } int Set(mprocObj  &) { return 20004; } mprocObj  &operator<<(mprocObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20004); return y; } mprocObj  &MemberUsingSet(mprocObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};

class __declspec(dllexport) image_ptrObj : public StoreObj, public image_ptr
{




public:
   image_ptrObj() : StoreObj(KeyObj(13000L, (Pvoid )&(image_ptr::dba)))  {}
   virtual ~image_ptrObj() {}
   int RecType() { return 10013; }

   long TotalSize() { return( sizeof(image_ptr) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };

   virtual void Delete();

   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   image_ptrObj  &operator[](NavCtrl nc) { return (image_ptrObj  &)StoreObj::operator[](nc); } image_ptrObj  &operator[](const RKeyObj k ) { return (image_ptrObj  &)StoreObj::operator[](k ); } image_ptrObj  &operator[](const RDbAddr d ) { return (image_ptrObj  &)StoreObj::operator[](d ); } image_ptrObj  &operator++() { return (image_ptrObj  &)StoreObj::operator++(); } image_ptrObj  &operator--() { return (image_ptrObj  &)StoreObj::operator--(); } image_ptrObj  &operator++(int) { return (image_ptrObj  &)StoreObj::operator++(); } image_ptrObj  &operator--(int) { return (image_ptrObj  &)StoreObj::operator--(); };
   image_equip_boxObj  &operator>>(image_equip_boxObj  &x) { ((StoreObj  *)&x)->FromOwner((StoreObj  *)this, 20016); return x; } image_equip_boxObj  &OwnerUsingSet(image_equip_boxObj  &y, int set) { ((StoreObj  *)&y)->FromOwner((StoreObj  *)this, set); return y; } long Members(image_equip_boxObj  &m, int set = 20016) { return MemCount((StoreObj  &)m, set); };
};


class __declspec(dllexport) image_equip_boxObj : public StoreObj, public image_equip_box
{







public:
   image_equip_boxObj() {}
   image_equip_boxObj(RSetObj set) : StoreObj(set) {}
   virtual ~image_equip_boxObj() {}
   int RecType() { return 10014; }

   long TotalSize() { return( sizeof(image_equip_box) ); } void MakeEmpty() { memset( RecData(), 0, (unsigned int)TotalSize() );} Pvoid RecData() { return StoreObj::RecData(); };

   virtual void Delete();

   PVistaDb  _GetDb() { return rvqLiteDb::DbPtr; };
   image_equip_boxObj  &operator[](NavCtrl nc) { return (image_equip_boxObj  &)StoreObj::operator[](nc); } image_equip_boxObj  &operator[](const RKeyObj k ) { return (image_equip_boxObj  &)StoreObj::operator[](k ); } image_equip_boxObj  &operator[](const RDbAddr d ) { return (image_equip_boxObj  &)StoreObj::operator[](d ); } image_equip_boxObj  &operator++() { return (image_equip_boxObj  &)StoreObj::operator++(); } image_equip_boxObj  &operator--() { return (image_equip_boxObj  &)StoreObj::operator--(); } image_equip_boxObj  &operator++(int) { return (image_equip_boxObj  &)StoreObj::operator++(); } image_equip_boxObj  &operator--(int) { return (image_equip_boxObj  &)StoreObj::operator--(); };
   T_F Connect(image_ptrObj  &x, int set = 20016) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(image_ptrObj  &rO, NavCtrl nc, int set = 20016) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(image_ptrObj &o, int set = 20016) { return (DisConFrom((StoreObj &)o, set)); } int Set(image_ptrObj  &) { return 20016; } image_ptrObj  &operator<<(image_ptrObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20016); return y; } image_ptrObj  &MemberUsingSet(image_ptrObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
   T_F Connect(equipObj  &x, int set = 20017) { return (ConnectTo((StoreObj  &)x, set)); } StoreObj  &GotoSet(equipObj  &rO, NavCtrl nc, int set = 20017) { return (StoreObj  &)GotoMember((StoreObj  &)rO, set, nc); } T_F DisConnect(equipObj &o, int set = 20017) { return (DisConFrom((StoreObj &)o, set)); } int Set(equipObj  &) { return 20017; } equipObj  &operator<<(equipObj  &y) { ((StoreObj  *)&y)-> FromMember((StoreObj  *)(this), 20017); return y; } equipObj  &MemberUsingSet(equipObj  &x, int set) { ((StoreObj  *)&x)-> FromMember((StoreObj  *)(this), set); return x; };
};



class __declspec(dllexport) equip_name_KeyObj : public KeyObj
{
public:
   char name[60];

   equip_name_KeyObj() : KeyObj(0L, (Pvoid) &name[0]) {}
   virtual ~equip_name_KeyObj() {}
};

class __declspec(dllexport) engdoc_docno_KeyObj : public KeyObj
{
public:
    char docno[16];
    
    engdoc_docno_KeyObj() : KeyObj(1000L, (Pvoid) &docno[0]) {}
    virtual ~engdoc_docno_KeyObj() {}
};

class __declspec(dllexport) mproc_name_KeyObj : public KeyObj
{
public:
   char name[24];

   mproc_name_KeyObj() : KeyObj(3000L, (Pvoid) &name[0]) {}
   virtual ~mproc_name_KeyObj() {}
};


class __declspec(dllexport) parts_cat_no_KeyObj : public KeyObj
{
public:
   char cat_no[16];

   parts_cat_no_KeyObj() : KeyObj(6000L, (Pvoid) &cat_no[0]) {}
   virtual ~parts_cat_no_KeyObj() {}
};


class __declspec(dllexport) vendor_vendcode_KeyObj : public KeyObj
{
public:
   int vendcode;

   vendor_vendcode_KeyObj() : KeyObj(9000L, (Pvoid) &vendcode) {}
   virtual ~vendor_vendcode_KeyObj() {}
};

class __declspec(dllexport) commsys_name_KeyObj : public KeyObj
{
public:
    char name[32];
    
    commsys_name_KeyObj() : KeyObj(10000L, (Pvoid) &name[0]) {}
    virtual ~commsys_name_KeyObj() {}
};

class __declspec(dllexport) image_ptr_dba_KeyObj : public KeyObj
{
public:
    long dba;
    
    image_ptr_dba_KeyObj() : KeyObj(13000L, (Pvoid) &dba) {}
    virtual ~image_ptr_dba_KeyObj() {}
};
#line 483 ".\\inc\\../rvqlite/rvqlite1.hpp"
#line 49 ".\\inc\\common.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\rdm_utils.h"





























int IsTransActive(DB_TASK *task);
int rdmTransBegin( char *trans_name, DB_TASK *task );
int rdmTransEnd( DB_TASK *task);
int rdmTransAbort( DB_TASK *task );
int   __stdcall dt_internals(DB_TASK  * ,int ,int ,int ,void  * ,unsigned);
int rdmRecLock( int nRecType, char *cpLockType, DB_TASK *task, int nDbn );
int rdmRecFree( int nRecType, DB_TASK *task, int nDbn );
int rdmGroupLock( int nCount, LOCK_REQUEST *lrPacket, DB_TASK *task, int nDbn );
int rdmGroupFree( int nCount, LOCK_REQUEST *lrPacket, DB_TASK *task, int nDbn );
int rdmFreeAll( DB_TASK *task, int nDbn );
int rdmSetFree( int setID, DB_TASK *task, int dbn );
int rdmSetLock( int setID, char *lockType, DB_TASK *task, int dbn );
int rdmRecWrite( void *value, int dbn, char *file, int lineno );
int rdmFillNew( int rectype, void *value, DB_TASK *task, int dbn, char *file, int lineno );
#line 45 "C:\\busbyj\\dev\\Pm3 Lite\\rdm_utils.h"
#line 50 ".\\inc\\common.h"

BOOL OpenImageByName( char *name );















	extern DB_TASK	Mytask;
	extern TritonTask *t;
	extern int dbn;
	extern rvqLiteTask *rvqTask;
	extern char *reg_strings[];





#line 78 ".\\inc\\common.h"

typedef struct {
	double x,y,z;
} _Point3d;

void ConvertPoint(_Point3d *in_ptg, _Point3d *out_ptg);

int Calc3DPoint( char *pszBundle, _Point3d *ptr3d=0 );
char *SearchForBundle( );
char *SearchForBundleSpecific( char **ImageNames, int count );
int getSurveyModelTransform(double *transform, const char *projectID);
int	saveSurveyModelTransform(double *transform, const char *m_ProjectID);
int getMeasurementTransform(double *transform, const char *projectID);
int	saveMeasurementTransform(double *transform, const char *m_ProjectID);
char *ConvertUnits(char *s, int size, double number);
BOOL EnglishToMetric( char *source, double *destination);


#line 1 ".\\datatbl.h"










class COleFont;
class CDTCurCell;
class CDTRowSet;
class CDTColumnSet;
class CDTCellSet;




class CDatatbl : public CWnd
{
protected:
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const  CRuntimeClass classCDatatbl; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x4c1df000, 0xd3ff, 0x11ce, { 0x84, 0xba, 0x48, 0x4f, 0x4d, 0xf9, 0x14, 0xe6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = 0)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = 0, BOOL bStorage = 0,
		BSTR bstrLicKey = 0)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }


public:
	unsigned long GetGridLineColor();
	void SetGridLineColor(unsigned long);
	BOOL GetAllowPaintCellEvent();
	void SetAllowPaintCellEvent(BOOL);
	BOOL GetVertGridLines();
	void SetVertGridLines(BOOL);
	long GetVertScrollBar();
	void SetVertScrollBar(long);
	BOOL GetVertSplitPane();
	void SetVertSplitPane(BOOL);
	BOOL GetHorzSplitPane();
	void SetHorzSplitPane(BOOL);
	unsigned long GetSelBackColor();
	void SetSelBackColor(unsigned long);
	long GetHorzScrollBar();
	void SetHorzScrollBar(long);
	BOOL GetHorzGridLines();
	void SetHorzGridLines(BOOL);
	unsigned long GetSelForeColor();
	void SetSelForeColor(unsigned long);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	long GetDropDownType();
	void SetDropDownType(long);
	long GetVirtualMemType();
	void SetVirtualMemType(long);
	BOOL GetDroppedState();
	void SetDroppedState(BOOL);
	CDTCurCell GetCurCell();
	void SetCurCell(LPDISPATCH);
	CDTRowSet GetRowSet();
	void SetRowSet(LPDISPATCH);
	CDTColumnSet GetColumnSet();
	void SetColumnSet(LPDISPATCH);
	CDTCellSet GetCellSet();
	void SetCellSet(LPDISPATCH);
	long GetVMDataKey();
	void SetVMDataKey(long);
	float GetLeftPaneWidth();
	void SetLeftPaneWidth(float);
	float GetTopPaneHeight();
	void SetTopPaneHeight(float);
	BOOL GetRedraw();
	void SetRedraw(BOOL);
	LPUNKNOWN GetDataSource();
	void SetDataSource(LPUNKNOWN);
	long GetBorderStyle();
	void SetBorderStyle(long);
	long GetAppearance();
	void SetAppearance(long);
	long GetMousePointer();
	void SetMousePointer(long);
	BOOL GetLargeData();
	void SetLargeData(BOOL);


public:
	void Reset();
	void VMReady(long NumRows);
	void DBAutoConfig();
	void AboutBox();
};

#line 119 ".\\datatbl.h"
#line 97 ".\\inc\\common.h"






























enum MyMSG 
{
	UM_NEW_CLIP_VOLUME = 0x0400+1722,
	UM_CURRENT_ELEMENT_CHANGE,
	UM_NEW_TREE_NODE,
	UM_UNITS_CHANGE
};










#line 145 ".\\inc\\common.h"
#line 20 ".\\inc\\fotobrow.h"
#line 1 "c:\\rom32\\ominc\\storeobj.hpp"























































































































































































#line 21 ".\\inc\\fotobrow.h"



 
extern HCURSOR hMainCursor; 		







class CFotobrowApp : public CWinApp
{
public:
	CFotobrowApp();
	~CFotobrowApp();

	CMultiDocTemplate* m_pDocTemplate;
	CMultiDocTemplate* m_pGraphicTemplate;
	CMultiDocTemplate* m_pZoneGridTemplate;
	CMultiDocTemplate* m_pColumnGridTemplate;
	CMultiDocTemplate* m_pElementListTemplate;
		
	CObList m_DocList;

	DB_TASK MainTask;

	int m_Units;
	CString m_ImagePath;
	double m_Transform[12];
	CString m_DatabasePath;
	CString m_ProjectName;
	double m_imageReduction;

	int databaseOpenFlag;

	void SetImagePath(char *s) { m_ImagePath = s; }
	void SetUnits(int i ) { m_Units = i; }

	 LONG OnSetProject( struct EnvStrings *pStr );


	
	
	public:
	virtual BOOL InitInstance();
	virtual int ExitInstance();
	


	void GetDocumentList( CObList *pDocList );
	void KillTheTAF();
	
	double * GetTransform() { return m_Transform; }
	void SetTransform( double data[] ) { for( int i=0; i<12; m_Transform[i] = data[i], i++ );
							saveMeasurementTransform(m_Transform, m_ProjectName);}

	void WriteProfile();
	int ReadProfile();
	int ReadRegistry();
	void WriteRegistry();

	int isDatabaseOpen(){ return databaseOpenFlag; }

	COleTemplateServer m_server;
		

	
	 void OnAppAbout();
	 void OnFileNew();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
public:
	void AddDocToList(CDocument *p);
	void DelDocFromList(CDocument *p);
	CObList *GetDocList(){ return &m_DocList; }
};



#line 103 ".\\inc\\fotobrow.h"
#line 6 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.h"









#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\Datatbl.h"






















































































































#line 11 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.h"

#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/Ptg3DNode.h"



#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/HierElem.h"




#line 1 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/HierElem.h"


#pragma warning (disable : 4244)













#line 23 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/HierElem.h"


#pragma warning ( disable :  )
#line 27 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/HierElem.h"









class HierElem {
    public: static char *className; virtual const char *getType(){return className;} private:;
    
    public:
	HierElem();
	virtual ~HierElem();
	void setOwner( HierElem *owner ) { elemOwner = owner; }
	HierElem *getOwner() { return elemOwner; }
	void addMember( HierElem *newMember );
	int getMemberCount() { return elemMembers.GetCount(); }
	CList<HierElem *, HierElem *>&getMemberList() { return elemMembers; }

    private:
	HierElem *elemOwner;
	CList<HierElem *, HierElem *> elemMembers;
	
	void initVars();
};

#line 56 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/HierElem.h"
#line 5 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/Ptg3DNode.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/PtgTransMatrix.h"



#line 1 ".\\photog\\photog_math.h"
#line 1 ".\\photog\\mathsubs.h"



#line 1 "C:\\MSDEV\\INCLUDE\\malloc.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\malloc.h"























































































































































































#line 5 ".\\photog\\mathsubs.h"
#line 1 "C:\\MSDEV\\INCLUDE\\stdio.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\stdio.h"



































































































































































































































































































































































































































































































































#line 6 ".\\photog\\mathsubs.h"
#line 1 "C:\\MSDEV\\INCLUDE\\math.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\math.h"






#line 25 "C:\\MSDEV\\INCLUDE\\math.h"







#pragma pack(push,8)
#line 34 "C:\\MSDEV\\INCLUDE\\math.h"


extern "C" {
#line 38 "C:\\MSDEV\\INCLUDE\\math.h"














































#line 85 "C:\\MSDEV\\INCLUDE\\math.h"







struct _exception {
        int type;       
        char *name;     
        double arg1;    
        double arg2;    
        double retval;  
        } ;


#line 102 "C:\\MSDEV\\INCLUDE\\math.h"







struct _complex {
        double x,y; 
        } ;




#line 117 "C:\\MSDEV\\INCLUDE\\math.h"


#line 120 "C:\\MSDEV\\INCLUDE\\math.h"
#line 121 "C:\\MSDEV\\INCLUDE\\math.h"































__declspec(dllimport) extern double _HUGE;
#line 154 "C:\\MSDEV\\INCLUDE\\math.h"
#line 155 "C:\\MSDEV\\INCLUDE\\math.h"



























#line 183 "C:\\MSDEV\\INCLUDE\\math.h"
        int     __cdecl abs(int);
        double  __cdecl acos(double);
        double  __cdecl asin(double);
        double  __cdecl atan(double);
        double  __cdecl atan2(double, double);
        double  __cdecl cos(double);
        double  __cdecl cosh(double);
        double  __cdecl exp(double);
        double  __cdecl fabs(double);
        double  __cdecl fmod(double, double);
        long    __cdecl labs(long);
        double  __cdecl log(double);
        double  __cdecl log10(double);
        double  __cdecl pow(double, double);
        double  __cdecl sin(double);
        double  __cdecl sinh(double);
        double  __cdecl tan(double);
        double  __cdecl tanh(double);
        double  __cdecl sqrt(double);
#line 203 "C:\\MSDEV\\INCLUDE\\math.h"
__declspec(dllimport) double  __cdecl atof(const char *);
__declspec(dllimport) double  __cdecl _cabs(struct _complex);
__declspec(dllimport) double  __cdecl ceil(double);
__declspec(dllimport) double  __cdecl floor(double);
__declspec(dllimport) double  __cdecl frexp(double, int *);
__declspec(dllimport) double  __cdecl _hypot(double, double);
__declspec(dllimport) double  __cdecl _j0(double);
__declspec(dllimport) double  __cdecl _j1(double);
__declspec(dllimport) double  __cdecl _jn(int, double);
__declspec(dllimport) double  __cdecl ldexp(double, int);
        int     __cdecl _matherr(struct _exception *);
__declspec(dllimport) double  __cdecl modf(double, double *);

__declspec(dllimport) double  __cdecl _y0(double);
__declspec(dllimport) double  __cdecl _y1(double);
__declspec(dllimport) double  __cdecl _yn(int, double);











































































inline long double acosl(long double _X)
	{return (acos((double)_X)); }
inline long double asinl(long double _X)
	{return (asin((double)_X)); }
inline long double atanl(long double _X)
	{return (atan((double)_X)); }
inline long double atan2l(long double _X, long double _Y)
	{return (atan2((double)_X, (double)_Y)); }
inline long double ceill(long double _X)
	{return (ceil((double)_X)); }
inline long double cosl(long double _X)
	{return (cos((double)_X)); }
inline long double coshl(long double _X)
	{return (cosh((double)_X)); }
inline long double expl(long double _X)
	{return (exp((double)_X)); }
inline long double fabsl(long double _X)
	{return (fabs((double)_X)); }
inline long double floorl(long double _X)
	{return (floor((double)_X)); }
inline long double fmodl(long double _X, long double _Y)
	{return (fmod((double)_X, (double)_Y)); }
inline long double frexpl(long double _X, int *_Y)
	{return (frexp((double)_X, _Y)); }
inline long double ldexpl(long double _X, int _Y)
	{return (ldexp((double)_X, _Y)); }
inline long double logl(long double _X)
	{return (log((double)_X)); }
inline long double log10l(long double _X)
	{return (log10((double)_X)); }
inline long double modfl(long double _X, long double *_Y)
	{double _Di, _Df = modf((double)_X, &_Di);
	*_Y = (long double)_Di;
	return (_Df); }
inline long double powl(long double _X, long double _Y)
	{return (pow((double)_X, (double)_Y)); }
inline long double sinl(long double _X)
	{return (sin((double)_X)); }
inline long double sinhl(long double _X)
	{return (sinh((double)_X)); }
inline long double sqrtl(long double _X)
	{return (sqrt((double)_X)); }
inline long double tanl(long double _X)
	{return (tan((double)_X)); }
inline long double tanhl(long double _X)
	{return (tanh((double)_X)); }

inline float frexpf(float _X, int *_Y)
	{return ((float)frexp((double)_X, _Y)); }
inline float ldexpf(float _X, int _Y)
	{return ((float)ldexp((double)_X, _Y)); }

inline float acosf(float _X)
	{return ((float)acos((double)_X)); }
inline float asinf(float _X)
	{return ((float)asin((double)_X)); }
inline float atanf(float _X)
	{return ((float)atan((double)_X)); }
inline float atan2f(float _X, float _Y)
	{return ((float)atan2((double)_X, (double)_Y)); }
inline float ceilf(float _X)
	{return ((float)ceil((double)_X)); }
inline float cosf(float _X)
	{return ((float)cos((double)_X)); }
inline float coshf(float _X)
	{return ((float)cosh((double)_X)); }
inline float expf(float _X)
	{return ((float)exp((double)_X)); }
inline float fabsf(float _X)
	{return ((float)fabs((double)_X)); }
inline float floorf(float _X)
	{return ((float)floor((double)_X)); }
inline float fmodf(float _X, float _Y)
	{return ((float)fmod((double)_X, (double)_Y)); }
inline float logf(float _X)
	{return ((float)log((double)_X)); }
inline float log10f(float _X)
	{return ((float)log10((double)_X)); }
inline float modff(float _X, float *_Y)
	{ double _Di, _Df = modf((double)_X, &_Di);
	*_Y = (float)_Di;
	return ((float)_Df); }
inline float powf(float _X, float _Y)
	{return ((float)pow((double)_X, (double)_Y)); }
inline float sinf(float _X)
	{return ((float)sin((double)_X)); }
inline float sinhf(float _X)
	{return ((float)sinh((double)_X)); }
inline float sqrtf(float _X)
	{return ((float)sqrt((double)_X)); }
inline float tanf(float _X)
	{return ((float)tan((double)_X)); }
inline float tanhf(float _X)
	{return ((float)tanh((double)_X)); }
#line 389 "C:\\MSDEV\\INCLUDE\\math.h"
#line 390 "C:\\MSDEV\\INCLUDE\\math.h"
#line 391 "C:\\MSDEV\\INCLUDE\\math.h"
#line 392 "C:\\MSDEV\\INCLUDE\\math.h"














#line 407 "C:\\MSDEV\\INCLUDE\\math.h"



























__declspec(dllimport) extern double HUGE;

__declspec(dllimport) double  __cdecl cabs(struct _complex);
__declspec(dllimport) double  __cdecl hypot(double, double);
__declspec(dllimport) double  __cdecl j0(double);
__declspec(dllimport) double  __cdecl j1(double);
__declspec(dllimport) double  __cdecl jn(int, double);
        int     __cdecl _matherr(struct _exception *);
__declspec(dllimport) double  __cdecl y0(double);
__declspec(dllimport) double  __cdecl y1(double);
__declspec(dllimport) double  __cdecl yn(int, double);

#line 447 "C:\\MSDEV\\INCLUDE\\math.h"
#line 448 "C:\\MSDEV\\INCLUDE\\math.h"

#line 450 "C:\\MSDEV\\INCLUDE\\math.h"




































































}



template<class _TYPE> inline
	_TYPE _Pow_int(_TYPE _X, int _Y)
	{int _N = _Y;
	if (_Y < 0)
		_N = -_N;
	for (_TYPE _Z = _TYPE(1); ; _X *= _X)
		{if ((_N & 1) != 0)
			_Z *= _X;
		if ((_N >>= 1) == 0)
			return (_Y < 0 ? _TYPE(1) / _Z : _Z); }}
inline double abs(double _X)
	{return (fabs(_X)); }
inline double pow(double _X, int _Y)
	{return (_Pow_int(_X, _Y)); }
inline double pow(int _X, int _Y)
	{return (_Pow_int(_X, _Y)); }
inline float abs(float _X)
	{return (fabsf(_X)); }
inline float acos(float _X)
	{return (acosf(_X)); }
inline float asin(float _X)
	{return (asinf(_X)); }
inline float atan(float _X)
	{return (atanf(_X)); }
inline float atan2(float _Y, float _X)
	{return (atan2f(_Y, _X)); }
inline float ceil(float _X)
	{return (ceilf(_X)); }
inline float cos(float _X)
	{return (cosf(_X)); }
inline float cosh(float _X)
	{return (coshf(_X)); }
inline float exp(float _X)
	{return (expf(_X)); }
inline float fabs(float _X)
	{return (fabsf(_X)); }
inline float floor(float _X)
	{return (floorf(_X)); }
inline float fmod(float _X, float _Y)
	{return (fmodf(_X, _Y)); }
inline float frexp(float _X, int * _Y)
	{return (frexpf(_X, _Y)); }
inline float ldexp(float _X, int _Y)
	{return (ldexpf(_X, _Y)); }
inline float log(float _X)
	{return (logf(_X)); }
inline float log10(float _X)
	{return (log10f(_X)); }
inline float modf(float _X, float * _Y)
	{return (modff(_X, _Y)); }
inline float pow(float _X, float _Y)
	{return (powf(_X, _Y)); }
inline float pow(float _X, int _Y)
	{return (_Pow_int(_X, _Y)); }
inline float sin(float _X)
	{return (sinf(_X)); }
inline float sinh(float _X)
	{return (sinhf(_X)); }
inline float sqrt(float _X)
	{return (sqrtf(_X)); }
inline float tan(float _X)
	{return (tanf(_X)); }
inline float tanh(float _X)
	{return (tanhf(_X)); }
inline long double abs(long double _X)
	{return (fabsl(_X)); }
inline long double acos(long double _X)
	{return (acosl(_X)); }
inline long double asin(long double _X)
	{return (asinl(_X)); }
inline long double atan(long double _X)
	{return (atanl(_X)); }
inline long double atan2(long double _Y, long double _X)
	{return (atan2l(_Y, _X)); }
inline long double ceil(long double _X)
	{return (ceill(_X)); }
inline long double cos(long double _X)
	{return (cosl(_X)); }
inline long double cosh(long double _X)
	{return (coshl(_X)); }
inline long double exp(long double _X)
	{return (expl(_X)); }
inline long double fabs(long double _X)
	{return (fabsl(_X)); }
inline long double floor(long double _X)
	{return (floorl(_X)); }
inline long double fmod(long double _X, long double _Y)
	{return (fmodl(_X, _Y)); }
inline long double frexp(long double _X, int * _Y)
	{return (frexpl(_X, _Y)); }
inline long double ldexp(long double _X, int _Y)
	{return (ldexpl(_X, _Y)); }
inline long double log(long double _X)
	{return (logl(_X)); }
inline long double log10(long double _X)
	{return (log10l(_X)); }
inline long double modf(long double _X, long double * _Y)
	{return (modfl(_X, _Y)); }
inline long double pow(long double _X, long double _Y)
	{return (powl(_X, _Y)); }
inline long double pow(long double _X, int _Y)
	{return (_Pow_int(_X, _Y)); }
inline long double sin(long double _X)
	{return (sinl(_X)); }
inline long double sinh(long double _X)
	{return (sinhl(_X)); }
inline long double sqrt(long double _X)
	{return (sqrtl(_X)); }
inline long double tan(long double _X)
	{return (tanl(_X)); }
inline long double tanh(long double _X)
	{return (tanhl(_X)); }

#line 636 "C:\\MSDEV\\INCLUDE\\math.h"
#line 637 "C:\\MSDEV\\INCLUDE\\math.h"


#pragma pack(pop)
#line 641 "C:\\MSDEV\\INCLUDE\\math.h"

#line 643 "C:\\MSDEV\\INCLUDE\\math.h"

#line 7 ".\\photog\\mathsubs.h"





#line 13 ".\\photog\\mathsubs.h"






typedef double *VECTOR;
typedef VECTOR PNT;
typedef double **MATRIX;
typedef MATRIX *PNTLST;
typedef MATRIX **MATLST;

static double sqrarg;


static double dmaxarg1,dmaxarg2;





static int iminarg1, iminarg2;



 VECTOR matmat(VECTOR m1,VECTOR m2);
VECTOR matinv(VECTOR m);
long memcount(int d);
void *myalloc(unsigned size);
void myfree(char* mem);
void nrerror(char *error_text);
void clear_vector(double *v,int nl,int nh);
 double *vector(int nl,int nh);
VECTOR getinittm(int np,PNTLST p1,PNTLST p2);
VECTOR print_vector(VECTOR v,int nl,int nh);
MATRIX *print_matrix(MATRIX *m,int nrl,int nrh,int ncl,int nch);
void add_vector(double *to,int l,int h, double *from,int fl,int fh);
void subtract_vector(double *to,int l,int h, double *from,int fl,int fh);
 void copy_vector(double *to,int l,int h, double *from,int fl,int fh);
 double *clone_vector(double *v,int nl,int nh,int newl,int newh);
double *subvector(double *v,int oldl,int oldh,int newl);
 void free_vector(double* &v,int nl,int nh);
void clear_matrix(MATRIX *m,int nrl,int nrh,int ncl,int nch);
double *cross_vector(double *a,double *b);
double dot_vector(int n,double *a,double *b);
double vector_length(int n,double *a);
void multvector(int n,double *a, double p);
double *unit_vector(int n,double *a);

 MATRIX *matrix(int nrl,int nrh,int ncl,int nch);
void copy_matrix(MATRIX *to,int rl1,int rh1,int cl1,int ch1,
                 MATRIX *fr,int rl2,int rh2,int cl2,int ch2);
MATRIX *clone_matrix(MATRIX *m,int rl,int rh,int cl,int ch,
                             int nrl,int nrh,int ncl,int nch);
 void free_matrix(MATRIX* &m,int nrl,int nrh,int ncl,int nch);
MATRIX* submatrix(MATRIX *a,int oldrl,int oldrh,int oldcl,int oldch,
                            int newrl,int newcl);
void free_submatrix(MATRIX* &m,int nrl,int nrh,int ncl,int nch);
void normalize_matrix(double *ax,double *ay,double *az);
MATRIX *transpose(MATRIX *m,int nrl,int nrh,int ncl,int nch);
 MATRIX *matrix_mult( MATRIX *m1,int nrl1,int nrh1,int ncl1,int nch1,
                     MATRIX *m2,int nrl2,int nrh2,int ncl2,int nch2,
                     int nrl,int nrh,int ncl,int nch);
double dot(double *v1,int l1,int h1, double *v2,int l2,int h2);
double *matrix_vector(MATRIX *m,int rl,int rh,int cl,int ch,
                     double *v,int l,int h);
void ludcmp(double **a,int n,int *indx,double *d);
void lubksb(double **a,int n,int *indx, double *b);
void mprove(double **a,double **alud,int n,int *indx,double *b,double *x);
void pivit(short dim, double **A);
double *solve(MATRIX *a,double *L, int n);
double *lsq(MATRIX *A,double*L,int nu,int ne);
MATRIX *matrix_shell(int nrl,int nrh,int ncl, int nch);
int add_matrix_rows( MATRIX *mp, int nr);
int add_matrix_shell_rows( MATRIX *mp, int nr);
void free_matrix_shell(MATRIX* &m);
int get_matrix_nr(MATRIX *m);
int get_matrix_rl(MATRIX *m);
int get_matrix_rh(MATRIX *m);
void svdcmp(PNTLST a, int nr, int nc, VECTOR w, PNTLST v);
double pythag(double a, double b);
void svdvar(PNTLST v, int ma, VECTOR w, PNTLST cvm);
void svdfit(PNTLST A, VECTOR y, VECTOR sig, int ndata, VECTOR a, int ma,
            PNTLST u, PNTLST v, VECTOR w, double *chisq,
            void (*funcs)(double,PNTLST, int)  );
void svbksb(PNTLST u, VECTOR w, PNTLST v, int m, int n, VECTOR b, VECTOR x);
VECTOR decomp_matrix(VECTOR RR,VECTOR s);
VECTOR get_matrix_scales(VECTOR RR);
void BBlsq(PNTLST ATAx, PNTLST P, PNTLST Q, PNTLST S,VECTOR AWT, VECTOR s, VECTOR RR,
     int nu,int ne,int nf,int np, VECTOR photosum, VECTOR pntsum, PNTLST *fp,int nff,int npf, double *chisq);
void choldc(PNTLST a, int n, VECTOR p);
void choldcinv(PNTLST mat, int size);
void pnt2film(double fl, VECTOR tm, VECTOR pnt, double* x, double* y);
void pnt2film_error(double fl, VECTOR tm, VECTOR pnt,VECTOR pp, double* dx, double* dy);

#line 109 ".\\photog\\mathsubs.h"
#line 2 ".\\photog\\photog_math.h"






#line 9 ".\\photog\\photog_math.h"

typedef struct BUNDLEDATA
{
    DB_ULONG dbaBundle;	    
    int nNumPhotos;	    
    int nNumPoints;	    
    PNTLST plTMatrix;	    
    DB_ULONG *dbaTMatrix;    
    PNTLST *plPixels;	    
    DB_ULONG *dbaPnts;	    
    PNTLST plCalcPnts;	    
    DB_ULONG *dbaCalcPnts;   
    PNTLST plSurvPnts;	    
    char *pszBundleName;
    char **pszPhotoNames;
    char **pszPointNames;
    VECTOR vfl;
} BundleData;



#line 31 ".\\photog\\photog_math.h"

VECTOR matpnt(VECTOR m, VECTOR p);
PNT get3dpnt(int nf,PNTLST pnts, double **tmxs );
VECTOR idmatrix(void);
void forcesquare( double *L, double *R, double **A);
void forcesquare( double *L, double *R, double **A, double wf);

double srot(int np,PNTLST p,PNTLST xyz);
double *getfilmcorr(int np,double fl, PNTLST fud,PNTLST fp);
void radial_corr(int np ,PNTLST pnt,VECTOR rcf);
PNTLST corrfilmpnt(int npt,double fl, VECTOR R, PNTLST pnt, VECTOR rcf);
void bndlxx(int nf,int npt,int *npntArray, int **ndxAdrrArray, 
             PNTLST *pntAdrrArray, VECTOR *tmAdrrArray ,double ***xyz);

double rotx(int np,PNTLST p,PNTLST xyz, VECTOR R);
VECTOR srotx(int np,PNTLST p,PNTLST xyz);
VECTOR torealsys(int np, PNTLST cp, PNTLST mp, int npc,PNTLST xyz ,VECTOR tm, VECTOR itm);

int bundle( BundleData & bd );
VECTOR MergeBundles( VECTOR masterImageTMatrix, VECTOR mergeImageTMatrix,
	int numCalcPnts, PNTLST masterCalcPnts, PNTLST mergeCalcPnts );
PNTLST LUK(int nrk, int nck, int nre, PNTLST teq, PNTLST tkn);
int bundlecheck( BundleData & bd );


#line 57 ".\\photog\\photog_math.h"
#line 5 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/PtgTransMatrix.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/HierElem.h"























































#line 6 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/PtgTransMatrix.h"

class PtgTransMatrix {
    public:
	PtgTransMatrix();
	PtgTransMatrix(VECTOR v);
	~PtgTransMatrix();
	void setMatrix( VECTOR v );
	void setMatrix( PtgTransMatrix &potm );
	VECTOR getMatrix();
	double operator[]( int nIndex );
	void setIdentity();
	void draw();
	
    private:
	VECTOR theMatrix;
	void initVars();
};

#line 25 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/PtgTransMatrix.h"
#line 6 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/Ptg3DNode.h"










class Ptg3DNode : public HierElem {
	public: static char *className; virtual const char *getType(){return className;} private:;

    public:
	enum DrawStyle {
	    DS_NONE	    = 0x0000,
	    DS_INVISIBLE    = 0x0001,
	    DS_POINTS	    = 0x0002,
	    DS_WIREFRAME    = 0x0004,
	    DS_SOLIDS	    = 0x0008,
	    DS_MASK1	    = 0x000F,
	    DS_PICKING	    = 0x0100
	};

    public:
	Ptg3DNode();
	virtual ~Ptg3DNode();
	void setColor( float red = 1.0, float green = 1.0,
		float blue = 1.0, float alpha = 1.0 );
	void getColor( float retColors[4] );
	void clearColor() { setColor( -1.0, 0.0, 0.0, 0.0 ); }
	void setName( const char * newName );
	const char *getName() { return nodeName; }
	void draw();
	void setMatrix( VECTOR v ) { transMatrix.setMatrix( v ); }
	VECTOR getMatrix( Ptg3DNode *refNode = 0 );
	void setDrawStyle( DrawStyle ds, int bSetMembers = 0 );
	DrawStyle getDrawStyle();
	int getUniqID(){ return nMyUniqID; }
	Ptg3DNode *findByID( int nNumIDS, unsigned int naIDS[] );
	Ptg3DNode *findByName( const char *findName, int bRecurse = 0 );
	void setActive( int bNewVal ) { bIsActive = bNewVal; }
	int isActive() { return bIsActive; }

    protected:
	PtgTransMatrix transMatrix;
	int nMyUniqID;

    private:
	static int nUniqID;
	float rgbColors[4];
	char *nodeName;
	int bIsActive;
	DrawStyle currDrawStyle;
	void initVars();
	virtual void drawWireframe();
	virtual void drawSolid();
};

#line 66 "C:\\busbyj\\dev\\Pm3 Lite\\3dclass/Ptg3DNode.h"
#line 13 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.h"

class PointGridBar : public CDialogBar
{

public:
	PointGridBar();
	BOOL Create(CWnd* pParentWnd, UINT nStyle);


public:


public:
	void UpdateUnits(GridRowData *row);


	
	
	public:
	virtual BOOL OnNotify( WPARAM wParam, LPARAM lParam, LRESULT *pResult );
	


public:
	virtual ~PointGridBar();

	
protected:
	
	 void OnLfClick3dpointgrid(short Pane, long Row, long Column, long ClickPos, long * Status);
	 void OnBeforeDeleteRowPointgrid(long Row, long * Status);
	 void OnChangeNodeGrid(long Row, long Column);
	 void OnChangePointgrid(long Row, long Column);
	 void OnChangeCylinderGrid(long Row, long Column);
	 void OnChangeBoxGrid(long Row, long Column);

	 void OnSize(UINT nType, int cx, int cy);
	 void OnEditCopy();
	 void OnUpdateEditCopy(CCmdUI* pCmdUI);
	 void OnEditCut();
	 void OnUpdateEditCut(CCmdUI* pCmdUI);
	 void OnEditPaste();
	 void OnUpdateEditPaste(CCmdUI* pCmdUI);
	 LONG OnCurrentElementChange(WPARAM wParam, LPARAM lParam);
	 LONG OnUnitsChange(WPARAM wParam, LPARAM lParam);
	private: static const AFX_EVENTSINKMAP_ENTRY _eventsinkEntries[]; static UINT _eventsinkEntryCount; protected: static  const AFX_EVENTSINKMAP eventsinkMap; static const AFX_EVENTSINKMAP* __stdcall _GetBaseEventSinkMap(); virtual const AFX_EVENTSINKMAP* GetEventSinkMap() const;
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

private:
	static int sheetGrids[];
	int currentSheetIndex;
	Ptg3DNode *currentNode;
};

#line 69 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.h"


#line 7 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 "c:\\pvapps\\datatbl\\dtocx.h"






















typedef enum {
		sortPrimary		= 0,
		sortSecondary	= 1,
		sortTertiary	= 2,
		} dtSortKey;


typedef enum {
	dttShortInt		= 0x82,
	dttLongInt		= 0x83,
	dttSingleFloat	= 0x84,
	dttDoubleFloat	= 0x85,
	dttString		= 0x87,
	dttDate			= 0x88,
	dttTime			= 0x89,
	dttDateTime		= 0x8A,
	dttUChar		= 0x91,
	dttCheckBox		= 0x94,
	dttStdCheckBox	= 0x99,
	dttBitmap		= 0x95,
	dttCurrency		= 0x3C,
	} dtDataTypeConstants;

typedef enum {
	fpDefault		= -1,
	fpSolid			= 0,
	fpDash			= 1,
	fpDot           = 2,
	fpDashDot       = 3,
	fpDashDotDot    = 4,
	fpNull			= 5,
    } dtFocusPenStyle;

typedef enum {
	editDefault=0,
	editEditable =1,
	editProtected = 2,
	} dtDataEditConstants;

typedef enum {
	posNoWhere =0,
	posOnHeading = 1,
	posOnColGridLine = 2,
	posOnCell =3,
	posOnLabel = 4,
	posOnRowGridLine = 5,
	posOnVertPaneLine = 6,
	posOnHorzPaneLine = 7,
	} dtClickPosConstants;

typedef enum {
	paneLabelTop	= 0,
	paneLockedTop	= 1,
	paneLeftTop		= 2,
	paneRightTop	= 3,
	paneLabelBottom	= 4,
	paneLockedBottom= 5,
	paneLeftBottom	= 6,
	paneRightBottom	= 7,
	paneLeft		= 2,
	paneRight		= 3,
	paneTop			= 2,
	paneBottom		= 6,
	} dtPaneConstants;

typedef enum {
	sbNone = 0,
	sbAutomatic = 1,
	sbAlwaysOn =2,
	} dtScrollBarConstants;

typedef enum {
	selectNone = 0,
	selectSingle = 1,
	selectMultiple =2,
	} dtSelectConstants;

typedef enum {
	headingsNone = 0,
	headingsCustom = 1,
	headingsNumbers = 2,
	headingsLetters = 3,
	} dtHeadingTypeConstants;

typedef enum {
	labelsNone = 0,
	labelsCustom = 1,
	labelsNumbers = 2,
	} dtLabelTypeConstants;

typedef enum {
	ddNone = 0,
	ddDropDown = 1,
	ddAutoDropDown= 2,
	} dtDropDownConstants;

typedef enum {
	horzLeft =0,
	horzCenter=1,
	horzRight=2,
	} dtHorzAlignConstants;

typedef enum {
	vertTop =0,
	vertCenter=1,
	vertBottom=2,
	} dtVertAlignConstants;

typedef enum {
	resizeDefault =0,
	resizeAdjustable=1,
	resizeFixed=2,
	} dtResizeConstants;

typedef enum {
	appearNone=0,
	appearHeavyIndent=1,
	appearShadow=2,
	appearOutdent=3,
	appearIndentFrame=4,
	appearLightIndent=5,
	} dtAppearanceConstants;

typedef enum {
	ccNone =0,
	ccFixedSingle =1,
	} dtBorderStyleConstants;

typedef enum {
	vmNone=0,
	vmIndexed=1,
	vmUserDefined=2,
	} dtVirtualMemTypeConstants;



class CDTData: public COleVariant
{

public:
	CDTData() {};
	CDTData(const VARIANT& varSrc): COleVariant(varSrc){}
	CDTData(LPCVARIANT pSrc) : COleVariant(pSrc){}
	CDTData(const CDTData& varSrc) : COleVariant(varSrc) {}
	CDTData(LPCTSTR lpszSrc) : COleVariant(lpszSrc){}
	CDTData(CString& strSrc) : COleVariant(strSrc) {}
	CDTData(BYTE nSrc) : COleVariant(nSrc) {}
	CDTData(short nSrc, VARTYPE vtSrc = VT_I2) : COleVariant(nSrc,vtSrc) {}
	CDTData(long lSrc, VARTYPE vtSrc = VT_I4) : COleVariant(lSrc, vtSrc) {}
	CDTData(const COleCurrency& curSrc) : COleVariant(curSrc) {}
	CDTData(float fltSrc) : COleVariant(fltSrc) {}
	CDTData(double dblSrc) : COleVariant(dblSrc) {}
	CDTData(const COleDateTime& timeSrc) : COleVariant(timeSrc) {}
	CDTData(const CByteArray& arrSrc) : COleVariant(arrSrc) {}
	CDTData(const CLongBinary& lbSrc) : COleVariant(lbSrc) {}
	CDTData(LPCTSTR lpszSrc, VARTYPE vtSrc) : COleVariant(lpszSrc, vtSrc) {};


private:
	COleVariant m_data;
public:
	~CDTData() {};
	void CreateArray(int NumItems)
	{
		static int i=0;
		SAFEARRAYBOUND bound;
		i++;
		Clear();
		vt = VT_ARRAY | VT_VARIANT;
		bound.lLbound = 0;
		bound.cElements = NumItems;
		parray = SafeArrayCreate(VT_VARIANT, 1, &bound);
	}
	void PutItem(const LPCTSTR Src, long index)
	{
		m_data= Src;
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(const VARIANT& Src, long index)
	{
		m_data= Src;
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(LPCVARIANT Src, long index)
	{
		m_data= Src;
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(const COleVariant& Src, long index)
	{
		m_data= Src;
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(CString& Src, long index)
	{
		m_data= Src;
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(BYTE Src, long index)
	{
		m_data= Src;
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(short Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(long Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(const COleCurrency& Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(float Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(double Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(const COleDateTime& Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(const CByteArray& Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void PutItem(const CLongBinary& Src, long index)
	{
		m_data= Src;	
		SafeArrayPutElement(parray, &index, m_data);
	}
	void GetItem(long* dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_I4);
		*dest = m_data.lVal;
	}
	void GetItem(float* dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_R4);
		*dest= m_data.fltVal;
	}
	void GetItem(CString &dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_BSTR);
		dest= m_data.bstrVal;
	}
	void GetItem(VARIANT *dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		*dest = m_data;
	}
	void GetItem(COleVariant dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		dest = m_data;
	}
	void GetItem(short *dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_I2);
		*dest = m_data.iVal;
	}
	void GetItem(COleCurrency& dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_CY);
		dest = m_data.cyVal;
	}
	void GetItem(double * dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_R8);
		*dest = m_data.dblVal;
	}
	void GetItem(BYTE *dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_UI1);
		*dest = m_data.bVal;
	}
	void GetItem(COleDateTime& dest, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_DATE);
		dest = m_data.date;
	}
	void GetItem(const LPCTSTR Src, long index)
	{
		m_data.Clear();	
		SafeArrayGetElement(parray, &index, m_data);
		m_data.ChangeType(VT_BSTR);
		CString val= m_data.bstrVal;
		strcpy((char *) Src, val.GetBuffer(sizeof(Src)));
	}
	void Get(long* dest)
	{
		ChangeType(VT_I4);
		*dest = lVal;
	}
	void Get(float* dest)
	{
		ChangeType(VT_R4);
		*dest= fltVal;
	}
	void Get(CString &dest)
	{
		ChangeType(VT_BSTR);
		dest= bstrVal;
	}
	void Get(VARIANT *dest)
	{ 
		*dest = (COleVariant) this;
	}
	void Get(COleVariant dest)
	{
		*dest = (COleVariant) this;
	}
	void Get(short *dest)
	{
		ChangeType(VT_I2);
		*dest = iVal;
	}
	void Get(COleCurrency& dest)
	{
		ChangeType(VT_CY);
		dest = cyVal;
	}
	void Get(double * dest)
	{
		ChangeType(VT_R8);
		*dest = dblVal;
	}
	void Get(BYTE * dest)
	{
		ChangeType(VT_UI1);
		*dest = bVal;
	}
	void Get(COleDateTime& dest)
	{
		ChangeType(VT_DATE);
		dest = date;
	}
};
#line 392 "c:\\pvapps\\datatbl\\dtocx.h"

#line 394 "c:\\pvapps\\datatbl\\dtocx.h"



#line 8 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\dtrowset.h"










class CDTRow;




class CDTRowSet : public COleDispatchDriver
{
public:
	CDTRowSet() {}		
	CDTRowSet(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CDTRowSet(const CDTRowSet& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}


public:
	long GetCount();
	void SetCount(long);
	BOOL GetAllowResize();
	void SetAllowResize(BOOL);
	long GetSelectType();
	void SetSelectType(long);
	long GetVertAlign();
	void SetVertAlign(long);
	short GetHeadingType();
	void SetHeadingType(short);
	float GetHeight();
	void SetHeight(float);
	BOOL GetTrapDeleteKey();
	void SetTrapDeleteKey(BOOL);
	BOOL GetTrapInsertKey();
	void SetTrapInsertKey(BOOL);
	BOOL GetAllowAutoRowInsert();
	void SetAllowAutoRowInsert(BOOL);


public:
	void Copy(long Source, long Dest);
	void Move(long Source, long Dest);
	void Remove(long Index);
	long GetSelectCount();
	void SelectRange(long Start, long End, BOOL SelectOn);
	long GetVisCount(long TBPane);
	long GetFirstVisible(long TBPane);
	void SetFirstVisible(long TBPane, long nNewValue);
	void Reset();
	long Add(long Index, const VARIANT& Data);
	CDTRow GetItem(long Index);
	void SetItem(long Index, LPDISPATCH newValue);
	CDTRow Get_Item(long Index);
	void Set_Item(long Index, LPDISPATCH newValue);
	long GetSelect(long After);
};

#line 64 "C:\\busbyj\\dev\\Pm3 Lite\\dtrowset.h"
#line 9 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\dtrow.h"










class COleFont;




class CDTRow : public COleDispatchDriver
{
public:
	CDTRow() {}		
	CDTRow(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CDTRow(const CDTRow& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}


public:
	unsigned long GetBackColor();
	void SetBackColor(unsigned long);
	unsigned long GetSelBackColor();
	void SetSelBackColor(unsigned long);
	unsigned long GetForeColor();
	void SetForeColor(unsigned long);
	unsigned long GetSelForeColor();
	void SetSelForeColor(unsigned long);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	CString GetLabel();
	void SetLabel(LPCTSTR);
	VARIANT GetValue();
	void SetValue(const VARIANT&);
	BOOL GetSelected();
	void SetSelected(BOOL);
	long GetResize();
	void SetResize(long);
	float GetHeight();
	void SetHeight(float);


public:
	void Invalidate();
};

#line 52 "C:\\busbyj\\dev\\Pm3 Lite\\dtrow.h"
#line 10 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"

#line 1 "C:\\MSDEV\\INCLUDE\\math.h"















#pragma once
#line 18 "C:\\MSDEV\\INCLUDE\\math.h"


















































































































































































































































































































































































































































































































































































































































#line 12 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"

#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DNode.h"

































































#line 14 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DCylinderObj.h"



#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DNode.h"

































































#line 5 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DCylinderObj.h"

class Ptg3DCylinderObj : public Ptg3DNode {
    public: static char *className; virtual const char *getType(){return className;} private:;

    public:
	Ptg3DCylinderObj();
	virtual ~Ptg3DCylinderObj();
	void setRadius( double r ) { radius = r; }
	void setHeight( double h ) { height = h; }
	double getRadius() { return radius; }
	double getHeight() { return height; }

    private:
	double radius;
	double height;

	void initVars();
	void drawWireframe();
	void drawSolid();
};

#line 27 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DCylinderObj.h"
#line 15 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DBoxObj.h"



#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DNode.h"

































































#line 5 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DBoxObj.h"

class Ptg3DBoxObj : public Ptg3DNode {
    public: static char *className; virtual const char *getType(){return className;} private:;

    public:
	Ptg3DBoxObj();
	virtual ~Ptg3DBoxObj();
	void setXLen( double l ) { xlen = l; }
	void setYLen( double l ) { ylen = l; }
	void setZLen( double l ) { zlen = l; }
	double getXLen() { return xlen; }
	double getYLen() { return ylen; }
	double getZLen() { return zlen; }

    private:
	double xlen;
	double ylen;
	double zlen;

	void initVars();
	void drawWireframe();
	void drawSolid();
};

#line 30 "C:\\busbyj\\dev\\Pm3 Lite\\3DClass/Ptg3DBoxObj.h"
#line 16 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"

#line 1 ".\\inc\\mainfrm.h"




#line 1 ".\\inc\\common.h"
















































































































































#line 6 ".\\inc\\mainfrm.h"
#line 1 ".\\inc\\../3dclass/ptgworld.h"





#line 1 ".\\inc\\stdafx.h"





#line 1 "C:\\MSDEV\\MFC\\include\\afxwin.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxext.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxdisp.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxcmn.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 10 ".\\inc\\stdafx.h"
#line 1 "C:\\MSDEV\\MFC\\include\\afxtempl.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 11 ".\\inc\\stdafx.h"
#line 7 ".\\inc\\../3dclass/ptgworld.h"
#line 8 ".\\inc\\../3dclass/ptgworld.h"

#line 1 ".\\inc\\../3dclass/..\\3DClass\\Ptg3DNode.h"

































































#line 10 ".\\inc\\../3dclass/ptgworld.h"


#line 1 ".\\photog\\photog_math.h"
#line 1 ".\\photog\\mathsubs.h"












































































































#line 2 ".\\photog\\photog_math.h"






















































#line 57 ".\\photog\\photog_math.h"
#line 13 ".\\inc\\../3dclass/ptgworld.h"



class PtgWorld : public Ptg3DNode
{
	public: static char *className; virtual const char *getType(){return className;} private:;
private:
	Ptg3DNode *theCameras;
	Ptg3DNode *theAxis;
	Ptg3DNode *theModel;
	Ptg3DNode *theRays;
	Ptg3DNode *theCalculated;
	Ptg3DNode *theColumns;
	Ptg3DNode *theZones;

public:

	PtgWorld();
	~PtgWorld();

	Ptg3DNode *getRays() {return theRays;}
	Ptg3DNode *getModel() {return theModel;}
	Ptg3DNode *getTargets();
	Ptg3DNode *getCameras() {return theCameras;}
	Ptg3DNode *getAxis() { return theAxis; }
	Ptg3DNode *getCalculated() { return theCalculated; }

	DWORD InitWorld(void *word);
	int CreateAxis();
	int CreateCameras();
	int CreateModel();
	int CreateRays();
	int CreateCalculated();
	int CreateColumns();
	int CreateZones();
	int FindTMatrix( char *pszBundleID, char *pszImageName, VECTOR vTMatrix );
	VECTOR ConvertCameraMatrix( double theMatrix[] );

};

#line 54 ".\\inc\\../3dclass/ptgworld.h"
#line 7 ".\\inc\\mainfrm.h"
#line 1 ".\\inc\\mymdi.h"








class CMyMdi : public CWnd
{

public:
    CMyMdi();


public:
    CBitmap m_bmpBackGround ;   
    CSize m_sizeClient ;
    

public:


public:
    virtual ~CMyMdi();
    virtual WNDPROC* GetSuperWndProcAddr() ;
    static WNDPROC pfnSuper;

    
    
protected:
    
     BOOL OnEraseBkgnd(CDC* pDC);
     void OnSize(UINT nType, int cx, int cy);
    
    private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};


#line 41 ".\\inc\\mymdi.h"
#line 8 ".\\inc\\mainfrm.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\createcylinderbyedgedlg.h"




#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\resource.h"














































































































































































































































































































































#line 6 "C:\\busbyj\\dev\\Pm3 Lite\\createcylinderbyedgedlg.h"
#line 1 ".\\inc\\2DEdge.h"





#line 1 ".\\photog\\photog_math.h"
#line 1 ".\\photog\\mathsubs.h"












































































































#line 2 ".\\photog\\photog_math.h"






















































#line 57 ".\\photog\\photog_math.h"
#line 7 ".\\inc\\2DEdge.h"

class Point_2D
{
private:
	char *m_szImageName;
	VECTOR m_Point;
public:
	Point_2D() { m_szImageName=0; m_Point=0;}
	~Point_2D() 
	{ 
		if( m_szImageName ) 
			free(m_szImageName);
		if( m_Point ) 
			free_vector(m_Point, 1,3);
	}
	void setImageName(char *name)
	{
		if( m_szImageName )
			free(m_szImageName);
		if( name )
			m_szImageName = strdup(name);
		else
			m_szImageName = 0;
	}
	const char *getImageName() { return m_szImageName; }
	void setPoint( VECTOR point )
	{
		if( !m_Point )
			m_Point = vector(1,3);
		m_Point[1] = point[1];
		m_Point[2] = point[2];
		m_Point[3] = point[3];
	}
	VECTOR getPoint()
	{
		return m_Point;
	}
};

class Edge_2D 
{
public:
	Edge_2D()
	{
		m_pointList = 0;
		m_szImageName = 0;

		m_iNumPoints = 0;
	}
	~Edge_2D()
	{
		if( m_pointList )
			free_matrix( m_pointList,1,m_iNumPoints,1,3);
		if( m_szImageName )
			free(m_szImageName);


	}


	PNTLST m_pointList;
	int m_iNumPoints;
	char *m_szImageName;
	Point_2D m_dirPoint;
};

#line 74 ".\\inc\\2DEdge.h"
#line 7 "C:\\busbyj\\dev\\Pm3 Lite\\createcylinderbyedgedlg.h"




class CCreateCylinderByEdgeDlg : public CDialog
{

public:
	CCreateCylinderByEdgeDlg(CWnd* pParent = 0);   
	~CCreateCylinderByEdgeDlg();


	
	enum { IDD = 209 };
	CString	m_Label;
	

	int m_state;
	int m_edge;
	CList< Edge_2D *, Edge_2D * > m_listEdges;
	Edge_2D *m_currentEdge;
	Point_2D m_endPoints[2];

	void UpdateLabel(char *str);
	void processEdge();
	void processDirPoint();
	int processEndPoint();
	

	
	
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    
	


protected:

	
	
	 void OnBack();
	 void OnNext();
	virtual void OnOK();
	virtual void OnCancel();
	virtual BOOL OnInitDialog();
	 void OnClose();
	 void OnDestroy();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};
#line 58 "C:\\busbyj\\dev\\Pm3 Lite\\createcylinderbyedgedlg.h"
#line 9 ".\\inc\\mainfrm.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\circlebyedge.h"









class CCircleByEdge : public CDialog
{

public:
	CCircleByEdge(CWnd* pParent = 0);   


	
	enum { IDD = 213 };
		
	



	
	
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    
	


protected:

	
	
	virtual void OnOK();
	virtual void OnCancel();
	virtual BOOL OnInitDialog();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};
#line 42 "C:\\busbyj\\dev\\Pm3 Lite\\circlebyedge.h"
#line 10 ".\\inc\\mainfrm.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\circleby3dpoint.h"





#line 1 ".\\inc\\elem_help.h"



#line 1 ".\\photog\\photog_math.h"
#line 1 ".\\photog\\mathsubs.h"












































































































#line 2 ".\\photog\\photog_math.h"






















































#line 57 ".\\photog\\photog_math.h"
#line 5 ".\\inc\\elem_help.h"
#line 1 ".\\inc\\2dedge.h"









































































#line 6 ".\\inc\\elem_help.h"

int getSelectedEdge(Edge_2D *m_currentEdge, int flag = 0);
int getSelectedPoint(Point_2D &point, char *pszImageName = 0);



int CorrectPnts( char *pszImageName, int nNumPnts, 
	PNTLST plUncorrPnts, PNTLST & plCorrPnts, double reductionFactor );
int FindTMatrix( char *pszBundleID, char *pszImageName, 
				VECTOR vTMatrix);


#line 19 ".\\inc\\elem_help.h"
#line 7 "C:\\busbyj\\dev\\Pm3 Lite\\circleby3dpoint.h"
#line 1 ".\\inc\\photog.h"







#pragma pack (8)

struct points {
   char szLabel[24];
   char cType;
};

struct images {
   char szName[24];
   char szStoreageLocation[256];
   char szFileName[128];
   long lPixHeight;
   long lPixWidth;
   long lFileSize;
   long lUpToDate;
   long lStatus;
   long lLastUserMod;
   long lLastTimeMod;
   double dfUpVector[2][2];
   double dfFilmCorr[12];
   double dfCameraPos[12];
   double dfAdjFocalLength;
};

struct pixels {
   double dfImgCoor[2];
   double dfSigma[3];
   double dfCorr[3];
   long lUpToDate;
};

struct xyz {
   double dfCoor[3];
   double dfSigma[3];
   long lUpToDate;
};

struct bundle {
   char szTag[128];
   long lStatus;
   long lLastUserMod;
   long lLastTimeMod;
   long lUpToDate;
};

struct camera_info {
   char szID[24];
   char szDesc[64];
   double dfFocalLength;
   double dfRadCorrFact[9];
   long lUpToDate;
};

struct fiducial {
   char szTag[64];
   double dfIdealCoor[2];
   long lUpToDate;
};

struct tmatrix {
   double dfCameraPos[12];
   double dfAdjFocalLength;
   long lStatus;
   long lUpToDate;
};

#pragma pack ()



























































































































#line 199 ".\\inc\\photog.h"
#line 8 "C:\\busbyj\\dev\\Pm3 Lite\\circleby3dpoint.h"
#line 1 ".\\photog\\ele_math.h"






#line 8 ".\\photog\\ele_math.h"

void rotpnt(VECTOR m , PNT p);

double intersect_lines_dir( VECTOR o1, VECTOR d1, VECTOR o2,
                         VECTOR d2, double *s1, double *s2 );

int make_cyl_by_lines(int nl,int *npl, PNTLST *pnts,PNTLST tms, PNTLST drp,
                        PNTLST sep, PNTLST setm , struct Cylinder &cyl,
                        struct _transform &trans);


int make_box_by_lines(int *nll,int *npl, PNTLST *pnts,PNTLST tms,
                        PNTLST sep, PNTLST setm , struct box &box,
                        struct _transform &trans);


int make_cone_by_lines(int nl,int *npl, PNTLST *pnts,PNTLST tms,
                        PNTLST sep, PNTLST setm , struct snout &snout,
                        struct _transform &trans);


int make_ctorus_by_edge(int nNumPnts, PNTLST plPnts,
    PNTLST plTMatrices, struct cir_torus &circtorus_rec, struct _transform &transform_rec );	    


int make_rtorus_by_edge(int *nll,int *npl, PNTLST *pnts,PNTLST tms,
                        PNTLST sep, PNTLST setm , struct rect_torus &rtor,
                        struct _transform &trans);


int make_sphere_by_edge(int nNumPnts, PNTLST plPnts,
    PNTLST plTMatrices, struct sphere &sph, struct _transform &transform_rec );	    


int make_snout_by_circle(int *nll,int *npl, PNTLST *pnts,PNTLST tms, struct snout &snt,
                        struct _transform &trans);

int make_cyl_by_3dpnts(int np,PNTLST pnts,PNTLST sep, PNTLST setm , struct cylinder &cyl,
                        struct _transform &trans);

int MakeCirc( int                 nl,    
	       int                *npl,   
               PNTLST             *pnts,  
	       PNTLST              tms,   
               double            & radius,    
               struct _transform & trans );

int make_box_by_perp_lines(int *nll,int *npl, PNTLST *pnts,PNTLST tms,
                        PNTLST sep, PNTLST setm , struct box &box,
                        struct _transform &trans);

int MakeLineBy2DLines( int *np2DLinesPer3DLine, 
	int *npPntsPer2DLine, PNTLST *plp2DLinePnts, 
	PNTLST plp2DLineTMatrix, PNTLST plEndPnts,
	PNTLST plEndPntsTMatrix, struct Line2p & line2p );


int make_circle_by_3dpnts(int np,PNTLST pnts,double & radius,struct _transform & trans );

VECTOR prj_pnt_onto_plane(VECTOR pnt, VECTOR pl_org, VECTOR pl_dir);
VECTOR prj_pnt_onto_plane(VECTOR pnt, VECTOR pl_org, VECTOR pl_dir);
VECTOR intersect_line_beamSide(VECTOR cl_org, VECTOR cl_dir, VECTOR sd_dir, double dist, double width,
                               VECTOR ln_org, VECTOR ln_dir );
#line 9 "C:\\busbyj\\dev\\Pm3 Lite\\circleby3dpoint.h"




class CCircleBy3DPoint : public CDialog
{

public:
	CCircleBy3DPoint(CWnd* pParent = 0);   


	
	enum { IDD = 214 };
	int		m_iNumberOfPoints;
	

	
	PNTLST pl3DPnts;


	
	
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    
	


protected:

	
	
	virtual void OnOK();
	virtual void OnCancel();
	 void OnCalculate();
	virtual BOOL OnInitDialog();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};
#line 48 "C:\\busbyj\\dev\\Pm3 Lite\\circleby3dpoint.h"
#line 11 ".\\inc\\mainfrm.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.h"






































































#line 12 ".\\inc\\mainfrm.h"




#line 1 ".\\inc\\engineer.h"







class EngineeringData : public CPropertyPage
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const  CRuntimeClass classEngineeringData; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	EngineeringData();
	~EngineeringData();


	
	enum { IDD = 169 };
	



	
	
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    
	


protected:
	
	
		
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

};

#line 41 ".\\inc\\engineer.h"
#line 17 ".\\inc\\mainfrm.h"
#line 1 ".\\inc\\maintena.h"








class Maintenance : public CPropertyPage
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const  CRuntimeClass classMaintenance; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	Maintenance();
	~Maintenance();


	
	enum { IDD = 171 };
	CListBox	m_EqListBox;
	CString	m_EqListString;
	



	
	
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    
	


protected:
	
	
	virtual BOOL OnInitDialog();
	 void OnRadiographyData();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;

};

#line 45 ".\\inc\\maintena.h"
#line 18 ".\\inc\\mainfrm.h"




#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\gridbar.h"



class CGridBar: public CDialogBar
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const  CRuntimeClass classCGridBar; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	
	


public:


	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 21 "C:\\busbyj\\dev\\Pm3 Lite\\gridbar.h"



protected:
	
	 void OnEditCopy();
	 void OnEditCut();
	 void OnEditPaste();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
	
};
#line 34 "C:\\busbyj\\dev\\Pm3 Lite\\gridbar.h"
#line 23 ".\\inc\\mainfrm.h"
#line 1 "C:\\busbyj\\dev\\Pm3 Lite\\cylinderdata.h"









class CCylinderData : public CDialog
{

public:
	CCylinderData(CWnd* pParent = 0);   


	
	enum { IDD = 211 };
	double	m_EndEast;
	double	m_EndHeight;
	double	m_EndNorth;
	double	m_Height;
	double	m_Radius;
	double	m_StartEast;
	double	m_StartHeight;
	double	m_StartNorth;
	



	
	
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    
	

public:
	void setValues(double radius, double height, double *endpoints);
	void getValues(double *radius, double *height, double *endpoints);


protected:

	
	
	virtual BOOL OnInitDialog();
	virtual void OnCancel();
	virtual void OnOK();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};
#line 53 "C:\\busbyj\\dev\\Pm3 Lite\\cylinderdata.h"
#line 24 ".\\inc\\mainfrm.h"

class CMainFrame : public CMDIFrameWnd
{
	protected: static CRuntimeClass* __stdcall _GetBaseClass(); public: static const  CRuntimeClass classCMainFrame; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CMainFrame();


public:
	int m_PointBox;


	int m_rays;				
	int m_overlay;			
	int m_multiSelect;
	int m_selected;

	PtgWorld ptg3DWorld;	
	Ptg3DNode *currentElem; 

	CCreateCylinderByEdgeDlg *pCylDlg;
	CCircleByEdge *pCirDlg;
	CCircleBy3DPoint *pCir3DDlg;

   CDC m_dcMem;            
   CBitmap m_bmpABD;    
   HBITMAP m_hBmpOld;    

   BITMAP m_bmInfo;        
   CPoint m_pt;            
   CSize m_size;        

   STARTUPINFO m_st;	 		
   PROCESS_INFORMATION m_pInfo; 


public:
	void UpdateUnits(GridRowData *);	
	Ptg3DNode *getCurrentElem(){return currentElem;}

	virtual BOOL CreateClient(LPCREATESTRUCT lpCreateStruct,
					CMenu *pWindowMenu); 
	CMyMdi m_MyMdiClientWnd; 

	
	
	public:
	virtual BOOL OnChildNotify(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pLResult);
	protected:

	


public:
	virtual ~CMainFrame();

	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#line 83 ".\\inc\\mainfrm.h"

void RepaintMeasurements();
void DockControlBarLeftOf(CToolBar* Bar,CToolBar* LeftOf);
void CreateOrActivateFrame(CDocTemplate* pTemplate,	CRuntimeClass* pViewClass);
void UpdateAllViews();
void setSelectMode(int mode);
void sizeTheSheets();
void createTheSheets();



protected:  
	CStatusBar  m_wndStatusBar;
	CToolBar    m_wndToolBar;

	CToolBar    m_wndImageToolBar;
	CToolBar    m_wndGraphicsToolBar;
	PointGridBar m_wnd3DPoints;

	
	BOOL 		m_bColor;
	BOOL 		m_bToolTips;
	CMapPtrToPtr m_3DtoTree; 


protected:
	
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnPaletteChanged(CWnd* pFocusWnd);
	 BOOL OnQueryNewPalette();
	 void OnViewToolbar();
	 void OnViewGraphic();
	 BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	 void OnMeasure();
	 void OnUpdateViews(CCmdUI* pCmdUI);
	 void OnSize(UINT nType, int cx, int cy);
	 void OnSettingsOptions();
	 void OnEditZones();
	 void OnEditColumns();
	 void OnEditImages();
	 void OnEditTransformations();
	 void OnLButtonUp(UINT nFlags, CPoint point);
	 void OnTimer(UINT nIDEvent);
	 void OnAccelCopygrid();
	 void OnEditEquipdata();
	 void OnEditEquipimages();
	 void OnFileProjects();
	 void OnPaint();
	 void OnUpdateEditEquipdata(CCmdUI* pCmdUI);
	 BOOL OnEraseBkgnd(CDC* pDC);
	 void OnRays();
	 void OnOverlay();
	 void OnMeasureCylinderbyedge();
	 void OnUpdateRays(CCmdUI* pCmdUI);
	 void OnUpdateOverlay(CCmdUI* pCmdUI);
	 void OnMouseMove(UINT nFlags, CPoint point);
	 void OnClose();
	 void OnMeasureCirclebyedge();
	 void OnMeasureCircleby3dpoint();
	 void OnViewElementlist();
	 void OnEditBundlecalculations();
	 void OnLfClick3dpointgrid(short Pane, long Row, long Column, long ClickPos, long * Status);
	 void OnEditCopy();
	 void OnEditPaste();
	 void OnEditCut();
	private: static const AFX_EVENTSINKMAP_ENTRY _eventsinkEntries[]; static UINT _eventsinkEntryCount; protected: static  const AFX_EVENTSINKMAP eventsinkMap; static const AFX_EVENTSINKMAP* __stdcall _GetBaseEventSinkMap(); virtual const AFX_EVENTSINKMAP* GetEventSinkMap() const;
	
	 void OnGridLeftClick();
	 void OnGridMouseMove(UINT flags, CPoint p );
	 void OnSheetTab();
	 void OnKillCreateCylinder();
	 void OnKillCreateCircle();
	 LONG OnCurrentElementChange(WPARAM wParam, LPARAM lParam);
	 LONG OnUnitsChange(WPARAM wParam, LPARAM lParam);
	 LONG OnNewTreeNode(WPARAM wParam, LPARAM lParam);
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; static const AFX_MSGMAP* __stdcall _GetBaseMessageMap(); virtual const AFX_MSGMAP* GetMessageMap() const;
};

#line 162 ".\\inc\\mainfrm.h"

#line 18 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"




static char THIS_FILE[] = "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp";
#line 24 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
































double getInches( char *inputStr );

int DataTableToGridRowData( CDTData &dtRow, GridRowData &grdRow );
int GridRowDataToDataTable( GridRowData &grdRow, CDTData &dtRow );

int add3DObjToGrid( CDatatbl *theTable, Ptg3DNode *theNode );
int add3DObjToGrid( CDatatbl *theTable, Ptg3DCylinderObj *theCyli );
int add3DObjToGrid( CDatatbl *theTable, Ptg3DBoxObj *theBox );

double ValueCellToMMDouble( CDTData row, int index )
{
	char strValue[256];
	double retValue = 0.0;

	row.GetItem( strValue, index );

	if( ((CFotobrowApp *)AfxGetApp())->m_Units == 1 )
		retValue = atof(strValue);
	else
		retValue = 25.4 * getInches(strValue);

	return retValue;
}





int PointGridBar::sheetGrids[] = {
	1111,
	1108,
	1109,
	1110 };

PointGridBar::PointGridBar()
{
	currentSheetIndex = 0;
	currentNode = 0;
}

PointGridBar::~PointGridBar()
{
}

const AFX_MSGMAP* __stdcall PointGridBar::_GetBaseMessageMap() { return &CDialogBar::messageMap; } const AFX_MSGMAP* PointGridBar::GetMessageMap() const { return &PointGridBar::messageMap; }  const AFX_MSGMAP PointGridBar::messageMap = { &PointGridBar::_GetBaseMessageMap, &PointGridBar::_messageEntries[0] }; const AFX_MSGMAP_ENTRY PointGridBar::_messageEntries[] = {
	
	{ 0x0005, 0, 0, 0, AfxSig_vwii, (AFX_PMSG)(AFX_PMSGW)(void ( CWnd::*)(UINT, int, int))&OnSize },
	{ 0x0111, 0, (WORD)0xE122, (WORD)0xE122, AfxSig_vv, (AFX_PMSG)&OnEditCopy },
	{ 0x0111, ((UINT)(-1)), (WORD)0xE122, (WORD)0xE122, AfxSig_cmdui, (AFX_PMSG)(void ( CCmdTarget::*)(CCmdUI*))&OnUpdateEditCopy },
	{ 0x0111, 0, (WORD)0xE123, (WORD)0xE123, AfxSig_vv, (AFX_PMSG)&OnEditCut },
	{ 0x0111, ((UINT)(-1)), (WORD)0xE123, (WORD)0xE123, AfxSig_cmdui, (AFX_PMSG)(void ( CCmdTarget::*)(CCmdUI*))&OnUpdateEditCut },
	{ 0x0111, 0, (WORD)0xE125, (WORD)0xE125, AfxSig_vv, (AFX_PMSG)&OnEditPaste },
	{ 0x0111, ((UINT)(-1)), (WORD)0xE125, (WORD)0xE125, AfxSig_cmdui, (AFX_PMSG)(void ( CCmdTarget::*)(CCmdUI*))&OnUpdateEditPaste },
	{ UM_CURRENT_ELEMENT_CHANGE, 0, 0, 0, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(LRESULT ( CWnd::*)(WPARAM, LPARAM))&OnCurrentElementChange },
	{ UM_UNITS_CHANGE, 0, 0, 0, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(LRESULT ( CWnd::*)(WPARAM, LPARAM))&OnUnitsChange },
	
{0, 0, 0, 0, AfxSig_end, (AFX_PMSG)0 } };





const AFX_EVENTSINKMAP* __stdcall PointGridBar::_GetBaseEventSinkMap() { return &CDialogBar::eventsinkMap; } const AFX_EVENTSINKMAP* PointGridBar::GetEventSinkMap() const { return &PointGridBar::eventsinkMap; } const AFX_EVENTSINKMAP PointGridBar::eventsinkMap = { &PointGridBar::_GetBaseEventSinkMap, &PointGridBar::_eventsinkEntries[0], &PointGridBar::_eventsinkEntryCount }; UINT PointGridBar::_eventsinkEntryCount = (UINT)-1; const AFX_EVENTSINKMAP_ENTRY PointGridBar::_eventsinkEntries[] = {
    
	{ "", 50, "\x02" "\x03" "\x03" "\x03" "\x43", VT_BOOL, (AFX_PMSG)(void (PointGridBar::*)(void))&OnLfClick3dpointgrid, (AFX_PMSG)0, 0, afxDispCustom, 1108, (UINT)-1 },
	{ "", 20, "\x03" "\x43", VT_BOOL, (AFX_PMSG)(void (PointGridBar::*)(void))&OnBeforeDeleteRowPointgrid, (AFX_PMSG)0, 0, afxDispCustom, 1108, (UINT)-1 },
	{ "", 6, "\x03" "\x03", VT_BOOL, (AFX_PMSG)(void (PointGridBar::*)(void))&OnChangeNodeGrid, (AFX_PMSG)0, 0, afxDispCustom, 1111, (UINT)-1 },
	{ "", 6, "\x03" "\x03", VT_BOOL, (AFX_PMSG)(void (PointGridBar::*)(void))&OnChangePointgrid, (AFX_PMSG)0, 0, afxDispCustom, 1108, (UINT)-1 },
	{ "", 6, "\x03" "\x03", VT_BOOL, (AFX_PMSG)(void (PointGridBar::*)(void))&OnChangeCylinderGrid, (AFX_PMSG)0, 0, afxDispCustom, 1109, (UINT)-1 },
	{ "", 6, "\x03" "\x03", VT_BOOL, (AFX_PMSG)(void (PointGridBar::*)(void))&OnChangeBoxGrid, (AFX_PMSG)0, 0, afxDispCustom, 1110, (UINT)-1 },

	
{ 0, ( -1 ), 0, VT_VOID, (AFX_PMSG)0, (AFX_PMSG)0, (size_t)-1, afxDispCustom, (UINT)-1, 0 } };

void PointGridBar::OnLfClick3dpointgrid(short Pane, long Row, long Column, long ClickPos, long * Status) 
{


	if( Row < 0 )
		return;

	CDatatbl *m_PointGrid = (CDatatbl *)GetDlgItem( 1108 );
	CDTData selectedRow = m_PointGrid->GetRowSet().GetItem(Row).GetValue();
	GridRowData selectedRowData;

	DataTableToGridRowData( selectedRow, selectedRowData );

	for( long i = 0; i < m_PointGrid->GetRowSet().GetCount(); i++ )
	{
		CDTData row = m_PointGrid->GetRowSet().GetItem(i).GetValue();
		GridRowData rowData;

		DataTableToGridRowData( row, rowData );

		rowData.dx = selectedRowData.x - rowData.x;
		rowData.dy = selectedRowData.y - rowData.y;
		rowData.dz = selectedRowData.z - rowData.z;
		rowData.dist = sqrt(rowData.dx*rowData.dx + rowData.dy*rowData.dy + rowData.dz*rowData.dz);
		UpdateUnits(&rowData);

		GridRowDataToDataTable( rowData, row );
		m_PointGrid->GetRowSet().GetItem(i).SetValue(row);
	}
}

void PointGridBar::UpdateUnits(GridRowData *row)
{
	if( ((CFotobrowApp *)AfxGetApp())->m_Units == 1 )
	{
		sprintf(row->sz_x, "%15.2f", row->x );
		sprintf(row->sz_y, "%15.2f", row->y );
		sprintf(row->sz_z, "%15.2f", row->z );
		sprintf(row->sz_dx, "%15.2f", row->dx );
		sprintf(row->sz_dy, "%15.2f", row->dy );
		sprintf(row->sz_dz, "%15.2f", row->dz );
		sprintf(row->sz_dist, "%15.2f", row->dist );
	}
	else
	{
		
		ConvertUnits(row->sz_x, 30, row->x/25.4 );
		ConvertUnits(row->sz_y, 30, row->y/25.4 );
		ConvertUnits(row->sz_z, 30, row->z/25.4 );
		ConvertUnits(row->sz_dx, 30, row->dx/25.4 );
		ConvertUnits(row->sz_dy, 30, row->dy/25.4 );
		ConvertUnits(row->sz_dz, 30, row->dz/25.4 );
		ConvertUnits(row->sz_dist, 30, row->dist/25.4 );
	}
} 

void PointGridBar::OnSize(UINT nType, int cx, int cy) 
{
	int topBorder = 3;
	int bottomBorder = 3;
	int leftBorder = 3;
	int rightBorder = 3;

	CDialogBar::OnSize(nType, cx, cy);
	CRect dialogBarRect;
	GetClientRect( &dialogBarRect );

	CTabCtrl *tabCntrl = (CTabCtrl *)GetDlgItem( 1093 );
	CRect tabControlRect;
	if( tabCntrl )
	{
		tabCntrl->GetClientRect( &tabControlRect );
		tabCntrl->SetWindowPos( &wndTop,
				0,
				dialogBarRect.Height() - (tabControlRect.Height() + bottomBorder),
				dialogBarRect.Width(), tabControlRect.Height(), 0x0040 );
	}

	for( int i = 0; i < sizeof(sheetGrids) / sizeof(sheetGrids[0]); i++ )
	{
		CDatatbl *gridCntrl = (CDatatbl *)GetDlgItem(sheetGrids[i]);
		if( gridCntrl )
		{
			UINT flags = 0x0010|0x0040;
			if( i != currentSheetIndex )
				flags |= 0x0004;

			gridCntrl->SetWindowPos( 0, leftBorder, topBorder,
					dialogBarRect.Width() - (leftBorder + rightBorder),
					dialogBarRect.Height() - (topBorder + bottomBorder + tabControlRect.Height() - 1),
					flags );
			if( i == currentSheetIndex )
				gridCntrl->BringWindowToTop();
		}
	}

	InvalidateRect(0,1);
}

void PointGridBar::OnEditCopy() 
{
	CWnd *currWnd = GetFocus();
	CDatatbl *dataTbl = (CDatatbl *)GetDlgItem(1108);

	
	
	
	if( currWnd == dataTbl )
		dataTbl->SendMessageA( 0x0301, 0, 0 );
}

void PointGridBar::OnUpdateEditCopy(CCmdUI* pCmdUI) 
{
	pCmdUI->Enable(1);
}

void PointGridBar::OnEditCut() 
{
	CWnd *currWnd = GetFocus();
	CDatatbl *dataTbl = (CDatatbl *)GetDlgItem(1108);

	
	
	
	if( currWnd == dataTbl )
		dataTbl->SendMessageA( 0x0300, 0, 0 );
}

void PointGridBar::OnUpdateEditCut(CCmdUI* pCmdUI) 
{
	pCmdUI->Enable(1);
}

void PointGridBar::OnEditPaste() 
{
	CWnd *currWnd = GetFocus();
	CDatatbl *dataTbl = (CDatatbl *)GetDlgItem(1108);

	
	
	
	if( currWnd == dataTbl )
		dataTbl->SendMessageA( 0x0302, 0, 0 );
}

void PointGridBar::OnUpdateEditPaste(CCmdUI* pCmdUI) 
{
	pCmdUI->Enable(1);
}

void PointGridBar::OnBeforeDeleteRowPointgrid(long Row, long * Status)
{

}



#line 288 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"





void PointGridBar::OnChangeNodeGrid(long Row, long Column)
{
	_WIN32_WINNT;

































#line 330 "C:\\busbyj\\dev\\Pm3 Lite\\PointGridBar.cpp"
}

void PointGridBar::OnChangePointgrid(long Row, long Column)
{
	CDatatbl *m_PointGrid = (CDatatbl *)GetDlgItem( 1108 );
	CDTData currentRow = m_PointGrid->GetRowSet().GetItem(Row).GetValue();
	GridRowData currentRowData;

	DataTableToGridRowData( currentRow, currentRowData );

	char *strValue = 0;
	double *dblValue = 0;

	switch( Column )
	{
		case 1:
			strValue = currentRowData.sz_x;
			dblValue = &(currentRowData.x);
			break;
		case 2:
			strValue = currentRowData.sz_y;
			dblValue = &(currentRowData.y);
			break;
		case 3:
			strValue = currentRowData.sz_z;
			dblValue = &(currentRowData.z);
			break;
	}

	if( strValue != 0 && dblValue != 0 )
	{
		if( ((CFotobrowApp *)AfxGetApp())->m_Units == 1 )
			*dblValue = atof(strValue);
		else
		{
			*dblValue = 25.4*getInches(strValue);
			ConvertUnits( strValue, 30, *dblValue / 25.4 );
		}
	}

	GridRowDataToDataTable( currentRowData, currentRow );
	m_PointGrid->GetRowSet().GetItem(Row).SetValue(currentRow);
}

void PointGridBar::OnChangeCylinderGrid(long Row, long Column)
{
	CDatatbl *cylinderGrid = (CDatatbl *)GetDlgItem( 1109 );
	CDTData currRow = cylinderGrid->GetRowSet().GetItem(Row).GetValue();

	Ptg3DCylinderObj *currCyli;
	char strValue[256];

	currRow.GetItem( (long *)(&currCyli), 12 );

	if( currCyli == 0 )
	{
		currCyli = new(THIS_FILE, 386) Ptg3DCylinderObj;
		currentNode->addMember( currCyli );
		currRow.PutItem( (long)currCyli, 12 );
		cylinderGrid->GetRowSet().GetItem(Row).SetValue(currRow);

		currRow.PutItem( "", 1 );
		currRow.PutItem( "", 2 );
		currRow.PutItem( 0.0, 3 );
		currRow.PutItem( 0.0, 4 );
		currRow.PutItem( 0.0, 5 );
		currRow.PutItem( 0.0, 6 );
		currRow.PutItem( 0.0, 7 );
		currRow.PutItem( 0.0, 8 );
		currRow.PutItem( 0.0, 9 );
		currRow.PutItem( 0.0, 10 );
		currRow.PutItem( 0.0, 11 );
	}

	switch( Column )
	{
		case 0:
			currRow.GetItem( strValue, Column );
			currCyli->setName( strValue );
			break;

		case 1:
			currCyli->setRadius( ValueCellToMMDouble( currRow, Column ) / 2.0 );
			break;
		case 2:
			currCyli->setHeight( ValueCellToMMDouble( currRow, Column ) );
			break;

		default:
			break;
	}

	((CMainFrame *)(((CFotobrowApp *)AfxGetApp()))->m_pMainWnd)->UpdateAllViews();
}

void PointGridBar::OnChangeBoxGrid(long Row, long Column)
{
	if( Column < 1 || Column > 3 ) 
		return;

	CDatatbl *m_PointGrid = (CDatatbl *)GetDlgItem( 1110 );

	CDTData currentRow = m_PointGrid->GetRowSet().GetItem(Row).GetValue();

	char boxName[256];

	currentRow.GetItem( boxName, 0 );	

	Ptg3DNode *currBox = currentNode->findByName( boxName, 1 );
	if( currBox != 0 && (strcmp((currBox)->getType(),Ptg3DBoxObj::className)?0:1) )
	{
		((Ptg3DBoxObj *)currBox)->setXLen( ValueCellToMMDouble( currentRow, 1 ) );
		((Ptg3DBoxObj *)currBox)->setYLen( ValueCellToMMDouble( currentRow, 2 ) );
		((Ptg3DBoxObj *)currBox)->setZLen( ValueCellToMMDouble( currentRow, 3 ) );
	}

	((CMainFrame *)(((CFotobrowApp *)AfxGetApp()))->m_pMainWnd)->UpdateAllViews();
}







BOOL PointGridBar::OnNotify( WPARAM wParam, LPARAM lParam, LRESULT *pResult )
{
	NMHDR *hdr;
	int index;
	hdr = (NMHDR *)lParam;
	switch( hdr->code )
	{
		case ((0U-550U) - 1):
			index = ::SendMessageA(hdr->hwndFrom,(0x1300 + 11) ,0,0);
			if( index >= 0 )
			{
				currentSheetIndex = index;
				CDatatbl *newActiveTab = (CDatatbl *)GetDlgItem( sheetGrids[currentSheetIndex] );
				newActiveTab->BringWindowToTop();
			}
			else
				MessageBoxA("I got nothing");
			break;
	}

	return CDialogBar::OnNotify(wParam, lParam, pResult);
}

BOOL PointGridBar::Create(CWnd* pParentWnd, UINT nStyle)
{
	BOOL returnVal;

	returnVal = CDialogBar::Create( pParentWnd, 252, nStyle, 252 );

	CTabCtrl *sheet_tabs = (CTabCtrl *)GetDlgItem(1093);
	do { if (!(sheet_tabs) && AfxAssertFailedLine(THIS_FILE, 485)) __asm { int 3 }; } while (0);
	TC_ITEMA tc;

	tc.mask = 0x0001|0x0008;

	tc.pszText = "Nodes";
	tc.lParam = 0;
	sheet_tabs->InsertItem(0, &tc);

	tc.pszText = "Points";
	tc.lParam = 1;
	sheet_tabs->InsertItem(1, &tc);

	tc.pszText = "Cylinders";
	tc.lParam = 2;
	sheet_tabs->InsertItem(2, &tc);

	tc.pszText = "Boxes";
	tc.lParam = 3;
	sheet_tabs->InsertItem(3, &tc);











	sheet_tabs->SetCurSel( currentSheetIndex );
	CWnd *cwnd = GetDlgItem(sheetGrids[currentSheetIndex]);
	cwnd->BringWindowToTop();
	cwnd->InvalidateRect(0,1);
	
	return returnVal;
}

LONG PointGridBar::OnCurrentElementChange(WPARAM wParam, LPARAM lParam)
{
	currentNode = (Ptg3DNode *)wParam;

	if( currentNode == 0 )
		return 1;

	if( !((strcmp((currentNode)->getType(),Ptg3DNode::className)?0:1) || (strcmp((currentNode)->getType(),PtgWorld::className)?0:1)) )
		currentNode = (Ptg3DNode *)currentNode->getOwner();

	if( currentNode == 0 )
		return 1;

	CDatatbl *nodeSheet = (CDatatbl *)GetDlgItem( 1111 );
	CDatatbl *cyliSheet = (CDatatbl *)GetDlgItem( 1109 );
	CDatatbl *boxSheet = (CDatatbl *)GetDlgItem( 1110 );

	nodeSheet->GetRowSet().Reset();
	cyliSheet->GetRowSet().Reset();
	boxSheet->GetRowSet().Reset();

	POSITION pos;
	for( pos = currentNode->getMemberList().GetHeadPosition(); pos != 0;
		currentNode->getMemberList().GetNext(pos) )
	{
	    Ptg3DNode *aNode = (Ptg3DNode *)(currentNode->getMemberList().GetAt(pos));

		if( (strcmp((aNode)->getType(),Ptg3DNode::className)?0:1) || (strcmp((aNode)->getType(),PtgWorld::className)?0:1) )
		{
			add3DObjToGrid( nodeSheet, aNode );
		}
		else if( (strcmp((aNode)->getType(),Ptg3DCylinderObj::className)?0:1) )
		{
			add3DObjToGrid( cyliSheet, (Ptg3DCylinderObj *)aNode );
		}
		else if( (strcmp((aNode)->getType(),Ptg3DBoxObj::className)?0:1) )
		{
			add3DObjToGrid( boxSheet, (Ptg3DBoxObj *)aNode );
		}
	}

	return 1;
}

LONG PointGridBar::OnUnitsChange(WPARAM wParam, LPARAM lParam)
{
	
	CDatatbl *dataTable = (CDatatbl *)GetDlgItem(1108);
	do { if (!(dataTable) && AfxAssertFailedLine(THIS_FILE, 572)) __asm { int 3 }; } while (0);

	for( long i = 0; i < dataTable->GetRowSet().GetCount(); i++ )
	{
		CDTData row = dataTable->GetRowSet().GetItem(i).GetValue();
		GridRowData rowData;

		DataTableToGridRowData( row, rowData );

		UpdateUnits(&rowData);

		GridRowDataToDataTable( rowData, row );

		dataTable->GetRowSet().GetItem(i).SetValue(row);
	}

	dataTable->InvalidateRect( 0, 1 );

	
	OnCurrentElementChange( (WPARAM)currentNode, (LPARAM)0 );

	return 1;
}

int add3DObjToGrid( CDatatbl *theTable, Ptg3DNode *theNode )
{
	CDTData rowData;

	rowData.CreateArray( 6 );

	rowData.PutItem( theNode->getName(), 0 );
	rowData.PutItem( (long)theNode, 4 );

	theTable->GetRowSet().Add(-2l, rowData);

	return 1;
}

int add3DObjToGrid( CDatatbl *theTable, Ptg3DCylinderObj *theCyli )
{
	CDTData rowData;
	char diameter[31];
	char height[31];

	if( ((CFotobrowApp *)AfxGetApp())->m_Units == 1 )
	{
		sprintf( diameter, "%10.2f", theCyli->getRadius() * 2.0 );
		sprintf( height, "%10.2f", theCyli->getHeight() );
	}
	else
	{
		ConvertUnits( diameter, 30, theCyli->getRadius() * 2.0 / 25.4 );
		ConvertUnits( height, 30, theCyli->getHeight() / 25.4 );
	}

	rowData.CreateArray(14);

	rowData.PutItem( theCyli->getName(), 0 );
	rowData.PutItem( diameter, 1 );
	rowData.PutItem( height, 2 );
	rowData.PutItem( (long)theCyli, 12 );

	theTable->GetRowSet().Add(-2l, rowData);

	return 1;
}

int add3DObjToGrid( CDatatbl *theTable, Ptg3DBoxObj *theBox )
{
	CDTData rowData;
	char xLength[256];
	char yLength[256];
	char zLength[256];

	if( ((CFotobrowApp *)AfxGetApp())->m_Units == 1 )
	{
		sprintf( xLength, "%10.2f", theBox->getXLen() );
		sprintf( yLength, "%10.2f", theBox->getYLen() );
		sprintf( zLength, "%10.2f", theBox->getZLen() );
	}
	else
	{
		ConvertUnits( xLength, 30, theBox->getXLen() / 25.4 );
		ConvertUnits( yLength, 30, theBox->getYLen() / 25.4 );
		ConvertUnits( zLength, 30, theBox->getZLen() / 25.4 );
	}

	rowData.CreateArray(7);

	rowData.PutItem( theBox->getName(), 0 );
	rowData.PutItem( xLength, 1 );
	rowData.PutItem( yLength, 2 );
	rowData.PutItem( zLength, 3 );
	
	theTable->GetRowSet().Add(-2l, rowData);

	return 1;
}


















