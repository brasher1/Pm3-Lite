// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "dtrowset.h"

// Dispatch interfaces referenced by this interface
#include "DTRow.h"


/////////////////////////////////////////////////////////////////////////////
// CDTRowSet properties

long CDTRowSet::GetCount()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CDTRowSet::SetCount(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

BOOL CDTRowSet::GetAllowResize()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CDTRowSet::SetAllowResize(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

long CDTRowSet::GetSelectType()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CDTRowSet::SetSelectType(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CDTRowSet::GetVertAlign()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CDTRowSet::SetVertAlign(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

short CDTRowSet::GetHeadingType()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CDTRowSet::SetHeadingType(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

float CDTRowSet::GetHeight()
{
	float result;
	GetProperty(0x9, VT_R4, (void*)&result);
	return result;
}

void CDTRowSet::SetHeight(float propVal)
{
	SetProperty(0x9, VT_R4, propVal);
}

BOOL CDTRowSet::GetTrapDeleteKey()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CDTRowSet::SetTrapDeleteKey(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CDTRowSet::GetTrapInsertKey()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CDTRowSet::SetTrapInsertKey(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CDTRowSet::GetAllowAutoRowInsert()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CDTRowSet::SetAllowAutoRowInsert(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDTRowSet operations

void CDTRowSet::Copy(long Source, long Dest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Source, Dest);
}

void CDTRowSet::Move(long Source, long Dest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Source, Dest);
}

void CDTRowSet::Remove(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

long CDTRowSet::GetSelectCount()
{
	long result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CDTRowSet::SelectRange(long Start, long End, BOOL SelectOn)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Start, End, SelectOn);
}

long CDTRowSet::GetVisCount(long TBPane)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		TBPane);
	return result;
}

long CDTRowSet::GetFirstVisible(long TBPane)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		TBPane);
	return result;
}

void CDTRowSet::SetFirstVisible(long TBPane, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 TBPane, nNewValue);
}

void CDTRowSet::Reset()
{
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CDTRowSet::Add(long Index, const VARIANT& Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index, &Data);
	return result;
}

CDTRow CDTRowSet::GetItem(long Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return CDTRow(pDispatch);
}

void CDTRowSet::SetItem(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

CDTRow CDTRowSet::Get_Item(long Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return CDTRow(pDispatch);
}

void CDTRowSet::Set_Item(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x0, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

long CDTRowSet::GetSelect(long After)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		After);
	return result;
}
