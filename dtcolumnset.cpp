// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "dtcolumnset.h"

// Dispatch interfaces referenced by this interface
#include "dtcolumn.h"


/////////////////////////////////////////////////////////////////////////////
// CDTColumnSet properties

long CDTColumnSet::GetCount()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CDTColumnSet::SetCount(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CDTColumnSet::GetAllowResize()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumnSet::SetAllowResize(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CDTColumnSet::GetSelectType()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CDTColumnSet::SetSelectType(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

short CDTColumnSet::GetNumListItems()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CDTColumnSet::SetNumListItems(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

BOOL CDTColumnSet::GetHideListArrow()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumnSet::SetHideListArrow(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

short CDTColumnSet::GetLabelType()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CDTColumnSet::SetLabelType(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

BOOL CDTColumnSet::GetSortEnabled()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CDTColumnSet::SetSortEnabled(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDTColumnSet operations

void CDTColumnSet::Remove(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CDTColumnSet::Move(long Source, long Dest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Source, Dest);
}

void CDTColumnSet::Copy(long Source, long Dest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Source, Dest);
}

long CDTColumnSet::GetSelectCount()
{
	long result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CDTColumnSet::SelectRange(long Start, long End, BOOL SelectOn)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Start, End, SelectOn);
}

long CDTColumnSet::GetVisCount(long LRPane)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		LRPane);
	return result;
}

long CDTColumnSet::GetSortKey(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void CDTColumnSet::SetSortKey(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}

BOOL CDTColumnSet::GetSortAsc(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void CDTColumnSet::SetSortAsc(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

BOOL CDTColumnSet::GetSortCaseI(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void CDTColumnSet::SetSortCaseI(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

long CDTColumnSet::GetFirstVisible(long LRPane)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		LRPane);
	return result;
}

void CDTColumnSet::SetFirstVisible(long LRPane, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 LRPane, nNewValue);
}

void CDTColumnSet::Add(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

long CDTColumnSet::GetColWithName(LPCTSTR Name)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Name);
	return result;
}

CDTColumn CDTColumnSet::GetItem(long Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return CDTColumn(pDispatch);
}

void CDTColumnSet::SetItem(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

CDTColumn CDTColumnSet::Get_Item(long Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return CDTColumn(pDispatch);
}

void CDTColumnSet::Set_Item(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x0, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

long CDTColumnSet::GetSelect(long After)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		After);
	return result;
}
